
MQ-135_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08008678  08008678  00018678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a54  08008a54  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008a54  08008a54  00018a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a5c  08008a5c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a5c  08008a5c  00018a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a60  08008a60  00018a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000002dc  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004b0  200004b0  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c0f2  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000020ec  00000000  00000000  0002c339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009f0  00000000  00000000  0002e428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000792  00000000  00000000  0002ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023582  00000000  00000000  0002f5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d843  00000000  00000000  00052b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d769a  00000000  00000000  0006036f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c78  00000000  00000000  00137a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0013b684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008660 	.word	0x08008660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008660 	.word	0x08008660

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart2, (uint8_t*) rxdata, 16);
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	4919      	ldr	r1, [pc, #100]	; (8000fb4 <HAL_UART_RxCpltCallback+0x70>)
 8000f50:	4819      	ldr	r0, [pc, #100]	; (8000fb8 <HAL_UART_RxCpltCallback+0x74>)
 8000f52:	f002 ff8a 	bl	8003e6a <HAL_UART_Receive_IT>
	char *str;
	char *p2;

	char buffer[32];

	str = strstr(rxdata, "$");
 8000f56:	2124      	movs	r1, #36	; 0x24
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <HAL_UART_RxCpltCallback+0x70>)
 8000f5a:	f004 fd42 	bl	80059e2 <strchr>
 8000f5e:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (str != NULL) {
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d022      	beq.n	8000fac <HAL_UART_RxCpltCallback+0x68>
		p2 = strstr(str, "\n");
 8000f66:	210a      	movs	r1, #10
 8000f68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f6a:	f004 fd3a 	bl	80059e2 <strchr>
 8000f6e:	62b8      	str	r0, [r7, #40]	; 0x28
		if (p2 != NULL) {
 8000f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d01a      	beq.n	8000fac <HAL_UART_RxCpltCallback+0x68>
			memset(buffer, 0, 32);
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 fd27 	bl	80059d2 <memset>
			sprintf(buffer, "%.*s", p2 - str - 1, str + 1);
 8000f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	1e5a      	subs	r2, r3, #1
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8e:	3301      	adds	r3, #1
 8000f90:	f107 0008 	add.w	r0, r7, #8
 8000f94:	4909      	ldr	r1, [pc, #36]	; (8000fbc <HAL_UART_RxCpltCallback+0x78>)
 8000f96:	f004 fcb9 	bl	800590c <siprintf>
			qtime = atoi(buffer);
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fefc 	bl	8004d9c <atoi>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_UART_RxCpltCallback+0x7c>)
 8000faa:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000fac:	bf00      	nop
 8000fae:	3730      	adds	r7, #48	; 0x30
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200001f0 	.word	0x200001f0
 8000fb8:	20000318 	.word	0x20000318
 8000fbc:	08008678 	.word	0x08008678
 8000fc0:	20000244 	.word	0x20000244

08000fc4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fca:	f000 fded 	bl	8001ba8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fce:	f000 f891 	bl	80010f4 <SystemClock_Config>
	RTC_DateTypeDef sDate;

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fd2:	f000 f9d1 	bl	8001378 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000fd6:	f000 f8f9 	bl	80011cc <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000fda:	f000 f9a3 	bl	8001324 <MX_USART2_UART_Init>
	MX_RTC_Init();
 8000fde:	f000 f947 	bl	8001270 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	volatile uint32_t ltime;				// Time variable for led
	volatile uint32_t sensor_time;		// Time variable for sensor

	init_mq135_sensor(&mq135_sensor, &hadc1); // mq135 init func
 8000fe2:	4937      	ldr	r1, [pc, #220]	; (80010c0 <main+0xfc>)
 8000fe4:	4837      	ldr	r0, [pc, #220]	; (80010c4 <main+0x100>)
 8000fe6:	f000 fa1f 	bl	8001428 <init_mq135_sensor>

	HAL_UART_Receive_IT(&huart2, &buffer, 1);
 8000fea:	2201      	movs	r2, #1
 8000fec:	4936      	ldr	r1, [pc, #216]	; (80010c8 <main+0x104>)
 8000fee:	4837      	ldr	r0, [pc, #220]	; (80010cc <main+0x108>)
 8000ff0:	f002 ff3b 	bl	8003e6a <HAL_UART_Receive_IT>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		/*    ********     READ Sensor     ********      */
		read_mq135_sensor(&mq135_sensor);
 8000ff4:	4833      	ldr	r0, [pc, #204]	; (80010c4 <main+0x100>)
 8000ff6:	f000 faab 	bl	8001550 <read_mq135_sensor>

		/*    ******** TRANSMIT OPERATIONS ********       */

		if (HAL_GetTick() - sensor_time >= qtime) {
 8000ffa:	f000 fe3b 	bl	8001c74 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	1ad2      	subs	r2, r2, r3
 8001004:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <main+0x10c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	d347      	bcc.n	800109c <main+0xd8>

			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	482f      	ldr	r0, [pc, #188]	; (80010d4 <main+0x110>)
 8001016:	f002 fd3d 	bl	8003a94 <HAL_RTC_GetDate>

			sprintf(data_date, "%d.%d.%d ---------", sDate.Date, sDate.Month,
 800101a:	7abb      	ldrb	r3, [r7, #10]
 800101c:	461a      	mov	r2, r3
 800101e:	7a7b      	ldrb	r3, [r7, #9]
 8001020:	4619      	mov	r1, r3
					sDate.Year);
 8001022:	7afb      	ldrb	r3, [r7, #11]
			sprintf(data_date, "%d.%d.%d ---------", sDate.Date, sDate.Month,
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	460b      	mov	r3, r1
 8001028:	492b      	ldr	r1, [pc, #172]	; (80010d8 <main+0x114>)
 800102a:	482c      	ldr	r0, [pc, #176]	; (80010dc <main+0x118>)
 800102c:	f004 fc6e 	bl	800590c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) data_date, sizeof(data_tim),
 8001030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001034:	2220      	movs	r2, #32
 8001036:	4929      	ldr	r1, [pc, #164]	; (80010dc <main+0x118>)
 8001038:	4824      	ldr	r0, [pc, #144]	; (80010cc <main+0x108>)
 800103a:	f002 fe84 	bl	8003d46 <HAL_UART_Transmit>
					1000);

			/*    *********  	RTC    **********         */

			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	4823      	ldr	r0, [pc, #140]	; (80010d4 <main+0x110>)
 8001048:	f002 fc42 	bl	80038d0 <HAL_RTC_GetTime>

			sprintf(data_tim, "%d:%d:%d ---------", sTime.Hours, sTime.Minutes,
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	461a      	mov	r2, r3
 8001050:	7b7b      	ldrb	r3, [r7, #13]
 8001052:	4619      	mov	r1, r3
					sTime.Seconds);
 8001054:	7bbb      	ldrb	r3, [r7, #14]
			sprintf(data_tim, "%d:%d:%d ---------", sTime.Hours, sTime.Minutes,
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	460b      	mov	r3, r1
 800105a:	4921      	ldr	r1, [pc, #132]	; (80010e0 <main+0x11c>)
 800105c:	4821      	ldr	r0, [pc, #132]	; (80010e4 <main+0x120>)
 800105e:	f004 fc55 	bl	800590c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) data_tim, sizeof(data_tim),
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	2220      	movs	r2, #32
 8001068:	491e      	ldr	r1, [pc, #120]	; (80010e4 <main+0x120>)
 800106a:	4818      	ldr	r0, [pc, #96]	; (80010cc <main+0x108>)
 800106c:	f002 fe6b 	bl	8003d46 <HAL_UART_Transmit>
					1000);

			/*     ******  TRANSMITTING SENSOR DATA   *****       */

			sprintf(txdata, "$%f;\n", mq135_sensor.gas_carbon_dioxide);
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <main+0x100>)
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa67 	bl	8000548 <__aeabi_f2d>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	491a      	ldr	r1, [pc, #104]	; (80010e8 <main+0x124>)
 8001080:	481a      	ldr	r0, [pc, #104]	; (80010ec <main+0x128>)
 8001082:	f004 fc43 	bl	800590c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) txdata, sizeof(txdata), 1000);
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	4917      	ldr	r1, [pc, #92]	; (80010ec <main+0x128>)
 800108e:	480f      	ldr	r0, [pc, #60]	; (80010cc <main+0x108>)
 8001090:	f002 fe59 	bl	8003d46 <HAL_UART_Transmit>

			sensor_time = HAL_GetTick();
 8001094:	f000 fdee 	bl	8001c74 <HAL_GetTick>
 8001098:	4603      	mov	r3, r0
 800109a:	603b      	str	r3, [r7, #0]

		}

		/*      *******   LED BLINK EVERY 100 MS    ******    */

		if (HAL_GetTick() - ltime >= 100) {
 800109c:	f000 fdea 	bl	8001c74 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b63      	cmp	r3, #99	; 0x63
 80010a8:	d9a4      	bls.n	8000ff4 <main+0x30>

			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	4810      	ldr	r0, [pc, #64]	; (80010f0 <main+0x12c>)
 80010b0:	f001 fd69 	bl	8002b86 <HAL_GPIO_TogglePin>

			ltime = HAL_GetTick();
 80010b4:	f000 fdde 	bl	8001c74 <HAL_GetTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	607b      	str	r3, [r7, #4]
		read_mq135_sensor(&mq135_sensor);
 80010bc:	e79a      	b.n	8000ff4 <main+0x30>
 80010be:	bf00      	nop
 80010c0:	200002b0 	.word	0x200002b0
 80010c4:	20000288 	.word	0x20000288
 80010c8:	20000240 	.word	0x20000240
 80010cc:	20000318 	.word	0x20000318
 80010d0:	20000244 	.word	0x20000244
 80010d4:	200002f8 	.word	0x200002f8
 80010d8:	08008680 	.word	0x08008680
 80010dc:	20000268 	.word	0x20000268
 80010e0:	08008694 	.word	0x08008694
 80010e4:	20000248 	.word	0x20000248
 80010e8:	080086a8 	.word	0x080086a8
 80010ec:	20000200 	.word	0x20000200
 80010f0:	40020c00 	.word	0x40020c00

080010f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	2230      	movs	r2, #48	; 0x30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f004 fc65 	bl	80059d2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <SystemClock_Config+0xd0>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <SystemClock_Config+0xd0>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <SystemClock_Config+0xd0>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <SystemClock_Config+0xd4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <SystemClock_Config+0xd4>)
 800113e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <SystemClock_Config+0xd4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001150:	2309      	movs	r3, #9
 8001152:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001154:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800115a:	2301      	movs	r3, #1
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115e:	2302      	movs	r3, #2
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001162:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001168:	2304      	movs	r3, #4
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800116c:	23a8      	movs	r3, #168	; 0xa8
 800116e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f001 fd1d 	bl	8002bbc <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x98>
		Error_Handler();
 8001188:	f000 f948 	bl	800141c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001198:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800119c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2105      	movs	r1, #5
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 ff7e 	bl	80030ac <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xc6>
		Error_Handler();
 80011b6:	f000 f931 	bl	800141c <Error_Handler>
	}
}
 80011ba:	bf00      	nop
 80011bc:	3750      	adds	r7, #80	; 0x50
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_ADC1_Init+0x98>)
 80011e0:	4a21      	ldr	r2, [pc, #132]	; (8001268 <MX_ADC1_Init+0x9c>)
 80011e2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_ADC1_Init+0x98>)
 80011e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ea:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_ADC1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_ADC1_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_ADC1_Init+0x98>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_ADC1_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_ADC1_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_ADC1_Init+0x98>)
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <MX_ADC1_Init+0xa0>)
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_ADC1_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_ADC1_Init+0x98>)
 800121a:	2201      	movs	r2, #1
 800121c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_ADC1_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_ADC1_Init+0x98>)
 8001228:	2201      	movs	r2, #1
 800122a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_ADC1_Init+0x98>)
 800122e:	f000 fd51 	bl	8001cd4 <HAL_ADC_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0x70>
		Error_Handler();
 8001238:	f000 f8f0 	bl	800141c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800123c:	2303      	movs	r3, #3
 800123e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001244:	2306      	movs	r3, #6
 8001246:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_ADC1_Init+0x98>)
 800124e:	f000 ff23 	bl	8002098 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0x90>
		Error_Handler();
 8001258:	f000 f8e0 	bl	800141c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200002b0 	.word	0x200002b0
 8001268:	40012000 	.word	0x40012000
 800126c:	0f000001 	.word	0x0f000001

08001270 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <MX_RTC_Init+0xac>)
 800128a:	4a25      	ldr	r2, [pc, #148]	; (8001320 <MX_RTC_Init+0xb0>)
 800128c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <MX_RTC_Init+0xac>)
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <MX_RTC_Init+0xac>)
 8001296:	227f      	movs	r2, #127	; 0x7f
 8001298:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <MX_RTC_Init+0xac>)
 800129c:	22ff      	movs	r2, #255	; 0xff
 800129e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <MX_RTC_Init+0xac>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <MX_RTC_Init+0xac>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_RTC_Init+0xac>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80012b2:	481a      	ldr	r0, [pc, #104]	; (800131c <MX_RTC_Init+0xac>)
 80012b4:	f002 f9fc 	bl	80036b0 <HAL_RTC_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_RTC_Init+0x52>
		Error_Handler();
 80012be:	f000 f8ad 	bl	800141c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 15;
 80012c2:	230f      	movs	r3, #15
 80012c4:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 38;
 80012c6:	2326      	movs	r3, #38	; 0x26
 80012c8:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 00;
 80012ca:	2300      	movs	r3, #0
 80012cc:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	480f      	ldr	r0, [pc, #60]	; (800131c <MX_RTC_Init+0xac>)
 80012de:	f002 fa5d 	bl	800379c <HAL_RTC_SetTime>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_RTC_Init+0x7c>
		Error_Handler();
 80012e8:	f000 f898 	bl	800141c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80012ec:	2302      	movs	r3, #2
 80012ee:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_NOVEMBER;
 80012f0:	2311      	movs	r3, #17
 80012f2:	707b      	strb	r3, [r7, #1]
	sDate.Date = 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 22;
 80012f8:	2316      	movs	r3, #22
 80012fa:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <MX_RTC_Init+0xac>)
 8001304:	f002 fb42 	bl	800398c <HAL_RTC_SetDate>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_RTC_Init+0xa2>
		Error_Handler();
 800130e:	f000 f885 	bl	800141c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200002f8 	.word	0x200002f8
 8001320:	40002800 	.word	0x40002800

08001324 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_USART2_UART_Init+0x50>)
 800132c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART2_UART_Init+0x4c>)
 800135c:	f002 fca6 	bl	8003cac <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001366:	f000 f859 	bl	800141c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000318 	.word	0x20000318
 8001374:	40004400 	.word	0x40004400

08001378 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <MX_GPIO_Init+0x9c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <MX_GPIO_Init+0x9c>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <MX_GPIO_Init+0x9c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_GPIO_Init+0x9c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <MX_GPIO_Init+0x9c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_GPIO_Init+0x9c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_GPIO_Init+0x9c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a11      	ldr	r2, [pc, #68]	; (8001414 <MX_GPIO_Init+0x9c>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_GPIO_Init+0x9c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e8:	480b      	ldr	r0, [pc, #44]	; (8001418 <MX_GPIO_Init+0xa0>)
 80013ea:	f001 fbb3 	bl	8002b54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4619      	mov	r1, r3
 8001406:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_GPIO_Init+0xa0>)
 8001408:	f001 fa08 	bl	800281c <HAL_GPIO_Init>

}
 800140c:	bf00      	nop
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	40020c00 	.word	0x40020c00

0800141c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001424:	e7fe      	b.n	8001424 <Error_Handler+0x8>
	...

08001428 <init_mq135_sensor>:

#include "mq135_sensor.h"
#include "math.h"


void init_mq135_sensor(mq135_t *mq135, ADC_HandleTypeDef *hadc1) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	mq135->hadc1 = hadc1;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	601a      	str	r2, [r3, #0]

	// CALIBRATION
	mq135->RS_air = 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
	mq135->R0 = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]

	for (uint8_t i = 0; i < CALIBARAION_SAMPLE_TIMES; i++) {
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e016      	b.n	800147c <init_mq135_sensor+0x54>
		mq135->RS_air += calculate_res_mq135_sensor(read_mq135_sensor_ADC(mq135));
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f85c 	bl	800150c <read_mq135_sensor_ADC>
 8001454:	4603      	mov	r3, r0
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f83c 	bl	80014d4 <calculate_res_mq135_sensor>
 800145c:	eeb0 7a40 	vmov.f32	s14, s0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	edd3 7a01 	vldr	s15, [r3, #4]
 8001466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edc3 7a01 	vstr	s15, [r3, #4]
		HAL_Delay(100);
 8001470:	2064      	movs	r0, #100	; 0x64
 8001472:	f000 fc0b 	bl	8001c8c <HAL_Delay>
	for (uint8_t i = 0; i < CALIBARAION_SAMPLE_TIMES; i++) {
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	3301      	adds	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	2b31      	cmp	r3, #49	; 0x31
 8001480:	d9e5      	bls.n	800144e <init_mq135_sensor+0x26>
	}

	mq135->RS_air = mq135->RS_air / CALIBARAION_SAMPLE_TIMES;              //calculate the average value
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	ed93 7a01 	vldr	s14, [r3, #4]
 8001488:	eddf 6a11 	vldr	s13, [pc, #68]	; 80014d0 <init_mq135_sensor+0xa8>
 800148c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edc3 7a01 	vstr	s15, [r3, #4]

	mq135->R0 = mq135->RS_air / RO_CLEAN_AIR_FACTOR_MQ135;                   //RS_AIR_val divided by RO_CLEAN_AIR_FACTOR yields the Ro
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f854 	bl	8000548 <__aeabi_f2d>
 80014a0:	a309      	add	r3, pc, #36	; (adr r3, 80014c8 <init_mq135_sensor+0xa0>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff f9d1 	bl	800084c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fb79 	bl	8000ba8 <__aeabi_d2f>
 80014b6:	4602      	mov	r2, r0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	f3af 8000 	nop.w
 80014c8:	eb851eb8 	.word	0xeb851eb8
 80014cc:	400cb851 	.word	0x400cb851
 80014d0:	42480000 	.word	0x42480000

080014d4 <calculate_res_mq135_sensor>:

float calculate_res_mq135_sensor(uint16_t raw_adc)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  return (float)RL_VALUE_MQ135 * (4096 - raw_adc) / raw_adc;
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014fa:	eef0 7a66 	vmov.f32	s15, s13
}
 80014fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <read_mq135_sensor_ADC>:

uint16_t read_mq135_sensor_ADC(mq135_t *mq135) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start(mq135->hadc1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fc1f 	bl	8001d5c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(mq135->hadc1, HAL_MAX_DELAY);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f04f 31ff 	mov.w	r1, #4294967295
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fd1d 	bl	8001f66 <HAL_ADC_PollForConversion>
	uint32_t adc_value = HAL_ADC_GetValue(mq135->hadc1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fda3 	bl	800207c <HAL_ADC_GetValue>
 8001536:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(mq135->hadc1);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fcdf 	bl	8001f00 <HAL_ADC_Stop>
	return (uint16_t) adc_value;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	b29b      	uxth	r3, r3
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <read_mq135_sensor>:

void read_mq135_sensor(mq135_t *mq135) {
 8001550:	b580      	push	{r7, lr}
 8001552:	ed2d 8b02 	vpush	{d8}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]


	mq135->rs_ro_ratio = calculate_res_mq135_sensor(read_mq135_sensor_ADC(mq135)) / mq135->R0;     //rs_ro_ratio
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ffd5 	bl	800150c <read_mq135_sensor_ADC>
 8001562:	4603      	mov	r3, r0
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ffb5 	bl	80014d4 <calculate_res_mq135_sensor>
 800156a:	eef0 6a40 	vmov.f32	s13, s0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	ed93 7a02 	vldr	s14, [r3, #8]
 8001574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	edc3 7a03 	vstr	s15, [r3, #12]

	mq135->gas_carbon_dioxide = (powf(10.0f,((-2.890f*(log10f(mq135->rs_ro_ratio))) + 2.055f)));   // CO2
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	edd3 7a03 	vldr	s15, [r3, #12]
 8001584:	eeb0 0a67 	vmov.f32	s0, s15
 8001588:	f006 fb2a 	bl	8007be0 <log10f>
 800158c:	eef0 7a40 	vmov.f32	s15, s0
 8001590:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001738 <read_mq135_sensor+0x1e8>
 8001594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001598:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800173c <read_mq135_sensor+0x1ec>
 800159c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015a0:	eef0 0a67 	vmov.f32	s1, s15
 80015a4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80015a8:	f006 fb48 	bl	8007c3c <powf>
 80015ac:	eef0 7a40 	vmov.f32	s15, s0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	edc3 7a05 	vstr	s15, [r3, #20]

	mq135->gas_carbon_monoxide  = (powf(10.0f,(1.457f*powf((log10f(mq135->rs_ro_ratio)), 2.0f) - 4.725f*(log10f(mq135->rs_ro_ratio)) + 2.855f)));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	f006 fb0e 	bl	8007be0 <log10f>
 80015c4:	eef0 7a40 	vmov.f32	s15, s0
 80015c8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	f006 fb34 	bl	8007c3c <powf>
 80015d4:	eef0 7a40 	vmov.f32	s15, s0
 80015d8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001740 <read_mq135_sensor+0x1f0>
 80015dc:	ee27 8a87 	vmul.f32	s16, s15, s14
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	f006 faf9 	bl	8007be0 <log10f>
 80015ee:	eef0 7a40 	vmov.f32	s15, s0
 80015f2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001744 <read_mq135_sensor+0x1f4>
 80015f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fa:	ee78 7a67 	vsub.f32	s15, s16, s15
 80015fe:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001748 <read_mq135_sensor+0x1f8>
 8001602:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001606:	eef0 0a67 	vmov.f32	s1, s15
 800160a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800160e:	f006 fb15 	bl	8007c3c <powf>
 8001612:	eef0 7a40 	vmov.f32	s15, s0
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edc3 7a04 	vstr	s15, [r3, #16]

	mq135->gas_alchol = (powf(10.0f,((-3.181f*(log10f(mq135->rs_ro_ratio))) + 1.895f)));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001622:	eeb0 0a67 	vmov.f32	s0, s15
 8001626:	f006 fadb 	bl	8007be0 <log10f>
 800162a:	eef0 7a40 	vmov.f32	s15, s0
 800162e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800174c <read_mq135_sensor+0x1fc>
 8001632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001636:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001750 <read_mq135_sensor+0x200>
 800163a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800163e:	eef0 0a67 	vmov.f32	s1, s15
 8001642:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001646:	f006 faf9 	bl	8007c3c <powf>
 800164a:	eef0 7a40 	vmov.f32	s15, s0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	edc3 7a06 	vstr	s15, [r3, #24]

	mq135->gas_ammonium = (powf(10.0f,((-2.469f*(log10f(mq135->rs_ro_ratio))) + 2.005f)));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edd3 7a03 	vldr	s15, [r3, #12]
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	f006 fabf 	bl	8007be0 <log10f>
 8001662:	eef0 7a40 	vmov.f32	s15, s0
 8001666:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001754 <read_mq135_sensor+0x204>
 800166a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001758 <read_mq135_sensor+0x208>
 8001672:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001676:	eef0 0a67 	vmov.f32	s1, s15
 800167a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800167e:	f006 fadd 	bl	8007c3c <powf>
 8001682:	eef0 7a40 	vmov.f32	s15, s0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	edc3 7a07 	vstr	s15, [r3, #28]

	mq135->gas_toluene = (powf(10.0f,((-3.479f*(log10f(mq135->rs_ro_ratio))) + 1.658f)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001692:	eeb0 0a67 	vmov.f32	s0, s15
 8001696:	f006 faa3 	bl	8007be0 <log10f>
 800169a:	eef0 7a40 	vmov.f32	s15, s0
 800169e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800175c <read_mq135_sensor+0x20c>
 80016a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001760 <read_mq135_sensor+0x210>
 80016aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ae:	eef0 0a67 	vmov.f32	s1, s15
 80016b2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80016b6:	f006 fac1 	bl	8007c3c <powf>
 80016ba:	eef0 7a40 	vmov.f32	s15, s0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	edc3 7a08 	vstr	s15, [r3, #32]

	mq135->gas_acetone = (powf(10.0f,(-1.004f*powf((log10f(mq135->rs_ro_ratio)), 2.0f) - 3.525f*(log10f(mq135->rs_ro_ratio)) + 1.553f)));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016ca:	eeb0 0a67 	vmov.f32	s0, s15
 80016ce:	f006 fa87 	bl	8007be0 <log10f>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
 80016d6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	f006 faad 	bl	8007c3c <powf>
 80016e2:	eef0 7a40 	vmov.f32	s15, s0
 80016e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001764 <read_mq135_sensor+0x214>
 80016ea:	ee27 8a87 	vmul.f32	s16, s15, s14
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	f006 fa72 	bl	8007be0 <log10f>
 80016fc:	eef0 7a40 	vmov.f32	s15, s0
 8001700:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001768 <read_mq135_sensor+0x218>
 8001704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001708:	ee78 7a67 	vsub.f32	s15, s16, s15
 800170c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800176c <read_mq135_sensor+0x21c>
 8001710:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001714:	eef0 0a67 	vmov.f32	s1, s15
 8001718:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800171c:	f006 fa8e 	bl	8007c3c <powf>
 8001720:	eef0 7a40 	vmov.f32	s15, s0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24



}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	ecbd 8b02 	vpop	{d8}
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	c038f5c3 	.word	0xc038f5c3
 800173c:	4003851f 	.word	0x4003851f
 8001740:	3fba7efa 	.word	0x3fba7efa
 8001744:	40973333 	.word	0x40973333
 8001748:	4036b852 	.word	0x4036b852
 800174c:	c04b9581 	.word	0xc04b9581
 8001750:	3ff28f5c 	.word	0x3ff28f5c
 8001754:	c01e0419 	.word	0xc01e0419
 8001758:	400051ec 	.word	0x400051ec
 800175c:	c05ea7f0 	.word	0xc05ea7f0
 8001760:	3fd43958 	.word	0x3fd43958
 8001764:	bf808312 	.word	0xbf808312
 8001768:	4061999a 	.word	0x4061999a
 800176c:	3fc6c8b4 	.word	0x3fc6c8b4

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_MspInit+0x4c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <HAL_MspInit+0x4c>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_MspInit+0x4c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_MspInit+0x4c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_MspInit+0x4c>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_MspInit+0x4c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_ADC_MspInit+0x7c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d127      	bne.n	8001832 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_ADC_MspInit+0x80>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <HAL_ADC_MspInit+0x80>)
 80017ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_ADC_MspInit+0x80>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_ADC_MspInit+0x80>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_ADC_MspInit+0x80>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_ADC_MspInit+0x80>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800181a:	2308      	movs	r3, #8
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181e:	2303      	movs	r3, #3
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_ADC_MspInit+0x84>)
 800182e:	f000 fff5 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40012000 	.word	0x40012000
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000

08001848 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <HAL_RTC_MspInit+0x4c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d111      	bne.n	800188c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001868:	2302      	movs	r3, #2
 800186a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800186c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001870:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4618      	mov	r0, r3
 8001878:	f001 fe38 	bl	80034ec <HAL_RCCEx_PeriphCLKConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001882:	f7ff fdcb 	bl	800141c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <HAL_RTC_MspInit+0x50>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40002800 	.word	0x40002800
 8001898:	42470e3c 	.word	0x42470e3c

0800189c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <HAL_UART_MspInit+0x94>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d133      	bne.n	8001926 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_UART_MspInit+0x98>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <HAL_UART_MspInit+0x98>)
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_UART_MspInit+0x98>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_UART_MspInit+0x98>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_UART_MspInit+0x98>)
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_UART_MspInit+0x98>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018f6:	2360      	movs	r3, #96	; 0x60
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001906:	2307      	movs	r3, #7
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <HAL_UART_MspInit+0x9c>)
 8001912:	f000 ff83 	bl	800281c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2026      	movs	r0, #38	; 0x26
 800191c:	f000 feb5 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001920:	2026      	movs	r0, #38	; 0x26
 8001922:	f000 fece 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40004400 	.word	0x40004400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020c00 	.word	0x40020c00

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 f960 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <USART2_IRQHandler+0x10>)
 8001996:	f002 fa99 	bl	8003ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000318 	.word	0x20000318

080019a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_kill>:

int _kill(int pid, int sig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019be:	f004 f867 	bl	8005a90 <__errno>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2216      	movs	r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_exit>:

void _exit (int status)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffe7 	bl	80019b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e6:	e7fe      	b.n	80019e6 <_exit+0x12>

080019e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e00a      	b.n	8001a10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019fa:	f3af 8000 	nop.w
 80019fe:	4601      	mov	r1, r0
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	b2ca      	uxtb	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf0      	blt.n	80019fa <_read+0x12>
  }

  return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e009      	b.n	8001a48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60ba      	str	r2, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf1      	blt.n	8001a34 <_write+0x12>
  }
  return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_close>:

int _close(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a82:	605a      	str	r2, [r3, #4]
  return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_isatty>:

int _isatty(int file)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f003 ffcc 	bl	8005a90 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20020000 	.word	0x20020000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	2000035c 	.word	0x2000035c
 8001b2c:	200004b0 	.word	0x200004b0

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff ffd7 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f003 ff8b 	bl	8005a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff fa1d 	bl	8000fc4 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b98:	08008a64 	.word	0x08008a64
  ldr r2, =_sbss
 8001b9c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ba0:	200004b0 	.word	0x200004b0

08001ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_Init+0x40>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_Init+0x40>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_Init+0x40>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 fd4f 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	200f      	movs	r0, #15
 8001bd8:	f000 f808 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fdc8 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fd67 	bl	80026de <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f000 fd2f 	bl	800268a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x20>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_IncTick+0x24>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20000360 	.word	0x20000360

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_GetTick+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000360 	.word	0x20000360

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff ffee 	bl	8001c74 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ffde 	bl	8001c74 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000008 	.word	0x20000008

08001cd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e033      	b.n	8001d52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fd64 	bl	80017c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d118      	bne.n	8001d44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d1a:	f023 0302 	bic.w	r3, r3, #2
 8001d1e:	f043 0202 	orr.w	r2, r3, #2
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fad8 	bl	80022dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40
 8001d42:	e001      	b.n	8001d48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Start+0x1a>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e0b2      	b.n	8001edc <HAL_ADC_Start+0x180>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d018      	beq.n	8001dbe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9c:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <HAL_ADC_Start+0x18c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a52      	ldr	r2, [pc, #328]	; (8001eec <HAL_ADC_Start+0x190>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0c9a      	lsrs	r2, r3, #18
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001db0:	e002      	b.n	8001db8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f9      	bne.n	8001db2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d17a      	bne.n	8001ec2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0a:	d106      	bne.n	8001e1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	f023 0206 	bic.w	r2, r3, #6
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e28:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_ADC_Start+0x194>)
 8001e2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e34:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d12a      	bne.n	8001e98 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a2b      	ldr	r2, [pc, #172]	; (8001ef4 <HAL_ADC_Start+0x198>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d015      	beq.n	8001e78 <HAL_ADC_Start+0x11c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <HAL_ADC_Start+0x19c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d105      	bne.n	8001e62 <HAL_ADC_Start+0x106>
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <HAL_ADC_Start+0x194>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <HAL_ADC_Start+0x1a0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d136      	bne.n	8001eda <HAL_ADC_Start+0x17e>
 8001e6c:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_ADC_Start+0x194>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d130      	bne.n	8001eda <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d129      	bne.n	8001eda <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	e020      	b.n	8001eda <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a15      	ldr	r2, [pc, #84]	; (8001ef4 <HAL_ADC_Start+0x198>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d11b      	bne.n	8001eda <HAL_ADC_Start+0x17e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d114      	bne.n	8001eda <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	e00b      	b.n	8001eda <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f043 0210 	orr.w	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	431bde83 	.word	0x431bde83
 8001ef0:	40012300 	.word	0x40012300
 8001ef4:	40012000 	.word	0x40012000
 8001ef8:	40012100 	.word	0x40012100
 8001efc:	40012200 	.word	0x40012200

08001f00 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_Stop+0x16>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e021      	b.n	8001f5a <HAL_ADC_Stop+0x5a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f82:	d113      	bne.n	8001fac <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f92:	d10b      	bne.n	8001fac <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e063      	b.n	8002074 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001fac:	f7ff fe62 	bl	8001c74 <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fb2:	e021      	b.n	8001ff8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fba:	d01d      	beq.n	8001ff8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <HAL_ADC_PollForConversion+0x6c>
 8001fc2:	f7ff fe57 	bl	8001c74 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d212      	bcs.n	8001ff8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d00b      	beq.n	8001ff8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f043 0204 	orr.w	r2, r3, #4
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e03d      	b.n	8002074 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b02      	cmp	r3, #2
 8002004:	d1d6      	bne.n	8001fb4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0212 	mvn.w	r2, #18
 800200e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d123      	bne.n	8002072 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800202e:	2b00      	cmp	r3, #0
 8002030:	d11f      	bne.n	8002072 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800204a:	2b00      	cmp	r3, #0
 800204c:	d111      	bne.n	8002072 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x1c>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e105      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x228>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d925      	bls.n	8002110 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68d9      	ldr	r1, [r3, #12]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	3b1e      	subs	r3, #30
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43da      	mvns	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	400a      	ands	r2, r1
 80020e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68d9      	ldr	r1, [r3, #12]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	4603      	mov	r3, r0
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4403      	add	r3, r0
 8002102:	3b1e      	subs	r3, #30
 8002104:	409a      	lsls	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	e022      	b.n	8002156 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	2207      	movs	r2, #7
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	400a      	ands	r2, r1
 8002132:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6919      	ldr	r1, [r3, #16]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	4603      	mov	r3, r0
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4403      	add	r3, r0
 800214c:	409a      	lsls	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b06      	cmp	r3, #6
 800215c:	d824      	bhi.n	80021a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b05      	subs	r3, #5
 8002170:	221f      	movs	r2, #31
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	400a      	ands	r2, r1
 800217e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	3b05      	subs	r3, #5
 800219a:	fa00 f203 	lsl.w	r2, r0, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34
 80021a6:	e04c      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d824      	bhi.n	80021fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	3b23      	subs	r3, #35	; 0x23
 80021c2:	221f      	movs	r2, #31
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43da      	mvns	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	400a      	ands	r2, r1
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3b23      	subs	r3, #35	; 0x23
 80021ec:	fa00 f203 	lsl.w	r2, r0, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
 80021f8:	e023      	b.n	8002242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	3b41      	subs	r3, #65	; 0x41
 800220c:	221f      	movs	r2, #31
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	400a      	ands	r2, r1
 800221a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	3b41      	subs	r3, #65	; 0x41
 8002236:	fa00 f203 	lsl.w	r2, r0, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <HAL_ADC_ConfigChannel+0x234>)
 8002244:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <HAL_ADC_ConfigChannel+0x238>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d109      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1cc>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d105      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <HAL_ADC_ConfigChannel+0x238>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d123      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x21e>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b10      	cmp	r3, #16
 8002274:	d003      	beq.n	800227e <HAL_ADC_ConfigChannel+0x1e6>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b11      	cmp	r3, #17
 800227c:	d11b      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b10      	cmp	r3, #16
 8002290:	d111      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_ADC_ConfigChannel+0x23c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_ADC_ConfigChannel+0x240>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	0c9a      	lsrs	r2, r3, #18
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022a8:	e002      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f9      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012300 	.word	0x40012300
 80022d0:	40012000 	.word	0x40012000
 80022d4:	20000000 	.word	0x20000000
 80022d8:	431bde83 	.word	0x431bde83

080022dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e4:	4b79      	ldr	r3, [pc, #484]	; (80024cc <ADC_Init+0x1f0>)
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	021a      	lsls	r2, r3, #8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6899      	ldr	r1, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	4a58      	ldr	r2, [pc, #352]	; (80024d0 <ADC_Init+0x1f4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d022      	beq.n	80023ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002382:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6899      	ldr	r1, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	e00f      	b.n	80023da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0202 	bic.w	r2, r2, #2
 80023e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6899      	ldr	r1, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7e1b      	ldrb	r3, [r3, #24]
 80023f4:	005a      	lsls	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002416:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002426:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	3b01      	subs	r3, #1
 8002434:	035a      	lsls	r2, r3, #13
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	e007      	b.n	8002450 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	3b01      	subs	r3, #1
 800246c:	051a      	lsls	r2, r3, #20
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002484:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6899      	ldr	r1, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002492:	025a      	lsls	r2, r3, #9
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6899      	ldr	r1, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	029a      	lsls	r2, r3, #10
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	609a      	str	r2, [r3, #8]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40012300 	.word	0x40012300
 80024d0:	0f000001 	.word	0x0f000001

080024d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f0:	4013      	ands	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <__NVIC_GetPriorityGrouping+0x18>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f003 0307 	and.w	r3, r3, #7
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	db0b      	blt.n	8002562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	4907      	ldr	r1, [pc, #28]	; (8002570 <__NVIC_EnableIRQ+0x38>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2001      	movs	r0, #1
 800255a:	fa00 f202 	lsl.w	r2, r0, r2
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	; (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f1c3 0307 	rsb	r3, r3, #7
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	bf28      	it	cs
 80025e6:	2304      	movcs	r3, #4
 80025e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d902      	bls.n	80025f8 <NVIC_EncodePriority+0x30>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	e000      	b.n	80025fa <NVIC_EncodePriority+0x32>
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43d9      	mvns	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4313      	orrs	r3, r2
         );
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002640:	d301      	bcc.n	8002646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002642:	2301      	movs	r3, #1
 8002644:	e00f      	b.n	8002666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <SysTick_Config+0x40>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264e:	210f      	movs	r1, #15
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f7ff ff8e 	bl	8002574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <SysTick_Config+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SysTick_Config+0x40>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff29 	bl	80024d4 <__NVIC_SetPriorityGrouping>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff3e 	bl	800251c <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff8e 	bl	80025c8 <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5d 	bl	8002574 <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff31 	bl	8002538 <__NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa2 	bl	8002630 <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff fab6 	bl	8001c74 <HAL_GetTick>
 8002708:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d008      	beq.n	8002728 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e052      	b.n	80027ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0216 	bic.w	r2, r2, #22
 8002736:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002746:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <HAL_DMA_Abort+0x62>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0208 	bic.w	r2, r2, #8
 8002766:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002778:	e013      	b.n	80027a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800277a:	f7ff fa7b 	bl	8001c74 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b05      	cmp	r3, #5
 8002786:	d90c      	bls.n	80027a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2203      	movs	r2, #3
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e015      	b.n	80027ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e4      	bne.n	800277a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	223f      	movs	r2, #63	; 0x3f
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d004      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2280      	movs	r2, #128	; 0x80
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e00c      	b.n	800280e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2205      	movs	r2, #5
 80027f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e16b      	b.n	8002b10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	f040 815a 	bne.w	8002b0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d005      	beq.n	800286e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286a:	2b02      	cmp	r3, #2
 800286c:	d130      	bne.n	80028d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d017      	beq.n	800290c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d123      	bne.n	8002960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80b4 	beq.w	8002b0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b60      	ldr	r3, [pc, #384]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a5f      	ldr	r2, [pc, #380]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b5d      	ldr	r3, [pc, #372]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029be:	4a5b      	ldr	r2, [pc, #364]	; (8002b2c <HAL_GPIO_Init+0x310>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_GPIO_Init+0x314>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02b      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a51      	ldr	r2, [pc, #324]	; (8002b34 <HAL_GPIO_Init+0x318>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d025      	beq.n	8002a3e <HAL_GPIO_Init+0x222>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a50      	ldr	r2, [pc, #320]	; (8002b38 <HAL_GPIO_Init+0x31c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <HAL_GPIO_Init+0x21e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4f      	ldr	r2, [pc, #316]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_GPIO_Init+0x21a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4e      	ldr	r2, [pc, #312]	; (8002b40 <HAL_GPIO_Init+0x324>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0x216>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4d      	ldr	r2, [pc, #308]	; (8002b44 <HAL_GPIO_Init+0x328>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00d      	beq.n	8002a2e <HAL_GPIO_Init+0x212>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4c      	ldr	r2, [pc, #304]	; (8002b48 <HAL_GPIO_Init+0x32c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x20e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4b      	ldr	r2, [pc, #300]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_GPIO_Init+0x20a>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e00e      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a26:	2308      	movs	r3, #8
 8002a28:	e00c      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e00a      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a42:	2300      	movs	r3, #0
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a54:	4935      	ldr	r1, [pc, #212]	; (8002b2c <HAL_GPIO_Init+0x310>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a86:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a8c:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab0:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ada:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b04:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	f67f ae90 	bls.w	8002838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40021400 	.word	0x40021400
 8002b48:	40021800 	.word	0x40021800
 8002b4c:	40021c00 	.word	0x40021c00
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b70:	e003      	b.n	8002b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	041a      	lsls	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	619a      	str	r2, [r3, #24]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b98:	887a      	ldrh	r2, [r7, #2]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	041a      	lsls	r2, r3, #16
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	43d9      	mvns	r1, r3
 8002ba4:	887b      	ldrh	r3, [r7, #2]
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	619a      	str	r2, [r3, #24]
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e267      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d075      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bda:	4b88      	ldr	r3, [pc, #544]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d00c      	beq.n	8002c00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be6:	4b85      	ldr	r3, [pc, #532]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d112      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4b82      	ldr	r3, [pc, #520]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfe:	d10b      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	4b7e      	ldr	r3, [pc, #504]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d05b      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x108>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d157      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e242      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c20:	d106      	bne.n	8002c30 <HAL_RCC_OscConfig+0x74>
 8002c22:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a75      	ldr	r2, [pc, #468]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e01d      	b.n	8002c6c <HAL_RCC_OscConfig+0xb0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x98>
 8002c3a:	4b70      	ldr	r3, [pc, #448]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6f      	ldr	r2, [pc, #444]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b6d      	ldr	r3, [pc, #436]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6c      	ldr	r2, [pc, #432]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xb0>
 8002c54:	4b69      	ldr	r3, [pc, #420]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a68      	ldr	r2, [pc, #416]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe fffe 	bl	8001c74 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fffa 	bl	8001c74 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e207      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0xc0>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe ffea 	bl	8001c74 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe ffe6 	bl	8001c74 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1f3      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	4b51      	ldr	r3, [pc, #324]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xe8>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d063      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cd2:	4b4a      	ldr	r3, [pc, #296]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d11c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cea:	4b44      	ldr	r3, [pc, #272]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x152>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e1c7      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4937      	ldr	r1, [pc, #220]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	e03a      	b.n	8002d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2c:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_RCC_OscConfig+0x244>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fe ff9f 	bl	8001c74 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe ff9b 	bl	8001c74 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e1a8      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4925      	ldr	r1, [pc, #148]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
 8002d6c:	e015      	b.n	8002d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <HAL_RCC_OscConfig+0x244>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe ff7e 	bl	8001c74 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe ff7a 	bl	8001c74 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e187      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d036      	beq.n	8002e14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <HAL_RCC_OscConfig+0x248>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7fe ff5e 	bl	8001c74 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fe ff5a 	bl	8001c74 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e167      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x200>
 8002dda:	e01b      	b.n	8002e14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCC_OscConfig+0x248>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de2:	f7fe ff47 	bl	8001c74 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de8:	e00e      	b.n	8002e08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dea:	f7fe ff43 	bl	8001c74 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d907      	bls.n	8002e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e150      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470000 	.word	0x42470000
 8002e04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e08:	4b88      	ldr	r3, [pc, #544]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ea      	bne.n	8002dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8097 	beq.w	8002f50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e22:	2300      	movs	r3, #0
 8002e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e26:	4b81      	ldr	r3, [pc, #516]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	4b7d      	ldr	r3, [pc, #500]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	4a7c      	ldr	r2, [pc, #496]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	6413      	str	r3, [r2, #64]	; 0x40
 8002e42:	4b7a      	ldr	r3, [pc, #488]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	4b77      	ldr	r3, [pc, #476]	; (8003030 <HAL_RCC_OscConfig+0x474>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d118      	bne.n	8002e90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5e:	4b74      	ldr	r3, [pc, #464]	; (8003030 <HAL_RCC_OscConfig+0x474>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a73      	ldr	r2, [pc, #460]	; (8003030 <HAL_RCC_OscConfig+0x474>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe ff03 	bl	8001c74 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e72:	f7fe feff 	bl	8001c74 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e10c      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	4b6a      	ldr	r3, [pc, #424]	; (8003030 <HAL_RCC_OscConfig+0x474>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x2ea>
 8002e98:	4b64      	ldr	r3, [pc, #400]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a63      	ldr	r2, [pc, #396]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea4:	e01c      	b.n	8002ee0 <HAL_RCC_OscConfig+0x324>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b05      	cmp	r3, #5
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x30c>
 8002eae:	4b5f      	ldr	r3, [pc, #380]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a5e      	ldr	r2, [pc, #376]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	4b5c      	ldr	r3, [pc, #368]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a5b      	ldr	r2, [pc, #364]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec6:	e00b      	b.n	8002ee0 <HAL_RCC_OscConfig+0x324>
 8002ec8:	4b58      	ldr	r3, [pc, #352]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a57      	ldr	r2, [pc, #348]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed4:	4b55      	ldr	r3, [pc, #340]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a54      	ldr	r2, [pc, #336]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002eda:	f023 0304 	bic.w	r3, r3, #4
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d015      	beq.n	8002f14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fe fec4 	bl	8001c74 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef0:	f7fe fec0 	bl	8001c74 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e0cb      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f06:	4b49      	ldr	r3, [pc, #292]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ee      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x334>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f14:	f7fe feae 	bl	8001c74 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe feaa 	bl	8001c74 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0b5      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f32:	4b3e      	ldr	r3, [pc, #248]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1ee      	bne.n	8002f1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f44:	4b39      	ldr	r3, [pc, #228]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	4a38      	ldr	r2, [pc, #224]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a1 	beq.w	800309c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f5a:	4b34      	ldr	r3, [pc, #208]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d05c      	beq.n	8003020 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d141      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b31      	ldr	r3, [pc, #196]	; (8003034 <HAL_RCC_OscConfig+0x478>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe fe7e 	bl	8001c74 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe fe7a 	bl	8001c74 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e087      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	4b27      	ldr	r3, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	019b      	lsls	r3, r3, #6
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	041b      	lsls	r3, r3, #16
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	061b      	lsls	r3, r3, #24
 8002fbe:	491b      	ldr	r1, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <HAL_RCC_OscConfig+0x478>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fe fe53 	bl	8001c74 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe fe4f 	bl	8001c74 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e05c      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x416>
 8002ff0:	e054      	b.n	800309c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_RCC_OscConfig+0x478>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fe3c 	bl	8001c74 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe fe38 	bl	8001c74 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e045      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCC_OscConfig+0x470>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x444>
 800301e:	e03d      	b.n	800309c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e038      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
 800302c:	40023800 	.word	0x40023800
 8003030:	40007000 	.word	0x40007000
 8003034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <HAL_RCC_OscConfig+0x4ec>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d028      	beq.n	8003098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d121      	bne.n	8003098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d11a      	bne.n	8003098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800306e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003070:	4293      	cmp	r3, r2
 8003072:	d111      	bne.n	8003098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	3b01      	subs	r3, #1
 8003082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d107      	bne.n	8003098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800

080030ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0cc      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b68      	ldr	r3, [pc, #416]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d90c      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b65      	ldr	r3, [pc, #404]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b63      	ldr	r3, [pc, #396]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0b8      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a58      	ldr	r2, [pc, #352]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800310a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a52      	ldr	r2, [pc, #328]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003124:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	494d      	ldr	r1, [pc, #308]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d044      	beq.n	80031cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d119      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e07f      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d003      	beq.n	800316a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003166:	2b03      	cmp	r3, #3
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b3f      	ldr	r3, [pc, #252]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e06f      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e067      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318a:	4b37      	ldr	r3, [pc, #220]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4934      	ldr	r1, [pc, #208]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800319c:	f7fe fd6a 	bl	8001c74 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a4:	f7fe fd66 	bl	8001c74 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e04f      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 020c 	and.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1eb      	bne.n	80031a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031cc:	4b25      	ldr	r3, [pc, #148]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d20c      	bcs.n	80031f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b22      	ldr	r3, [pc, #136]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e032      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4916      	ldr	r1, [pc, #88]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	490e      	ldr	r1, [pc, #56]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003232:	f000 f821 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8003236:	4602      	mov	r2, r0
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	490a      	ldr	r1, [pc, #40]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	5ccb      	ldrb	r3, [r1, r3]
 8003246:	fa22 f303 	lsr.w	r3, r2, r3
 800324a:	4a09      	ldr	r2, [pc, #36]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fcca 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023c00 	.word	0x40023c00
 8003268:	40023800 	.word	0x40023800
 800326c:	080086b0 	.word	0x080086b0
 8003270:	20000000 	.word	0x20000000
 8003274:	20000004 	.word	0x20000004

08003278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b094      	sub	sp, #80	; 0x50
 800327e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	647b      	str	r3, [r7, #68]	; 0x44
 8003284:	2300      	movs	r3, #0
 8003286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003288:	2300      	movs	r3, #0
 800328a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003290:	4b79      	ldr	r3, [pc, #484]	; (8003478 <HAL_RCC_GetSysClockFreq+0x200>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d00d      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x40>
 800329c:	2b08      	cmp	r3, #8
 800329e:	f200 80e1 	bhi.w	8003464 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x34>
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032aa:	e0db      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b73      	ldr	r3, [pc, #460]	; (800347c <HAL_RCC_GetSysClockFreq+0x204>)
 80032ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032b0:	e0db      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032b2:	4b73      	ldr	r3, [pc, #460]	; (8003480 <HAL_RCC_GetSysClockFreq+0x208>)
 80032b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032b6:	e0d8      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b8:	4b6f      	ldr	r3, [pc, #444]	; (8003478 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032c2:	4b6d      	ldr	r3, [pc, #436]	; (8003478 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d063      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ce:	4b6a      	ldr	r3, [pc, #424]	; (8003478 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	099b      	lsrs	r3, r3, #6
 80032d4:	2200      	movs	r2, #0
 80032d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e0:	633b      	str	r3, [r7, #48]	; 0x30
 80032e2:	2300      	movs	r3, #0
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
 80032e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032ea:	4622      	mov	r2, r4
 80032ec:	462b      	mov	r3, r5
 80032ee:	f04f 0000 	mov.w	r0, #0
 80032f2:	f04f 0100 	mov.w	r1, #0
 80032f6:	0159      	lsls	r1, r3, #5
 80032f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fc:	0150      	lsls	r0, r2, #5
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4621      	mov	r1, r4
 8003304:	1a51      	subs	r1, r2, r1
 8003306:	6139      	str	r1, [r7, #16]
 8003308:	4629      	mov	r1, r5
 800330a:	eb63 0301 	sbc.w	r3, r3, r1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800331c:	4659      	mov	r1, fp
 800331e:	018b      	lsls	r3, r1, #6
 8003320:	4651      	mov	r1, sl
 8003322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003326:	4651      	mov	r1, sl
 8003328:	018a      	lsls	r2, r1, #6
 800332a:	4651      	mov	r1, sl
 800332c:	ebb2 0801 	subs.w	r8, r2, r1
 8003330:	4659      	mov	r1, fp
 8003332:	eb63 0901 	sbc.w	r9, r3, r1
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800334a:	4690      	mov	r8, r2
 800334c:	4699      	mov	r9, r3
 800334e:	4623      	mov	r3, r4
 8003350:	eb18 0303 	adds.w	r3, r8, r3
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	462b      	mov	r3, r5
 8003358:	eb49 0303 	adc.w	r3, r9, r3
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800336a:	4629      	mov	r1, r5
 800336c:	024b      	lsls	r3, r1, #9
 800336e:	4621      	mov	r1, r4
 8003370:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003374:	4621      	mov	r1, r4
 8003376:	024a      	lsls	r2, r1, #9
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337e:	2200      	movs	r2, #0
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
 8003382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003388:	f7fd fc5e 	bl	8000c48 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4613      	mov	r3, r2
 8003392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003394:	e058      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003396:	4b38      	ldr	r3, [pc, #224]	; (8003478 <HAL_RCC_GetSysClockFreq+0x200>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	2200      	movs	r2, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	4611      	mov	r1, r2
 80033a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033a6:	623b      	str	r3, [r7, #32]
 80033a8:	2300      	movs	r3, #0
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
 80033ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033b0:	4642      	mov	r2, r8
 80033b2:	464b      	mov	r3, r9
 80033b4:	f04f 0000 	mov.w	r0, #0
 80033b8:	f04f 0100 	mov.w	r1, #0
 80033bc:	0159      	lsls	r1, r3, #5
 80033be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033c2:	0150      	lsls	r0, r2, #5
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4641      	mov	r1, r8
 80033ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80033ce:	4649      	mov	r1, r9
 80033d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033e8:	ebb2 040a 	subs.w	r4, r2, sl
 80033ec:	eb63 050b 	sbc.w	r5, r3, fp
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	00eb      	lsls	r3, r5, #3
 80033fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033fe:	00e2      	lsls	r2, r4, #3
 8003400:	4614      	mov	r4, r2
 8003402:	461d      	mov	r5, r3
 8003404:	4643      	mov	r3, r8
 8003406:	18e3      	adds	r3, r4, r3
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	464b      	mov	r3, r9
 800340c:	eb45 0303 	adc.w	r3, r5, r3
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800341e:	4629      	mov	r1, r5
 8003420:	028b      	lsls	r3, r1, #10
 8003422:	4621      	mov	r1, r4
 8003424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003428:	4621      	mov	r1, r4
 800342a:	028a      	lsls	r2, r1, #10
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003432:	2200      	movs	r2, #0
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	61fa      	str	r2, [r7, #28]
 8003438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800343c:	f7fd fc04 	bl	8000c48 <__aeabi_uldivmod>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4613      	mov	r3, r2
 8003446:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_GetSysClockFreq+0x200>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	3301      	adds	r3, #1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800345a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003462:	e002      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCC_GetSysClockFreq+0x204>)
 8003466:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800346c:	4618      	mov	r0, r3
 800346e:	3750      	adds	r7, #80	; 0x50
 8003470:	46bd      	mov	sp, r7
 8003472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	00f42400 	.word	0x00f42400
 8003480:	007a1200 	.word	0x007a1200

08003484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <HAL_RCC_GetHCLKFreq+0x14>)
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000000 	.word	0x20000000

0800349c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034a0:	f7ff fff0 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0a9b      	lsrs	r3, r3, #10
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4903      	ldr	r1, [pc, #12]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	080086c0 	.word	0x080086c0

080034c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034c8:	f7ff ffdc 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0b5b      	lsrs	r3, r3, #13
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4903      	ldr	r1, [pc, #12]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	080086c0 	.word	0x080086c0

080034ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d105      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003510:	2b00      	cmp	r3, #0
 8003512:	d035      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003514:	4b62      	ldr	r3, [pc, #392]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800351a:	f7fe fbab 	bl	8001c74 <HAL_GetTick>
 800351e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003520:	e008      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003522:	f7fe fba7 	bl	8001c74 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0b0      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003534:	4b5b      	ldr	r3, [pc, #364]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f0      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	019a      	lsls	r2, r3, #6
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	071b      	lsls	r3, r3, #28
 800354c:	4955      	ldr	r1, [pc, #340]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003554:	4b52      	ldr	r3, [pc, #328]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800355a:	f7fe fb8b 	bl	8001c74 <HAL_GetTick>
 800355e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003562:	f7fe fb87 	bl	8001c74 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e090      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8083 	beq.w	8003694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b44      	ldr	r3, [pc, #272]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a43      	ldr	r2, [pc, #268]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80035aa:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3e      	ldr	r2, [pc, #248]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035b6:	f7fe fb5d 	bl	8001c74 <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fe fb59 	bl	8001c74 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e062      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d02f      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d028      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035fa:	4b2a      	ldr	r3, [pc, #168]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003602:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003604:	4b29      	ldr	r3, [pc, #164]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800360a:	4b28      	ldr	r3, [pc, #160]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003610:	4a24      	ldr	r2, [pc, #144]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003616:	4b23      	ldr	r3, [pc, #140]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d114      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003622:	f7fe fb27 	bl	8001c74 <HAL_GetTick>
 8003626:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003628:	e00a      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7fe fb23 	bl	8001c74 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f241 3288 	movw	r2, #5000	; 0x1388
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e02a      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ee      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003658:	d10d      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800366a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366e:	490d      	ldr	r1, [pc, #52]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003670:	4313      	orrs	r3, r2
 8003672:	608b      	str	r3, [r1, #8]
 8003674:	e005      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800367c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003680:	6093      	str	r3, [r2, #8]
 8003682:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003684:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368e:	4905      	ldr	r1, [pc, #20]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003690:	4313      	orrs	r3, r2
 8003692:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	42470068 	.word	0x42470068
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000
 80036ac:	42470e40 	.word	0x42470e40

080036b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e066      	b.n	8003794 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7f5b      	ldrb	r3, [r3, #29]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d105      	bne.n	80036dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fe f8b6 	bl	8001848 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	22ca      	movs	r2, #202	; 0xca
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2253      	movs	r2, #83	; 0x53
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa45 	bl	8003b82 <RTC_EnterInitMode>
 80036f8:	4603      	mov	r3, r0
 80036fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d12c      	bne.n	800375c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003714:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6899      	ldr	r1, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68d2      	ldr	r2, [r2, #12]
 800373c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6919      	ldr	r1, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	041a      	lsls	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fa4c 	bl	8003bf0 <RTC_ExitInitMode>
 8003758:	4603      	mov	r3, r0
 800375a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d113      	bne.n	800378a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	22ff      	movs	r2, #255	; 0xff
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	7f1b      	ldrb	r3, [r3, #28]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_RTC_SetTime+0x1c>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e087      	b.n	80038c8 <HAL_RTC_SetTime+0x12c>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2202      	movs	r2, #2
 80037c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d126      	bne.n	8003818 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2200      	movs	r2, #0
 80037dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fa29 	bl	8003c3a <RTC_ByteToBcd2>
 80037e8:	4603      	mov	r3, r0
 80037ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fa22 	bl	8003c3a <RTC_ByteToBcd2>
 80037f6:	4603      	mov	r3, r0
 80037f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80037fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	789b      	ldrb	r3, [r3, #2]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fa1a 	bl	8003c3a <RTC_ByteToBcd2>
 8003806:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003808:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	78db      	ldrb	r3, [r3, #3]
 8003810:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e018      	b.n	800384a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d102      	bne.n	800382c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2200      	movs	r2, #0
 800382a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003838:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800383e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	78db      	ldrb	r3, [r3, #3]
 8003844:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	22ca      	movs	r2, #202	; 0xca
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2253      	movs	r2, #83	; 0x53
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f991 	bl	8003b82 <RTC_EnterInitMode>
 8003860:	4603      	mov	r3, r0
 8003862:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d120      	bne.n	80038ac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003874:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003878:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003888:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6899      	ldr	r1, [r3, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	431a      	orrs	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f9a4 	bl	8003bf0 <RTC_ExitInitMode>
 80038a8:	4603      	mov	r3, r0
 80038aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80038ac:	7cfb      	ldrb	r3, [r7, #19]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	22ff      	movs	r2, #255	; 0xff
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	771a      	strb	r2, [r3, #28]

  return status;
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd90      	pop	{r4, r7, pc}

080038d0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003902:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003906:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	0c1b      	lsrs	r3, r3, #16
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003930:	b2da      	uxtb	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	0d9b      	lsrs	r3, r3, #22
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11a      	bne.n	8003982 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 f98f 	bl	8003c74 <RTC_Bcd2ToByte>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	785b      	ldrb	r3, [r3, #1]
 8003962:	4618      	mov	r0, r3
 8003964:	f000 f986 	bl	8003c74 <RTC_Bcd2ToByte>
 8003968:	4603      	mov	r3, r0
 800396a:	461a      	mov	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	789b      	ldrb	r3, [r3, #2]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 f97d 	bl	8003c74 <RTC_Bcd2ToByte>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	7f1b      	ldrb	r3, [r3, #28]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_RTC_SetDate+0x1c>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e071      	b.n	8003a8c <HAL_RTC_SetDate+0x100>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2202      	movs	r2, #2
 80039b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10e      	bne.n	80039d8 <HAL_RTC_SetDate+0x4c>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	785b      	ldrb	r3, [r3, #1]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	785b      	ldrb	r3, [r3, #1]
 80039ca:	f023 0310 	bic.w	r3, r3, #16
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	330a      	adds	r3, #10
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d11c      	bne.n	8003a18 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	78db      	ldrb	r3, [r3, #3]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f929 	bl	8003c3a <RTC_ByteToBcd2>
 80039e8:	4603      	mov	r3, r0
 80039ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f922 	bl	8003c3a <RTC_ByteToBcd2>
 80039f6:	4603      	mov	r3, r0
 80039f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	789b      	ldrb	r3, [r3, #2]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f91a 	bl	8003c3a <RTC_ByteToBcd2>
 8003a06:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a08:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e00e      	b.n	8003a36 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	78db      	ldrb	r3, [r3, #3]
 8003a1c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	785b      	ldrb	r3, [r3, #1]
 8003a22:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a24:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a2a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	22ca      	movs	r2, #202	; 0xca
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2253      	movs	r2, #83	; 0x53
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f89b 	bl	8003b82 <RTC_EnterInitMode>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10c      	bne.n	8003a70 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a64:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f8c2 	bl	8003bf0 <RTC_ExitInitMode>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003a70:	7cfb      	ldrb	r3, [r7, #19]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	22ff      	movs	r2, #255	; 0xff
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	771a      	strb	r2, [r3, #28]

  return status;
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd90      	pop	{r4, r7, pc}

08003a94 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003aae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	0b5b      	lsrs	r3, r3, #13
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11a      	bne.n	8003b28 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	78db      	ldrb	r3, [r3, #3]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f8bc 	bl	8003c74 <RTC_Bcd2ToByte>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	785b      	ldrb	r3, [r3, #1]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f8b3 	bl	8003c74 <RTC_Bcd2ToByte>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	789b      	ldrb	r3, [r3, #2]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f8aa 	bl	8003c74 <RTC_Bcd2ToByte>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b4c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b4e:	f7fe f891 	bl	8001c74 <HAL_GetTick>
 8003b52:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b54:	e009      	b.n	8003b6a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b56:	f7fe f88d 	bl	8001c74 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b64:	d901      	bls.n	8003b6a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e007      	b.n	8003b7a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ee      	beq.n	8003b56 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d122      	bne.n	8003be6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fe f860 	bl	8001c74 <HAL_GetTick>
 8003bb4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bb6:	e00c      	b.n	8003bd2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bb8:	f7fe f85c 	bl	8001c74 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bc6:	d904      	bls.n	8003bd2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <RTC_EnterInitMode+0x64>
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d1e8      	bne.n	8003bb8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c0a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff ff89 	bl	8003b32 <HAL_RTC_WaitForSynchro>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	4603      	mov	r3, r0
 8003c42:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003c48:	e005      	b.n	8003c56 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	3b0a      	subs	r3, #10
 8003c54:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	2b09      	cmp	r3, #9
 8003c5a:	d8f6      	bhi.n	8003c4a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	b2db      	uxtb	r3, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	0092      	lsls	r2, r2, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	b2db      	uxtb	r3, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e03f      	b.n	8003d3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd fde2 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	; 0x24
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fddf 	bl	80048b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b08a      	sub	sp, #40	; 0x28
 8003d4a:	af02      	add	r7, sp, #8
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	4613      	mov	r3, r2
 8003d54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d17c      	bne.n	8003e60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_UART_Transmit+0x2c>
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e075      	b.n	8003e62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Transmit+0x3e>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e06e      	b.n	8003e62 <HAL_UART_Transmit+0x11c>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2221      	movs	r2, #33	; 0x21
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d9a:	f7fd ff6b 	bl	8001c74 <HAL_GetTick>
 8003d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	88fa      	ldrh	r2, [r7, #6]
 8003da4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	88fa      	ldrh	r2, [r7, #6]
 8003daa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db4:	d108      	bne.n	8003dc8 <HAL_UART_Transmit+0x82>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d104      	bne.n	8003dc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	e003      	b.n	8003dd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003dd8:	e02a      	b.n	8003e30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	2180      	movs	r1, #128	; 0x80
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fb1f 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e036      	b.n	8003e62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10b      	bne.n	8003e12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	e007      	b.n	8003e22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	781a      	ldrb	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1cf      	bne.n	8003dda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2200      	movs	r2, #0
 8003e42:	2140      	movs	r1, #64	; 0x40
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 faef 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e006      	b.n	8003e62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	4613      	mov	r3, r2
 8003e76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d11d      	bne.n	8003ec0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_UART_Receive_IT+0x26>
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e016      	b.n	8003ec2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_UART_Receive_IT+0x38>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e00f      	b.n	8003ec2 <HAL_UART_Receive_IT+0x58>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fb24 	bl	8004504 <UART_Start_Receive_IT>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	e000      	b.n	8003ec2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b0ba      	sub	sp, #232	; 0xe8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10f      	bne.n	8003f32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_UART_IRQHandler+0x66>
 8003f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fc07 	bl	800473e <UART_Receive_IT>
      return;
 8003f30:	e256      	b.n	80043e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 80de 	beq.w	80040f8 <HAL_UART_IRQHandler+0x22c>
 8003f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80d1 	beq.w	80040f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_UART_IRQHandler+0xae>
 8003f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f043 0201 	orr.w	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <HAL_UART_IRQHandler+0xd2>
 8003f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f043 0202 	orr.w	r2, r3, #2
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_UART_IRQHandler+0xf6>
 8003faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f043 0204 	orr.w	r2, r3, #4
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d011      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x126>
 8003fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d105      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f043 0208 	orr.w	r2, r3, #8
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 81ed 	beq.w	80043d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_UART_IRQHandler+0x14e>
 8004008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fb92 	bl	800473e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <HAL_UART_IRQHandler+0x17a>
 800403e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d04f      	beq.n	80040e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fa9a 	bl	8004580 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d141      	bne.n	80040de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3314      	adds	r3, #20
 8004060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3314      	adds	r3, #20
 8004082:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004086:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800408a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800409e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1d9      	bne.n	800405a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d013      	beq.n	80040d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	4a7d      	ldr	r2, [pc, #500]	; (80042a8 <HAL_UART_IRQHandler+0x3dc>)
 80040b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fb8b 	bl	80027d6 <HAL_DMA_Abort_IT>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040d0:	4610      	mov	r0, r2
 80040d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d4:	e00e      	b.n	80040f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f990 	bl	80043fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	e00a      	b.n	80040f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f98c 	bl	80043fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e4:	e006      	b.n	80040f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f988 	bl	80043fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040f2:	e170      	b.n	80043d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	bf00      	nop
    return;
 80040f6:	e16e      	b.n	80043d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	f040 814a 	bne.w	8004396 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8143 	beq.w	8004396 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 813c 	beq.w	8004396 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	f040 80b4 	bne.w	80042ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004150:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8140 	beq.w	80043da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800415e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004162:	429a      	cmp	r2, r3
 8004164:	f080 8139 	bcs.w	80043da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800416e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417a:	f000 8088 	beq.w	800428e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1d9      	bne.n	800417e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3314      	adds	r3, #20
 80041d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e1      	bne.n	80041ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3314      	adds	r3, #20
 800420c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3314      	adds	r3, #20
 8004226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800422a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800422c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e3      	bne.n	8004206 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800425c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425e:	f023 0310 	bic.w	r3, r3, #16
 8004262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004270:	65ba      	str	r2, [r7, #88]	; 0x58
 8004272:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800427e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e3      	bne.n	800424c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	4618      	mov	r0, r3
 800428a:	f7fe fa34 	bl	80026f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004296:	b29b      	uxth	r3, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	b29b      	uxth	r3, r3
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8b6 	bl	8004410 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042a4:	e099      	b.n	80043da <HAL_UART_IRQHandler+0x50e>
 80042a6:	bf00      	nop
 80042a8:	08004647 	.word	0x08004647
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 808b 	beq.w	80043de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80042c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8086 	beq.w	80043de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042f6:	647a      	str	r2, [r7, #68]	; 0x44
 80042f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e3      	bne.n	80042d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	623b      	str	r3, [r7, #32]
   return(result);
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3314      	adds	r3, #20
 800432a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800432e:	633a      	str	r2, [r7, #48]	; 0x30
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e3      	bne.n	800430a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0310 	bic.w	r3, r3, #16
 8004366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004374:	61fa      	str	r2, [r7, #28]
 8004376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	617b      	str	r3, [r7, #20]
   return(result);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e3      	bne.n	8004350 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f83e 	bl	8004410 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004394:	e023      	b.n	80043de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <HAL_UART_IRQHandler+0x4ea>
 80043a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f95d 	bl	800466e <UART_Transmit_IT>
    return;
 80043b4:	e014      	b.n	80043e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00e      	beq.n	80043e0 <HAL_UART_IRQHandler+0x514>
 80043c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f99d 	bl	800470e <UART_EndTransmit_IT>
    return;
 80043d4:	e004      	b.n	80043e0 <HAL_UART_IRQHandler+0x514>
    return;
 80043d6:	bf00      	nop
 80043d8:	e002      	b.n	80043e0 <HAL_UART_IRQHandler+0x514>
      return;
 80043da:	bf00      	nop
 80043dc:	e000      	b.n	80043e0 <HAL_UART_IRQHandler+0x514>
      return;
 80043de:	bf00      	nop
  }
}
 80043e0:	37e8      	adds	r7, #232	; 0xe8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop

080043e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b090      	sub	sp, #64	; 0x40
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004438:	e050      	b.n	80044dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d04c      	beq.n	80044dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <UART_WaitOnFlagUntilTimeout+0x30>
 8004448:	f7fd fc14 	bl	8001c74 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004454:	429a      	cmp	r2, r3
 8004456:	d241      	bcs.n	80044dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	330c      	adds	r3, #12
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004478:	637a      	str	r2, [r7, #52]	; 0x34
 800447a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800447e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e5      	bne.n	8004458 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3314      	adds	r3, #20
 8004492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	613b      	str	r3, [r7, #16]
   return(result);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ac:	623a      	str	r2, [r7, #32]
 80044ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	69f9      	ldr	r1, [r7, #28]
 80044b2:	6a3a      	ldr	r2, [r7, #32]
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e00f      	b.n	80044fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4013      	ands	r3, r2
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d09f      	beq.n	800443a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3740      	adds	r7, #64	; 0x40
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	88fa      	ldrh	r2, [r7, #6]
 8004522:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2222      	movs	r2, #34	; 0x22
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004550:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0201 	orr.w	r2, r2, #1
 8004560:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0220 	orr.w	r2, r2, #32
 8004570:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004580:	b480      	push	{r7}
 8004582:	b095      	sub	sp, #84	; 0x54
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800459e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a8:	643a      	str	r2, [r7, #64]	; 0x40
 80045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e5      	bne.n	8004588 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3314      	adds	r3, #20
 80045c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3314      	adds	r3, #20
 80045da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e5      	bne.n	80045bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d119      	bne.n	800462c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	60bb      	str	r3, [r7, #8]
   return(result);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f023 0310 	bic.w	r3, r3, #16
 800460e:	647b      	str	r3, [r7, #68]	; 0x44
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004618:	61ba      	str	r2, [r7, #24]
 800461a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6979      	ldr	r1, [r7, #20]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	613b      	str	r3, [r7, #16]
   return(result);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e5      	bne.n	80045f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
}
 800463a:	bf00      	nop
 800463c:	3754      	adds	r7, #84	; 0x54
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7ff fecb 	bl	80043fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b21      	cmp	r3, #33	; 0x21
 8004680:	d13e      	bne.n	8004700 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468a:	d114      	bne.n	80046b6 <UART_Transmit_IT+0x48>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d110      	bne.n	80046b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	1c9a      	adds	r2, r3, #2
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	621a      	str	r2, [r3, #32]
 80046b4:	e008      	b.n	80046c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	1c59      	adds	r1, r3, #1
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6211      	str	r1, [r2, #32]
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4619      	mov	r1, r3
 80046d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10f      	bne.n	80046fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004724:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff fe5a 	bl	80043e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b08c      	sub	sp, #48	; 0x30
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b22      	cmp	r3, #34	; 0x22
 8004750:	f040 80ab 	bne.w	80048aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475c:	d117      	bne.n	800478e <UART_Receive_IT+0x50>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d113      	bne.n	800478e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004766:	2300      	movs	r3, #0
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	b29b      	uxth	r3, r3
 8004778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477c:	b29a      	uxth	r2, r3
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	629a      	str	r2, [r3, #40]	; 0x28
 800478c:	e026      	b.n	80047dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a0:	d007      	beq.n	80047b2 <UART_Receive_IT+0x74>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <UART_Receive_IT+0x82>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	701a      	strb	r2, [r3, #0]
 80047be:	e008      	b.n	80047d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	4619      	mov	r1, r3
 80047ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d15a      	bne.n	80048a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0220 	bic.w	r2, r2, #32
 80047fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800480e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695a      	ldr	r2, [r3, #20]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	2b01      	cmp	r3, #1
 800482e:	d135      	bne.n	800489c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	613b      	str	r3, [r7, #16]
   return(result);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f023 0310 	bic.w	r3, r3, #16
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004856:	623a      	str	r2, [r7, #32]
 8004858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	69f9      	ldr	r1, [r7, #28]
 800485c:	6a3a      	ldr	r2, [r7, #32]
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	61bb      	str	r3, [r7, #24]
   return(result);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e5      	bne.n	8004836 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b10      	cmp	r3, #16
 8004876:	d10a      	bne.n	800488e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004892:	4619      	mov	r1, r3
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff fdbb 	bl	8004410 <HAL_UARTEx_RxEventCallback>
 800489a:	e002      	b.n	80048a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7fc fb51 	bl	8000f44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e002      	b.n	80048ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e000      	b.n	80048ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
  }
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3730      	adds	r7, #48	; 0x30
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b8:	b0c0      	sub	sp, #256	; 0x100
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	68d9      	ldr	r1, [r3, #12]
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	ea40 0301 	orr.w	r3, r0, r1
 80048dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800490c:	f021 010c 	bic.w	r1, r1, #12
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800491a:	430b      	orrs	r3, r1
 800491c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	6999      	ldr	r1, [r3, #24]
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	ea40 0301 	orr.w	r3, r0, r1
 800493a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	4b8f      	ldr	r3, [pc, #572]	; (8004b80 <UART_SetConfig+0x2cc>)
 8004944:	429a      	cmp	r2, r3
 8004946:	d005      	beq.n	8004954 <UART_SetConfig+0xa0>
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b8d      	ldr	r3, [pc, #564]	; (8004b84 <UART_SetConfig+0x2d0>)
 8004950:	429a      	cmp	r2, r3
 8004952:	d104      	bne.n	800495e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004954:	f7fe fdb6 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8004958:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800495c:	e003      	b.n	8004966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800495e:	f7fe fd9d 	bl	800349c <HAL_RCC_GetPCLK1Freq>
 8004962:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004970:	f040 810c 	bne.w	8004b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004978:	2200      	movs	r2, #0
 800497a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800497e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004986:	4622      	mov	r2, r4
 8004988:	462b      	mov	r3, r5
 800498a:	1891      	adds	r1, r2, r2
 800498c:	65b9      	str	r1, [r7, #88]	; 0x58
 800498e:	415b      	adcs	r3, r3
 8004990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004996:	4621      	mov	r1, r4
 8004998:	eb12 0801 	adds.w	r8, r2, r1
 800499c:	4629      	mov	r1, r5
 800499e:	eb43 0901 	adc.w	r9, r3, r1
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049b6:	4690      	mov	r8, r2
 80049b8:	4699      	mov	r9, r3
 80049ba:	4623      	mov	r3, r4
 80049bc:	eb18 0303 	adds.w	r3, r8, r3
 80049c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049c4:	462b      	mov	r3, r5
 80049c6:	eb49 0303 	adc.w	r3, r9, r3
 80049ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049e2:	460b      	mov	r3, r1
 80049e4:	18db      	adds	r3, r3, r3
 80049e6:	653b      	str	r3, [r7, #80]	; 0x50
 80049e8:	4613      	mov	r3, r2
 80049ea:	eb42 0303 	adc.w	r3, r2, r3
 80049ee:	657b      	str	r3, [r7, #84]	; 0x54
 80049f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049f8:	f7fc f926 	bl	8000c48 <__aeabi_uldivmod>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4b61      	ldr	r3, [pc, #388]	; (8004b88 <UART_SetConfig+0x2d4>)
 8004a02:	fba3 2302 	umull	r2, r3, r3, r2
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	011c      	lsls	r4, r3, #4
 8004a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	1891      	adds	r1, r2, r2
 8004a22:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a24:	415b      	adcs	r3, r3
 8004a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a32:	4649      	mov	r1, r9
 8004a34:	eb43 0b01 	adc.w	fp, r3, r1
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a4c:	4692      	mov	sl, r2
 8004a4e:	469b      	mov	fp, r3
 8004a50:	4643      	mov	r3, r8
 8004a52:	eb1a 0303 	adds.w	r3, sl, r3
 8004a56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	18db      	adds	r3, r3, r3
 8004a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a7e:	4613      	mov	r3, r2
 8004a80:	eb42 0303 	adc.w	r3, r2, r3
 8004a84:	647b      	str	r3, [r7, #68]	; 0x44
 8004a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a8e:	f7fc f8db 	bl	8000c48 <__aeabi_uldivmod>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4611      	mov	r1, r2
 8004a98:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <UART_SetConfig+0x2d4>)
 8004a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	2264      	movs	r2, #100	; 0x64
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	1acb      	subs	r3, r1, r3
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aae:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <UART_SetConfig+0x2d4>)
 8004ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004abc:	441c      	add	r4, r3
 8004abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	1891      	adds	r1, r2, r2
 8004ad6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ad8:	415b      	adcs	r3, r3
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	1851      	adds	r1, r2, r1
 8004ae4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	414b      	adcs	r3, r1
 8004aea:	637b      	str	r3, [r7, #52]	; 0x34
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004af8:	4659      	mov	r1, fp
 8004afa:	00cb      	lsls	r3, r1, #3
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b02:	4651      	mov	r1, sl
 8004b04:	00ca      	lsls	r2, r1, #3
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b14:	464b      	mov	r3, r9
 8004b16:	460a      	mov	r2, r1
 8004b18:	eb42 0303 	adc.w	r3, r2, r3
 8004b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b34:	460b      	mov	r3, r1
 8004b36:	18db      	adds	r3, r3, r3
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	eb42 0303 	adc.w	r3, r2, r3
 8004b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b4a:	f7fc f87d 	bl	8000c48 <__aeabi_uldivmod>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <UART_SetConfig+0x2d4>)
 8004b54:	fba3 1302 	umull	r1, r3, r3, r2
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	2164      	movs	r1, #100	; 0x64
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	3332      	adds	r3, #50	; 0x32
 8004b66:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <UART_SetConfig+0x2d4>)
 8004b68:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	f003 0207 	and.w	r2, r3, #7
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4422      	add	r2, r4
 8004b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b7c:	e106      	b.n	8004d8c <UART_SetConfig+0x4d8>
 8004b7e:	bf00      	nop
 8004b80:	40011000 	.word	0x40011000
 8004b84:	40011400 	.word	0x40011400
 8004b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b9e:	4642      	mov	r2, r8
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	1891      	adds	r1, r2, r2
 8004ba4:	6239      	str	r1, [r7, #32]
 8004ba6:	415b      	adcs	r3, r3
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8004baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bae:	4641      	mov	r1, r8
 8004bb0:	1854      	adds	r4, r2, r1
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	eb43 0501 	adc.w	r5, r3, r1
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	00eb      	lsls	r3, r5, #3
 8004bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bc6:	00e2      	lsls	r2, r4, #3
 8004bc8:	4614      	mov	r4, r2
 8004bca:	461d      	mov	r5, r3
 8004bcc:	4643      	mov	r3, r8
 8004bce:	18e3      	adds	r3, r4, r3
 8004bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bd4:	464b      	mov	r3, r9
 8004bd6:	eb45 0303 	adc.w	r3, r5, r3
 8004bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	008b      	lsls	r3, r1, #2
 8004bfe:	4621      	mov	r1, r4
 8004c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c04:	4621      	mov	r1, r4
 8004c06:	008a      	lsls	r2, r1, #2
 8004c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c0c:	f7fc f81c 	bl	8000c48 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4b60      	ldr	r3, [pc, #384]	; (8004d98 <UART_SetConfig+0x4e4>)
 8004c16:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	011c      	lsls	r4, r3, #4
 8004c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	61b9      	str	r1, [r7, #24]
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c40:	4641      	mov	r1, r8
 8004c42:	1851      	adds	r1, r2, r1
 8004c44:	6139      	str	r1, [r7, #16]
 8004c46:	4649      	mov	r1, r9
 8004c48:	414b      	adcs	r3, r1
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c58:	4659      	mov	r1, fp
 8004c5a:	00cb      	lsls	r3, r1, #3
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c62:	4651      	mov	r1, sl
 8004c64:	00ca      	lsls	r2, r1, #3
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c74:	464b      	mov	r3, r9
 8004c76:	460a      	mov	r2, r1
 8004c78:	eb42 0303 	adc.w	r3, r2, r3
 8004c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c98:	4649      	mov	r1, r9
 8004c9a:	008b      	lsls	r3, r1, #2
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca2:	4641      	mov	r1, r8
 8004ca4:	008a      	lsls	r2, r1, #2
 8004ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004caa:	f7fb ffcd 	bl	8000c48 <__aeabi_uldivmod>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4b38      	ldr	r3, [pc, #224]	; (8004d98 <UART_SetConfig+0x4e4>)
 8004cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	2264      	movs	r2, #100	; 0x64
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
 8004cc2:	1acb      	subs	r3, r1, r3
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	3332      	adds	r3, #50	; 0x32
 8004cc8:	4a33      	ldr	r2, [pc, #204]	; (8004d98 <UART_SetConfig+0x4e4>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cd4:	441c      	add	r4, r3
 8004cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cda:	2200      	movs	r2, #0
 8004cdc:	673b      	str	r3, [r7, #112]	; 0x70
 8004cde:	677a      	str	r2, [r7, #116]	; 0x74
 8004ce0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	1891      	adds	r1, r2, r2
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	415b      	adcs	r3, r3
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	1851      	adds	r1, r2, r1
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	414b      	adcs	r3, r1
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	00cb      	lsls	r3, r1, #3
 8004d10:	4651      	mov	r1, sl
 8004d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d16:	4651      	mov	r1, sl
 8004d18:	00ca      	lsls	r2, r1, #3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4642      	mov	r2, r8
 8004d22:	189b      	adds	r3, r3, r2
 8004d24:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d26:	464b      	mov	r3, r9
 8004d28:	460a      	mov	r2, r1
 8004d2a:	eb42 0303 	adc.w	r3, r2, r3
 8004d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	663b      	str	r3, [r7, #96]	; 0x60
 8004d3a:	667a      	str	r2, [r7, #100]	; 0x64
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d48:	4649      	mov	r1, r9
 8004d4a:	008b      	lsls	r3, r1, #2
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d52:	4641      	mov	r1, r8
 8004d54:	008a      	lsls	r2, r1, #2
 8004d56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d5a:	f7fb ff75 	bl	8000c48 <__aeabi_uldivmod>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <UART_SetConfig+0x4e4>)
 8004d64:	fba3 1302 	umull	r1, r3, r3, r2
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	2164      	movs	r1, #100	; 0x64
 8004d6c:	fb01 f303 	mul.w	r3, r1, r3
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	3332      	adds	r3, #50	; 0x32
 8004d76:	4a08      	ldr	r2, [pc, #32]	; (8004d98 <UART_SetConfig+0x4e4>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	f003 020f 	and.w	r2, r3, #15
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4422      	add	r2, r4
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d92:	46bd      	mov	sp, r7
 8004d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d98:	51eb851f 	.word	0x51eb851f

08004d9c <atoi>:
 8004d9c:	220a      	movs	r2, #10
 8004d9e:	2100      	movs	r1, #0
 8004da0:	f000 b882 	b.w	8004ea8 <strtol>

08004da4 <_strtol_l.constprop.0>:
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004daa:	d001      	beq.n	8004db0 <_strtol_l.constprop.0+0xc>
 8004dac:	2b24      	cmp	r3, #36	; 0x24
 8004dae:	d906      	bls.n	8004dbe <_strtol_l.constprop.0+0x1a>
 8004db0:	f000 fe6e 	bl	8005a90 <__errno>
 8004db4:	2316      	movs	r3, #22
 8004db6:	6003      	str	r3, [r0, #0]
 8004db8:	2000      	movs	r0, #0
 8004dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004ea4 <_strtol_l.constprop.0+0x100>
 8004dc2:	460d      	mov	r5, r1
 8004dc4:	462e      	mov	r6, r5
 8004dc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004dce:	f017 0708 	ands.w	r7, r7, #8
 8004dd2:	d1f7      	bne.n	8004dc4 <_strtol_l.constprop.0+0x20>
 8004dd4:	2c2d      	cmp	r4, #45	; 0x2d
 8004dd6:	d132      	bne.n	8004e3e <_strtol_l.constprop.0+0x9a>
 8004dd8:	782c      	ldrb	r4, [r5, #0]
 8004dda:	2701      	movs	r7, #1
 8004ddc:	1cb5      	adds	r5, r6, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d05b      	beq.n	8004e9a <_strtol_l.constprop.0+0xf6>
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d109      	bne.n	8004dfa <_strtol_l.constprop.0+0x56>
 8004de6:	2c30      	cmp	r4, #48	; 0x30
 8004de8:	d107      	bne.n	8004dfa <_strtol_l.constprop.0+0x56>
 8004dea:	782c      	ldrb	r4, [r5, #0]
 8004dec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004df0:	2c58      	cmp	r4, #88	; 0x58
 8004df2:	d14d      	bne.n	8004e90 <_strtol_l.constprop.0+0xec>
 8004df4:	786c      	ldrb	r4, [r5, #1]
 8004df6:	2310      	movs	r3, #16
 8004df8:	3502      	adds	r5, #2
 8004dfa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004dfe:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e02:	f04f 0e00 	mov.w	lr, #0
 8004e06:	fbb8 f9f3 	udiv	r9, r8, r3
 8004e0a:	4676      	mov	r6, lr
 8004e0c:	fb03 8a19 	mls	sl, r3, r9, r8
 8004e10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004e14:	f1bc 0f09 	cmp.w	ip, #9
 8004e18:	d816      	bhi.n	8004e48 <_strtol_l.constprop.0+0xa4>
 8004e1a:	4664      	mov	r4, ip
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	dd24      	ble.n	8004e6a <_strtol_l.constprop.0+0xc6>
 8004e20:	f1be 3fff 	cmp.w	lr, #4294967295
 8004e24:	d008      	beq.n	8004e38 <_strtol_l.constprop.0+0x94>
 8004e26:	45b1      	cmp	r9, r6
 8004e28:	d31c      	bcc.n	8004e64 <_strtol_l.constprop.0+0xc0>
 8004e2a:	d101      	bne.n	8004e30 <_strtol_l.constprop.0+0x8c>
 8004e2c:	45a2      	cmp	sl, r4
 8004e2e:	db19      	blt.n	8004e64 <_strtol_l.constprop.0+0xc0>
 8004e30:	fb06 4603 	mla	r6, r6, r3, r4
 8004e34:	f04f 0e01 	mov.w	lr, #1
 8004e38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e3c:	e7e8      	b.n	8004e10 <_strtol_l.constprop.0+0x6c>
 8004e3e:	2c2b      	cmp	r4, #43	; 0x2b
 8004e40:	bf04      	itt	eq
 8004e42:	782c      	ldrbeq	r4, [r5, #0]
 8004e44:	1cb5      	addeq	r5, r6, #2
 8004e46:	e7ca      	b.n	8004dde <_strtol_l.constprop.0+0x3a>
 8004e48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004e4c:	f1bc 0f19 	cmp.w	ip, #25
 8004e50:	d801      	bhi.n	8004e56 <_strtol_l.constprop.0+0xb2>
 8004e52:	3c37      	subs	r4, #55	; 0x37
 8004e54:	e7e2      	b.n	8004e1c <_strtol_l.constprop.0+0x78>
 8004e56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004e5a:	f1bc 0f19 	cmp.w	ip, #25
 8004e5e:	d804      	bhi.n	8004e6a <_strtol_l.constprop.0+0xc6>
 8004e60:	3c57      	subs	r4, #87	; 0x57
 8004e62:	e7db      	b.n	8004e1c <_strtol_l.constprop.0+0x78>
 8004e64:	f04f 3eff 	mov.w	lr, #4294967295
 8004e68:	e7e6      	b.n	8004e38 <_strtol_l.constprop.0+0x94>
 8004e6a:	f1be 3fff 	cmp.w	lr, #4294967295
 8004e6e:	d105      	bne.n	8004e7c <_strtol_l.constprop.0+0xd8>
 8004e70:	2322      	movs	r3, #34	; 0x22
 8004e72:	6003      	str	r3, [r0, #0]
 8004e74:	4646      	mov	r6, r8
 8004e76:	b942      	cbnz	r2, 8004e8a <_strtol_l.constprop.0+0xe6>
 8004e78:	4630      	mov	r0, r6
 8004e7a:	e79e      	b.n	8004dba <_strtol_l.constprop.0+0x16>
 8004e7c:	b107      	cbz	r7, 8004e80 <_strtol_l.constprop.0+0xdc>
 8004e7e:	4276      	negs	r6, r6
 8004e80:	2a00      	cmp	r2, #0
 8004e82:	d0f9      	beq.n	8004e78 <_strtol_l.constprop.0+0xd4>
 8004e84:	f1be 0f00 	cmp.w	lr, #0
 8004e88:	d000      	beq.n	8004e8c <_strtol_l.constprop.0+0xe8>
 8004e8a:	1e69      	subs	r1, r5, #1
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	e7f3      	b.n	8004e78 <_strtol_l.constprop.0+0xd4>
 8004e90:	2430      	movs	r4, #48	; 0x30
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1b1      	bne.n	8004dfa <_strtol_l.constprop.0+0x56>
 8004e96:	2308      	movs	r3, #8
 8004e98:	e7af      	b.n	8004dfa <_strtol_l.constprop.0+0x56>
 8004e9a:	2c30      	cmp	r4, #48	; 0x30
 8004e9c:	d0a5      	beq.n	8004dea <_strtol_l.constprop.0+0x46>
 8004e9e:	230a      	movs	r3, #10
 8004ea0:	e7ab      	b.n	8004dfa <_strtol_l.constprop.0+0x56>
 8004ea2:	bf00      	nop
 8004ea4:	080086c9 	.word	0x080086c9

08004ea8 <strtol>:
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	460a      	mov	r2, r1
 8004eac:	4601      	mov	r1, r0
 8004eae:	4802      	ldr	r0, [pc, #8]	; (8004eb8 <strtol+0x10>)
 8004eb0:	6800      	ldr	r0, [r0, #0]
 8004eb2:	f7ff bf77 	b.w	8004da4 <_strtol_l.constprop.0>
 8004eb6:	bf00      	nop
 8004eb8:	20000064 	.word	0x20000064

08004ebc <__cvt>:
 8004ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	ec55 4b10 	vmov	r4, r5, d0
 8004ec4:	2d00      	cmp	r5, #0
 8004ec6:	460e      	mov	r6, r1
 8004ec8:	4619      	mov	r1, r3
 8004eca:	462b      	mov	r3, r5
 8004ecc:	bfbb      	ittet	lt
 8004ece:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ed2:	461d      	movlt	r5, r3
 8004ed4:	2300      	movge	r3, #0
 8004ed6:	232d      	movlt	r3, #45	; 0x2d
 8004ed8:	700b      	strb	r3, [r1, #0]
 8004eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004edc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ee0:	4691      	mov	r9, r2
 8004ee2:	f023 0820 	bic.w	r8, r3, #32
 8004ee6:	bfbc      	itt	lt
 8004ee8:	4622      	movlt	r2, r4
 8004eea:	4614      	movlt	r4, r2
 8004eec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ef0:	d005      	beq.n	8004efe <__cvt+0x42>
 8004ef2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ef6:	d100      	bne.n	8004efa <__cvt+0x3e>
 8004ef8:	3601      	adds	r6, #1
 8004efa:	2102      	movs	r1, #2
 8004efc:	e000      	b.n	8004f00 <__cvt+0x44>
 8004efe:	2103      	movs	r1, #3
 8004f00:	ab03      	add	r3, sp, #12
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	ab02      	add	r3, sp, #8
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	ec45 4b10 	vmov	d0, r4, r5
 8004f0c:	4653      	mov	r3, sl
 8004f0e:	4632      	mov	r2, r6
 8004f10:	f000 fe76 	bl	8005c00 <_dtoa_r>
 8004f14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f18:	4607      	mov	r7, r0
 8004f1a:	d102      	bne.n	8004f22 <__cvt+0x66>
 8004f1c:	f019 0f01 	tst.w	r9, #1
 8004f20:	d022      	beq.n	8004f68 <__cvt+0xac>
 8004f22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f26:	eb07 0906 	add.w	r9, r7, r6
 8004f2a:	d110      	bne.n	8004f4e <__cvt+0x92>
 8004f2c:	783b      	ldrb	r3, [r7, #0]
 8004f2e:	2b30      	cmp	r3, #48	; 0x30
 8004f30:	d10a      	bne.n	8004f48 <__cvt+0x8c>
 8004f32:	2200      	movs	r2, #0
 8004f34:	2300      	movs	r3, #0
 8004f36:	4620      	mov	r0, r4
 8004f38:	4629      	mov	r1, r5
 8004f3a:	f7fb fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f3e:	b918      	cbnz	r0, 8004f48 <__cvt+0x8c>
 8004f40:	f1c6 0601 	rsb	r6, r6, #1
 8004f44:	f8ca 6000 	str.w	r6, [sl]
 8004f48:	f8da 3000 	ldr.w	r3, [sl]
 8004f4c:	4499      	add	r9, r3
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2300      	movs	r3, #0
 8004f52:	4620      	mov	r0, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	f7fb fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f5a:	b108      	cbz	r0, 8004f60 <__cvt+0xa4>
 8004f5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f60:	2230      	movs	r2, #48	; 0x30
 8004f62:	9b03      	ldr	r3, [sp, #12]
 8004f64:	454b      	cmp	r3, r9
 8004f66:	d307      	bcc.n	8004f78 <__cvt+0xbc>
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f6c:	1bdb      	subs	r3, r3, r7
 8004f6e:	4638      	mov	r0, r7
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	b004      	add	sp, #16
 8004f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f78:	1c59      	adds	r1, r3, #1
 8004f7a:	9103      	str	r1, [sp, #12]
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e7f0      	b.n	8004f62 <__cvt+0xa6>

08004f80 <__exponent>:
 8004f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f82:	4603      	mov	r3, r0
 8004f84:	2900      	cmp	r1, #0
 8004f86:	bfb8      	it	lt
 8004f88:	4249      	neglt	r1, r1
 8004f8a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f8e:	bfb4      	ite	lt
 8004f90:	222d      	movlt	r2, #45	; 0x2d
 8004f92:	222b      	movge	r2, #43	; 0x2b
 8004f94:	2909      	cmp	r1, #9
 8004f96:	7042      	strb	r2, [r0, #1]
 8004f98:	dd2a      	ble.n	8004ff0 <__exponent+0x70>
 8004f9a:	f10d 0207 	add.w	r2, sp, #7
 8004f9e:	4617      	mov	r7, r2
 8004fa0:	260a      	movs	r6, #10
 8004fa2:	4694      	mov	ip, r2
 8004fa4:	fb91 f5f6 	sdiv	r5, r1, r6
 8004fa8:	fb06 1415 	mls	r4, r6, r5, r1
 8004fac:	3430      	adds	r4, #48	; 0x30
 8004fae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	2c63      	cmp	r4, #99	; 0x63
 8004fb6:	f102 32ff 	add.w	r2, r2, #4294967295
 8004fba:	4629      	mov	r1, r5
 8004fbc:	dcf1      	bgt.n	8004fa2 <__exponent+0x22>
 8004fbe:	3130      	adds	r1, #48	; 0x30
 8004fc0:	f1ac 0402 	sub.w	r4, ip, #2
 8004fc4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004fc8:	1c41      	adds	r1, r0, #1
 8004fca:	4622      	mov	r2, r4
 8004fcc:	42ba      	cmp	r2, r7
 8004fce:	d30a      	bcc.n	8004fe6 <__exponent+0x66>
 8004fd0:	f10d 0209 	add.w	r2, sp, #9
 8004fd4:	eba2 020c 	sub.w	r2, r2, ip
 8004fd8:	42bc      	cmp	r4, r7
 8004fda:	bf88      	it	hi
 8004fdc:	2200      	movhi	r2, #0
 8004fde:	4413      	add	r3, r2
 8004fe0:	1a18      	subs	r0, r3, r0
 8004fe2:	b003      	add	sp, #12
 8004fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004fea:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004fee:	e7ed      	b.n	8004fcc <__exponent+0x4c>
 8004ff0:	2330      	movs	r3, #48	; 0x30
 8004ff2:	3130      	adds	r1, #48	; 0x30
 8004ff4:	7083      	strb	r3, [r0, #2]
 8004ff6:	70c1      	strb	r1, [r0, #3]
 8004ff8:	1d03      	adds	r3, r0, #4
 8004ffa:	e7f1      	b.n	8004fe0 <__exponent+0x60>

08004ffc <_printf_float>:
 8004ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	ed2d 8b02 	vpush	{d8}
 8005004:	b08d      	sub	sp, #52	; 0x34
 8005006:	460c      	mov	r4, r1
 8005008:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800500c:	4616      	mov	r6, r2
 800500e:	461f      	mov	r7, r3
 8005010:	4605      	mov	r5, r0
 8005012:	f000 fcf3 	bl	80059fc <_localeconv_r>
 8005016:	f8d0 a000 	ldr.w	sl, [r0]
 800501a:	4650      	mov	r0, sl
 800501c:	f7fb f928 	bl	8000270 <strlen>
 8005020:	2300      	movs	r3, #0
 8005022:	930a      	str	r3, [sp, #40]	; 0x28
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	9305      	str	r3, [sp, #20]
 8005028:	f8d8 3000 	ldr.w	r3, [r8]
 800502c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005030:	3307      	adds	r3, #7
 8005032:	f023 0307 	bic.w	r3, r3, #7
 8005036:	f103 0208 	add.w	r2, r3, #8
 800503a:	f8c8 2000 	str.w	r2, [r8]
 800503e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005042:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005046:	9307      	str	r3, [sp, #28]
 8005048:	f8cd 8018 	str.w	r8, [sp, #24]
 800504c:	ee08 0a10 	vmov	s16, r0
 8005050:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005058:	4b9e      	ldr	r3, [pc, #632]	; (80052d4 <_printf_float+0x2d8>)
 800505a:	f04f 32ff 	mov.w	r2, #4294967295
 800505e:	f7fb fd65 	bl	8000b2c <__aeabi_dcmpun>
 8005062:	bb88      	cbnz	r0, 80050c8 <_printf_float+0xcc>
 8005064:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005068:	4b9a      	ldr	r3, [pc, #616]	; (80052d4 <_printf_float+0x2d8>)
 800506a:	f04f 32ff 	mov.w	r2, #4294967295
 800506e:	f7fb fd3f 	bl	8000af0 <__aeabi_dcmple>
 8005072:	bb48      	cbnz	r0, 80050c8 <_printf_float+0xcc>
 8005074:	2200      	movs	r2, #0
 8005076:	2300      	movs	r3, #0
 8005078:	4640      	mov	r0, r8
 800507a:	4649      	mov	r1, r9
 800507c:	f7fb fd2e 	bl	8000adc <__aeabi_dcmplt>
 8005080:	b110      	cbz	r0, 8005088 <_printf_float+0x8c>
 8005082:	232d      	movs	r3, #45	; 0x2d
 8005084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005088:	4a93      	ldr	r2, [pc, #588]	; (80052d8 <_printf_float+0x2dc>)
 800508a:	4b94      	ldr	r3, [pc, #592]	; (80052dc <_printf_float+0x2e0>)
 800508c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005090:	bf94      	ite	ls
 8005092:	4690      	movls	r8, r2
 8005094:	4698      	movhi	r8, r3
 8005096:	2303      	movs	r3, #3
 8005098:	6123      	str	r3, [r4, #16]
 800509a:	9b05      	ldr	r3, [sp, #20]
 800509c:	f023 0304 	bic.w	r3, r3, #4
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	f04f 0900 	mov.w	r9, #0
 80050a6:	9700      	str	r7, [sp, #0]
 80050a8:	4633      	mov	r3, r6
 80050aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80050ac:	4621      	mov	r1, r4
 80050ae:	4628      	mov	r0, r5
 80050b0:	f000 f9da 	bl	8005468 <_printf_common>
 80050b4:	3001      	adds	r0, #1
 80050b6:	f040 8090 	bne.w	80051da <_printf_float+0x1de>
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	b00d      	add	sp, #52	; 0x34
 80050c0:	ecbd 8b02 	vpop	{d8}
 80050c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c8:	4642      	mov	r2, r8
 80050ca:	464b      	mov	r3, r9
 80050cc:	4640      	mov	r0, r8
 80050ce:	4649      	mov	r1, r9
 80050d0:	f7fb fd2c 	bl	8000b2c <__aeabi_dcmpun>
 80050d4:	b140      	cbz	r0, 80050e8 <_printf_float+0xec>
 80050d6:	464b      	mov	r3, r9
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bfbc      	itt	lt
 80050dc:	232d      	movlt	r3, #45	; 0x2d
 80050de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050e2:	4a7f      	ldr	r2, [pc, #508]	; (80052e0 <_printf_float+0x2e4>)
 80050e4:	4b7f      	ldr	r3, [pc, #508]	; (80052e4 <_printf_float+0x2e8>)
 80050e6:	e7d1      	b.n	800508c <_printf_float+0x90>
 80050e8:	6863      	ldr	r3, [r4, #4]
 80050ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80050ee:	9206      	str	r2, [sp, #24]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	d13f      	bne.n	8005174 <_printf_float+0x178>
 80050f4:	2306      	movs	r3, #6
 80050f6:	6063      	str	r3, [r4, #4]
 80050f8:	9b05      	ldr	r3, [sp, #20]
 80050fa:	6861      	ldr	r1, [r4, #4]
 80050fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005100:	2300      	movs	r3, #0
 8005102:	9303      	str	r3, [sp, #12]
 8005104:	ab0a      	add	r3, sp, #40	; 0x28
 8005106:	e9cd b301 	strd	fp, r3, [sp, #4]
 800510a:	ab09      	add	r3, sp, #36	; 0x24
 800510c:	ec49 8b10 	vmov	d0, r8, r9
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	6022      	str	r2, [r4, #0]
 8005114:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005118:	4628      	mov	r0, r5
 800511a:	f7ff fecf 	bl	8004ebc <__cvt>
 800511e:	9b06      	ldr	r3, [sp, #24]
 8005120:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005122:	2b47      	cmp	r3, #71	; 0x47
 8005124:	4680      	mov	r8, r0
 8005126:	d108      	bne.n	800513a <_printf_float+0x13e>
 8005128:	1cc8      	adds	r0, r1, #3
 800512a:	db02      	blt.n	8005132 <_printf_float+0x136>
 800512c:	6863      	ldr	r3, [r4, #4]
 800512e:	4299      	cmp	r1, r3
 8005130:	dd41      	ble.n	80051b6 <_printf_float+0x1ba>
 8005132:	f1ab 0302 	sub.w	r3, fp, #2
 8005136:	fa5f fb83 	uxtb.w	fp, r3
 800513a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800513e:	d820      	bhi.n	8005182 <_printf_float+0x186>
 8005140:	3901      	subs	r1, #1
 8005142:	465a      	mov	r2, fp
 8005144:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005148:	9109      	str	r1, [sp, #36]	; 0x24
 800514a:	f7ff ff19 	bl	8004f80 <__exponent>
 800514e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005150:	1813      	adds	r3, r2, r0
 8005152:	2a01      	cmp	r2, #1
 8005154:	4681      	mov	r9, r0
 8005156:	6123      	str	r3, [r4, #16]
 8005158:	dc02      	bgt.n	8005160 <_printf_float+0x164>
 800515a:	6822      	ldr	r2, [r4, #0]
 800515c:	07d2      	lsls	r2, r2, #31
 800515e:	d501      	bpl.n	8005164 <_printf_float+0x168>
 8005160:	3301      	adds	r3, #1
 8005162:	6123      	str	r3, [r4, #16]
 8005164:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005168:	2b00      	cmp	r3, #0
 800516a:	d09c      	beq.n	80050a6 <_printf_float+0xaa>
 800516c:	232d      	movs	r3, #45	; 0x2d
 800516e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005172:	e798      	b.n	80050a6 <_printf_float+0xaa>
 8005174:	9a06      	ldr	r2, [sp, #24]
 8005176:	2a47      	cmp	r2, #71	; 0x47
 8005178:	d1be      	bne.n	80050f8 <_printf_float+0xfc>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1bc      	bne.n	80050f8 <_printf_float+0xfc>
 800517e:	2301      	movs	r3, #1
 8005180:	e7b9      	b.n	80050f6 <_printf_float+0xfa>
 8005182:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005186:	d118      	bne.n	80051ba <_printf_float+0x1be>
 8005188:	2900      	cmp	r1, #0
 800518a:	6863      	ldr	r3, [r4, #4]
 800518c:	dd0b      	ble.n	80051a6 <_printf_float+0x1aa>
 800518e:	6121      	str	r1, [r4, #16]
 8005190:	b913      	cbnz	r3, 8005198 <_printf_float+0x19c>
 8005192:	6822      	ldr	r2, [r4, #0]
 8005194:	07d0      	lsls	r0, r2, #31
 8005196:	d502      	bpl.n	800519e <_printf_float+0x1a2>
 8005198:	3301      	adds	r3, #1
 800519a:	440b      	add	r3, r1
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	65a1      	str	r1, [r4, #88]	; 0x58
 80051a0:	f04f 0900 	mov.w	r9, #0
 80051a4:	e7de      	b.n	8005164 <_printf_float+0x168>
 80051a6:	b913      	cbnz	r3, 80051ae <_printf_float+0x1b2>
 80051a8:	6822      	ldr	r2, [r4, #0]
 80051aa:	07d2      	lsls	r2, r2, #31
 80051ac:	d501      	bpl.n	80051b2 <_printf_float+0x1b6>
 80051ae:	3302      	adds	r3, #2
 80051b0:	e7f4      	b.n	800519c <_printf_float+0x1a0>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e7f2      	b.n	800519c <_printf_float+0x1a0>
 80051b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051bc:	4299      	cmp	r1, r3
 80051be:	db05      	blt.n	80051cc <_printf_float+0x1d0>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	6121      	str	r1, [r4, #16]
 80051c4:	07d8      	lsls	r0, r3, #31
 80051c6:	d5ea      	bpl.n	800519e <_printf_float+0x1a2>
 80051c8:	1c4b      	adds	r3, r1, #1
 80051ca:	e7e7      	b.n	800519c <_printf_float+0x1a0>
 80051cc:	2900      	cmp	r1, #0
 80051ce:	bfd4      	ite	le
 80051d0:	f1c1 0202 	rsble	r2, r1, #2
 80051d4:	2201      	movgt	r2, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	e7e0      	b.n	800519c <_printf_float+0x1a0>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	055a      	lsls	r2, r3, #21
 80051de:	d407      	bmi.n	80051f0 <_printf_float+0x1f4>
 80051e0:	6923      	ldr	r3, [r4, #16]
 80051e2:	4642      	mov	r2, r8
 80051e4:	4631      	mov	r1, r6
 80051e6:	4628      	mov	r0, r5
 80051e8:	47b8      	blx	r7
 80051ea:	3001      	adds	r0, #1
 80051ec:	d12c      	bne.n	8005248 <_printf_float+0x24c>
 80051ee:	e764      	b.n	80050ba <_printf_float+0xbe>
 80051f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051f4:	f240 80e0 	bls.w	80053b8 <_printf_float+0x3bc>
 80051f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051fc:	2200      	movs	r2, #0
 80051fe:	2300      	movs	r3, #0
 8005200:	f7fb fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8005204:	2800      	cmp	r0, #0
 8005206:	d034      	beq.n	8005272 <_printf_float+0x276>
 8005208:	4a37      	ldr	r2, [pc, #220]	; (80052e8 <_printf_float+0x2ec>)
 800520a:	2301      	movs	r3, #1
 800520c:	4631      	mov	r1, r6
 800520e:	4628      	mov	r0, r5
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	f43f af51 	beq.w	80050ba <_printf_float+0xbe>
 8005218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800521c:	429a      	cmp	r2, r3
 800521e:	db02      	blt.n	8005226 <_printf_float+0x22a>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	07d8      	lsls	r0, r3, #31
 8005224:	d510      	bpl.n	8005248 <_printf_float+0x24c>
 8005226:	ee18 3a10 	vmov	r3, s16
 800522a:	4652      	mov	r2, sl
 800522c:	4631      	mov	r1, r6
 800522e:	4628      	mov	r0, r5
 8005230:	47b8      	blx	r7
 8005232:	3001      	adds	r0, #1
 8005234:	f43f af41 	beq.w	80050ba <_printf_float+0xbe>
 8005238:	f04f 0800 	mov.w	r8, #0
 800523c:	f104 091a 	add.w	r9, r4, #26
 8005240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005242:	3b01      	subs	r3, #1
 8005244:	4543      	cmp	r3, r8
 8005246:	dc09      	bgt.n	800525c <_printf_float+0x260>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	079b      	lsls	r3, r3, #30
 800524c:	f100 8107 	bmi.w	800545e <_printf_float+0x462>
 8005250:	68e0      	ldr	r0, [r4, #12]
 8005252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005254:	4298      	cmp	r0, r3
 8005256:	bfb8      	it	lt
 8005258:	4618      	movlt	r0, r3
 800525a:	e730      	b.n	80050be <_printf_float+0xc2>
 800525c:	2301      	movs	r3, #1
 800525e:	464a      	mov	r2, r9
 8005260:	4631      	mov	r1, r6
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	f43f af27 	beq.w	80050ba <_printf_float+0xbe>
 800526c:	f108 0801 	add.w	r8, r8, #1
 8005270:	e7e6      	b.n	8005240 <_printf_float+0x244>
 8005272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	dc39      	bgt.n	80052ec <_printf_float+0x2f0>
 8005278:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <_printf_float+0x2ec>)
 800527a:	2301      	movs	r3, #1
 800527c:	4631      	mov	r1, r6
 800527e:	4628      	mov	r0, r5
 8005280:	47b8      	blx	r7
 8005282:	3001      	adds	r0, #1
 8005284:	f43f af19 	beq.w	80050ba <_printf_float+0xbe>
 8005288:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800528c:	4313      	orrs	r3, r2
 800528e:	d102      	bne.n	8005296 <_printf_float+0x29a>
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	07d9      	lsls	r1, r3, #31
 8005294:	d5d8      	bpl.n	8005248 <_printf_float+0x24c>
 8005296:	ee18 3a10 	vmov	r3, s16
 800529a:	4652      	mov	r2, sl
 800529c:	4631      	mov	r1, r6
 800529e:	4628      	mov	r0, r5
 80052a0:	47b8      	blx	r7
 80052a2:	3001      	adds	r0, #1
 80052a4:	f43f af09 	beq.w	80050ba <_printf_float+0xbe>
 80052a8:	f04f 0900 	mov.w	r9, #0
 80052ac:	f104 0a1a 	add.w	sl, r4, #26
 80052b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b2:	425b      	negs	r3, r3
 80052b4:	454b      	cmp	r3, r9
 80052b6:	dc01      	bgt.n	80052bc <_printf_float+0x2c0>
 80052b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ba:	e792      	b.n	80051e2 <_printf_float+0x1e6>
 80052bc:	2301      	movs	r3, #1
 80052be:	4652      	mov	r2, sl
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f aef7 	beq.w	80050ba <_printf_float+0xbe>
 80052cc:	f109 0901 	add.w	r9, r9, #1
 80052d0:	e7ee      	b.n	80052b0 <_printf_float+0x2b4>
 80052d2:	bf00      	nop
 80052d4:	7fefffff 	.word	0x7fefffff
 80052d8:	080087c9 	.word	0x080087c9
 80052dc:	080087cd 	.word	0x080087cd
 80052e0:	080087d1 	.word	0x080087d1
 80052e4:	080087d5 	.word	0x080087d5
 80052e8:	080087d9 	.word	0x080087d9
 80052ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052f0:	429a      	cmp	r2, r3
 80052f2:	bfa8      	it	ge
 80052f4:	461a      	movge	r2, r3
 80052f6:	2a00      	cmp	r2, #0
 80052f8:	4691      	mov	r9, r2
 80052fa:	dc37      	bgt.n	800536c <_printf_float+0x370>
 80052fc:	f04f 0b00 	mov.w	fp, #0
 8005300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005304:	f104 021a 	add.w	r2, r4, #26
 8005308:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800530a:	9305      	str	r3, [sp, #20]
 800530c:	eba3 0309 	sub.w	r3, r3, r9
 8005310:	455b      	cmp	r3, fp
 8005312:	dc33      	bgt.n	800537c <_printf_float+0x380>
 8005314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005318:	429a      	cmp	r2, r3
 800531a:	db3b      	blt.n	8005394 <_printf_float+0x398>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	07da      	lsls	r2, r3, #31
 8005320:	d438      	bmi.n	8005394 <_printf_float+0x398>
 8005322:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005326:	eba2 0903 	sub.w	r9, r2, r3
 800532a:	9b05      	ldr	r3, [sp, #20]
 800532c:	1ad2      	subs	r2, r2, r3
 800532e:	4591      	cmp	r9, r2
 8005330:	bfa8      	it	ge
 8005332:	4691      	movge	r9, r2
 8005334:	f1b9 0f00 	cmp.w	r9, #0
 8005338:	dc35      	bgt.n	80053a6 <_printf_float+0x3aa>
 800533a:	f04f 0800 	mov.w	r8, #0
 800533e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005342:	f104 0a1a 	add.w	sl, r4, #26
 8005346:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	eba3 0309 	sub.w	r3, r3, r9
 8005350:	4543      	cmp	r3, r8
 8005352:	f77f af79 	ble.w	8005248 <_printf_float+0x24c>
 8005356:	2301      	movs	r3, #1
 8005358:	4652      	mov	r2, sl
 800535a:	4631      	mov	r1, r6
 800535c:	4628      	mov	r0, r5
 800535e:	47b8      	blx	r7
 8005360:	3001      	adds	r0, #1
 8005362:	f43f aeaa 	beq.w	80050ba <_printf_float+0xbe>
 8005366:	f108 0801 	add.w	r8, r8, #1
 800536a:	e7ec      	b.n	8005346 <_printf_float+0x34a>
 800536c:	4613      	mov	r3, r2
 800536e:	4631      	mov	r1, r6
 8005370:	4642      	mov	r2, r8
 8005372:	4628      	mov	r0, r5
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	d1c0      	bne.n	80052fc <_printf_float+0x300>
 800537a:	e69e      	b.n	80050ba <_printf_float+0xbe>
 800537c:	2301      	movs	r3, #1
 800537e:	4631      	mov	r1, r6
 8005380:	4628      	mov	r0, r5
 8005382:	9205      	str	r2, [sp, #20]
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	f43f ae97 	beq.w	80050ba <_printf_float+0xbe>
 800538c:	9a05      	ldr	r2, [sp, #20]
 800538e:	f10b 0b01 	add.w	fp, fp, #1
 8005392:	e7b9      	b.n	8005308 <_printf_float+0x30c>
 8005394:	ee18 3a10 	vmov	r3, s16
 8005398:	4652      	mov	r2, sl
 800539a:	4631      	mov	r1, r6
 800539c:	4628      	mov	r0, r5
 800539e:	47b8      	blx	r7
 80053a0:	3001      	adds	r0, #1
 80053a2:	d1be      	bne.n	8005322 <_printf_float+0x326>
 80053a4:	e689      	b.n	80050ba <_printf_float+0xbe>
 80053a6:	9a05      	ldr	r2, [sp, #20]
 80053a8:	464b      	mov	r3, r9
 80053aa:	4442      	add	r2, r8
 80053ac:	4631      	mov	r1, r6
 80053ae:	4628      	mov	r0, r5
 80053b0:	47b8      	blx	r7
 80053b2:	3001      	adds	r0, #1
 80053b4:	d1c1      	bne.n	800533a <_printf_float+0x33e>
 80053b6:	e680      	b.n	80050ba <_printf_float+0xbe>
 80053b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ba:	2a01      	cmp	r2, #1
 80053bc:	dc01      	bgt.n	80053c2 <_printf_float+0x3c6>
 80053be:	07db      	lsls	r3, r3, #31
 80053c0:	d53a      	bpl.n	8005438 <_printf_float+0x43c>
 80053c2:	2301      	movs	r3, #1
 80053c4:	4642      	mov	r2, r8
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	47b8      	blx	r7
 80053cc:	3001      	adds	r0, #1
 80053ce:	f43f ae74 	beq.w	80050ba <_printf_float+0xbe>
 80053d2:	ee18 3a10 	vmov	r3, s16
 80053d6:	4652      	mov	r2, sl
 80053d8:	4631      	mov	r1, r6
 80053da:	4628      	mov	r0, r5
 80053dc:	47b8      	blx	r7
 80053de:	3001      	adds	r0, #1
 80053e0:	f43f ae6b 	beq.w	80050ba <_printf_float+0xbe>
 80053e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053e8:	2200      	movs	r2, #0
 80053ea:	2300      	movs	r3, #0
 80053ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80053f0:	f7fb fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80053f4:	b9d8      	cbnz	r0, 800542e <_printf_float+0x432>
 80053f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80053fa:	f108 0201 	add.w	r2, r8, #1
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	47b8      	blx	r7
 8005404:	3001      	adds	r0, #1
 8005406:	d10e      	bne.n	8005426 <_printf_float+0x42a>
 8005408:	e657      	b.n	80050ba <_printf_float+0xbe>
 800540a:	2301      	movs	r3, #1
 800540c:	4652      	mov	r2, sl
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	f43f ae50 	beq.w	80050ba <_printf_float+0xbe>
 800541a:	f108 0801 	add.w	r8, r8, #1
 800541e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005420:	3b01      	subs	r3, #1
 8005422:	4543      	cmp	r3, r8
 8005424:	dcf1      	bgt.n	800540a <_printf_float+0x40e>
 8005426:	464b      	mov	r3, r9
 8005428:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800542c:	e6da      	b.n	80051e4 <_printf_float+0x1e8>
 800542e:	f04f 0800 	mov.w	r8, #0
 8005432:	f104 0a1a 	add.w	sl, r4, #26
 8005436:	e7f2      	b.n	800541e <_printf_float+0x422>
 8005438:	2301      	movs	r3, #1
 800543a:	4642      	mov	r2, r8
 800543c:	e7df      	b.n	80053fe <_printf_float+0x402>
 800543e:	2301      	movs	r3, #1
 8005440:	464a      	mov	r2, r9
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	f43f ae36 	beq.w	80050ba <_printf_float+0xbe>
 800544e:	f108 0801 	add.w	r8, r8, #1
 8005452:	68e3      	ldr	r3, [r4, #12]
 8005454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005456:	1a5b      	subs	r3, r3, r1
 8005458:	4543      	cmp	r3, r8
 800545a:	dcf0      	bgt.n	800543e <_printf_float+0x442>
 800545c:	e6f8      	b.n	8005250 <_printf_float+0x254>
 800545e:	f04f 0800 	mov.w	r8, #0
 8005462:	f104 0919 	add.w	r9, r4, #25
 8005466:	e7f4      	b.n	8005452 <_printf_float+0x456>

08005468 <_printf_common>:
 8005468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800546c:	4616      	mov	r6, r2
 800546e:	4699      	mov	r9, r3
 8005470:	688a      	ldr	r2, [r1, #8]
 8005472:	690b      	ldr	r3, [r1, #16]
 8005474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005478:	4293      	cmp	r3, r2
 800547a:	bfb8      	it	lt
 800547c:	4613      	movlt	r3, r2
 800547e:	6033      	str	r3, [r6, #0]
 8005480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005484:	4607      	mov	r7, r0
 8005486:	460c      	mov	r4, r1
 8005488:	b10a      	cbz	r2, 800548e <_printf_common+0x26>
 800548a:	3301      	adds	r3, #1
 800548c:	6033      	str	r3, [r6, #0]
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	0699      	lsls	r1, r3, #26
 8005492:	bf42      	ittt	mi
 8005494:	6833      	ldrmi	r3, [r6, #0]
 8005496:	3302      	addmi	r3, #2
 8005498:	6033      	strmi	r3, [r6, #0]
 800549a:	6825      	ldr	r5, [r4, #0]
 800549c:	f015 0506 	ands.w	r5, r5, #6
 80054a0:	d106      	bne.n	80054b0 <_printf_common+0x48>
 80054a2:	f104 0a19 	add.w	sl, r4, #25
 80054a6:	68e3      	ldr	r3, [r4, #12]
 80054a8:	6832      	ldr	r2, [r6, #0]
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	42ab      	cmp	r3, r5
 80054ae:	dc26      	bgt.n	80054fe <_printf_common+0x96>
 80054b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054b4:	1e13      	subs	r3, r2, #0
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	bf18      	it	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	0692      	lsls	r2, r2, #26
 80054be:	d42b      	bmi.n	8005518 <_printf_common+0xb0>
 80054c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054c4:	4649      	mov	r1, r9
 80054c6:	4638      	mov	r0, r7
 80054c8:	47c0      	blx	r8
 80054ca:	3001      	adds	r0, #1
 80054cc:	d01e      	beq.n	800550c <_printf_common+0xa4>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	6922      	ldr	r2, [r4, #16]
 80054d2:	f003 0306 	and.w	r3, r3, #6
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	bf02      	ittt	eq
 80054da:	68e5      	ldreq	r5, [r4, #12]
 80054dc:	6833      	ldreq	r3, [r6, #0]
 80054de:	1aed      	subeq	r5, r5, r3
 80054e0:	68a3      	ldr	r3, [r4, #8]
 80054e2:	bf0c      	ite	eq
 80054e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054e8:	2500      	movne	r5, #0
 80054ea:	4293      	cmp	r3, r2
 80054ec:	bfc4      	itt	gt
 80054ee:	1a9b      	subgt	r3, r3, r2
 80054f0:	18ed      	addgt	r5, r5, r3
 80054f2:	2600      	movs	r6, #0
 80054f4:	341a      	adds	r4, #26
 80054f6:	42b5      	cmp	r5, r6
 80054f8:	d11a      	bne.n	8005530 <_printf_common+0xc8>
 80054fa:	2000      	movs	r0, #0
 80054fc:	e008      	b.n	8005510 <_printf_common+0xa8>
 80054fe:	2301      	movs	r3, #1
 8005500:	4652      	mov	r2, sl
 8005502:	4649      	mov	r1, r9
 8005504:	4638      	mov	r0, r7
 8005506:	47c0      	blx	r8
 8005508:	3001      	adds	r0, #1
 800550a:	d103      	bne.n	8005514 <_printf_common+0xac>
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005514:	3501      	adds	r5, #1
 8005516:	e7c6      	b.n	80054a6 <_printf_common+0x3e>
 8005518:	18e1      	adds	r1, r4, r3
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	2030      	movs	r0, #48	; 0x30
 800551e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005522:	4422      	add	r2, r4
 8005524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800552c:	3302      	adds	r3, #2
 800552e:	e7c7      	b.n	80054c0 <_printf_common+0x58>
 8005530:	2301      	movs	r3, #1
 8005532:	4622      	mov	r2, r4
 8005534:	4649      	mov	r1, r9
 8005536:	4638      	mov	r0, r7
 8005538:	47c0      	blx	r8
 800553a:	3001      	adds	r0, #1
 800553c:	d0e6      	beq.n	800550c <_printf_common+0xa4>
 800553e:	3601      	adds	r6, #1
 8005540:	e7d9      	b.n	80054f6 <_printf_common+0x8e>
	...

08005544 <_printf_i>:
 8005544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005548:	7e0f      	ldrb	r7, [r1, #24]
 800554a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800554c:	2f78      	cmp	r7, #120	; 0x78
 800554e:	4691      	mov	r9, r2
 8005550:	4680      	mov	r8, r0
 8005552:	460c      	mov	r4, r1
 8005554:	469a      	mov	sl, r3
 8005556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800555a:	d807      	bhi.n	800556c <_printf_i+0x28>
 800555c:	2f62      	cmp	r7, #98	; 0x62
 800555e:	d80a      	bhi.n	8005576 <_printf_i+0x32>
 8005560:	2f00      	cmp	r7, #0
 8005562:	f000 80d4 	beq.w	800570e <_printf_i+0x1ca>
 8005566:	2f58      	cmp	r7, #88	; 0x58
 8005568:	f000 80c0 	beq.w	80056ec <_printf_i+0x1a8>
 800556c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005574:	e03a      	b.n	80055ec <_printf_i+0xa8>
 8005576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800557a:	2b15      	cmp	r3, #21
 800557c:	d8f6      	bhi.n	800556c <_printf_i+0x28>
 800557e:	a101      	add	r1, pc, #4	; (adr r1, 8005584 <_printf_i+0x40>)
 8005580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005584:	080055dd 	.word	0x080055dd
 8005588:	080055f1 	.word	0x080055f1
 800558c:	0800556d 	.word	0x0800556d
 8005590:	0800556d 	.word	0x0800556d
 8005594:	0800556d 	.word	0x0800556d
 8005598:	0800556d 	.word	0x0800556d
 800559c:	080055f1 	.word	0x080055f1
 80055a0:	0800556d 	.word	0x0800556d
 80055a4:	0800556d 	.word	0x0800556d
 80055a8:	0800556d 	.word	0x0800556d
 80055ac:	0800556d 	.word	0x0800556d
 80055b0:	080056f5 	.word	0x080056f5
 80055b4:	0800561d 	.word	0x0800561d
 80055b8:	080056af 	.word	0x080056af
 80055bc:	0800556d 	.word	0x0800556d
 80055c0:	0800556d 	.word	0x0800556d
 80055c4:	08005717 	.word	0x08005717
 80055c8:	0800556d 	.word	0x0800556d
 80055cc:	0800561d 	.word	0x0800561d
 80055d0:	0800556d 	.word	0x0800556d
 80055d4:	0800556d 	.word	0x0800556d
 80055d8:	080056b7 	.word	0x080056b7
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	1d1a      	adds	r2, r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	602a      	str	r2, [r5, #0]
 80055e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055ec:	2301      	movs	r3, #1
 80055ee:	e09f      	b.n	8005730 <_printf_i+0x1ec>
 80055f0:	6820      	ldr	r0, [r4, #0]
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	0607      	lsls	r7, r0, #24
 80055f6:	f103 0104 	add.w	r1, r3, #4
 80055fa:	6029      	str	r1, [r5, #0]
 80055fc:	d501      	bpl.n	8005602 <_printf_i+0xbe>
 80055fe:	681e      	ldr	r6, [r3, #0]
 8005600:	e003      	b.n	800560a <_printf_i+0xc6>
 8005602:	0646      	lsls	r6, r0, #25
 8005604:	d5fb      	bpl.n	80055fe <_printf_i+0xba>
 8005606:	f9b3 6000 	ldrsh.w	r6, [r3]
 800560a:	2e00      	cmp	r6, #0
 800560c:	da03      	bge.n	8005616 <_printf_i+0xd2>
 800560e:	232d      	movs	r3, #45	; 0x2d
 8005610:	4276      	negs	r6, r6
 8005612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005616:	485a      	ldr	r0, [pc, #360]	; (8005780 <_printf_i+0x23c>)
 8005618:	230a      	movs	r3, #10
 800561a:	e012      	b.n	8005642 <_printf_i+0xfe>
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	6820      	ldr	r0, [r4, #0]
 8005620:	1d19      	adds	r1, r3, #4
 8005622:	6029      	str	r1, [r5, #0]
 8005624:	0605      	lsls	r5, r0, #24
 8005626:	d501      	bpl.n	800562c <_printf_i+0xe8>
 8005628:	681e      	ldr	r6, [r3, #0]
 800562a:	e002      	b.n	8005632 <_printf_i+0xee>
 800562c:	0641      	lsls	r1, r0, #25
 800562e:	d5fb      	bpl.n	8005628 <_printf_i+0xe4>
 8005630:	881e      	ldrh	r6, [r3, #0]
 8005632:	4853      	ldr	r0, [pc, #332]	; (8005780 <_printf_i+0x23c>)
 8005634:	2f6f      	cmp	r7, #111	; 0x6f
 8005636:	bf0c      	ite	eq
 8005638:	2308      	moveq	r3, #8
 800563a:	230a      	movne	r3, #10
 800563c:	2100      	movs	r1, #0
 800563e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005642:	6865      	ldr	r5, [r4, #4]
 8005644:	60a5      	str	r5, [r4, #8]
 8005646:	2d00      	cmp	r5, #0
 8005648:	bfa2      	ittt	ge
 800564a:	6821      	ldrge	r1, [r4, #0]
 800564c:	f021 0104 	bicge.w	r1, r1, #4
 8005650:	6021      	strge	r1, [r4, #0]
 8005652:	b90e      	cbnz	r6, 8005658 <_printf_i+0x114>
 8005654:	2d00      	cmp	r5, #0
 8005656:	d04b      	beq.n	80056f0 <_printf_i+0x1ac>
 8005658:	4615      	mov	r5, r2
 800565a:	fbb6 f1f3 	udiv	r1, r6, r3
 800565e:	fb03 6711 	mls	r7, r3, r1, r6
 8005662:	5dc7      	ldrb	r7, [r0, r7]
 8005664:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005668:	4637      	mov	r7, r6
 800566a:	42bb      	cmp	r3, r7
 800566c:	460e      	mov	r6, r1
 800566e:	d9f4      	bls.n	800565a <_printf_i+0x116>
 8005670:	2b08      	cmp	r3, #8
 8005672:	d10b      	bne.n	800568c <_printf_i+0x148>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	07de      	lsls	r6, r3, #31
 8005678:	d508      	bpl.n	800568c <_printf_i+0x148>
 800567a:	6923      	ldr	r3, [r4, #16]
 800567c:	6861      	ldr	r1, [r4, #4]
 800567e:	4299      	cmp	r1, r3
 8005680:	bfde      	ittt	le
 8005682:	2330      	movle	r3, #48	; 0x30
 8005684:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005688:	f105 35ff 	addle.w	r5, r5, #4294967295
 800568c:	1b52      	subs	r2, r2, r5
 800568e:	6122      	str	r2, [r4, #16]
 8005690:	f8cd a000 	str.w	sl, [sp]
 8005694:	464b      	mov	r3, r9
 8005696:	aa03      	add	r2, sp, #12
 8005698:	4621      	mov	r1, r4
 800569a:	4640      	mov	r0, r8
 800569c:	f7ff fee4 	bl	8005468 <_printf_common>
 80056a0:	3001      	adds	r0, #1
 80056a2:	d14a      	bne.n	800573a <_printf_i+0x1f6>
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	b004      	add	sp, #16
 80056aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	f043 0320 	orr.w	r3, r3, #32
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	4833      	ldr	r0, [pc, #204]	; (8005784 <_printf_i+0x240>)
 80056b8:	2778      	movs	r7, #120	; 0x78
 80056ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	6829      	ldr	r1, [r5, #0]
 80056c2:	061f      	lsls	r7, r3, #24
 80056c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80056c8:	d402      	bmi.n	80056d0 <_printf_i+0x18c>
 80056ca:	065f      	lsls	r7, r3, #25
 80056cc:	bf48      	it	mi
 80056ce:	b2b6      	uxthmi	r6, r6
 80056d0:	07df      	lsls	r7, r3, #31
 80056d2:	bf48      	it	mi
 80056d4:	f043 0320 	orrmi.w	r3, r3, #32
 80056d8:	6029      	str	r1, [r5, #0]
 80056da:	bf48      	it	mi
 80056dc:	6023      	strmi	r3, [r4, #0]
 80056de:	b91e      	cbnz	r6, 80056e8 <_printf_i+0x1a4>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	f023 0320 	bic.w	r3, r3, #32
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	2310      	movs	r3, #16
 80056ea:	e7a7      	b.n	800563c <_printf_i+0xf8>
 80056ec:	4824      	ldr	r0, [pc, #144]	; (8005780 <_printf_i+0x23c>)
 80056ee:	e7e4      	b.n	80056ba <_printf_i+0x176>
 80056f0:	4615      	mov	r5, r2
 80056f2:	e7bd      	b.n	8005670 <_printf_i+0x12c>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	6826      	ldr	r6, [r4, #0]
 80056f8:	6961      	ldr	r1, [r4, #20]
 80056fa:	1d18      	adds	r0, r3, #4
 80056fc:	6028      	str	r0, [r5, #0]
 80056fe:	0635      	lsls	r5, r6, #24
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	d501      	bpl.n	8005708 <_printf_i+0x1c4>
 8005704:	6019      	str	r1, [r3, #0]
 8005706:	e002      	b.n	800570e <_printf_i+0x1ca>
 8005708:	0670      	lsls	r0, r6, #25
 800570a:	d5fb      	bpl.n	8005704 <_printf_i+0x1c0>
 800570c:	8019      	strh	r1, [r3, #0]
 800570e:	2300      	movs	r3, #0
 8005710:	6123      	str	r3, [r4, #16]
 8005712:	4615      	mov	r5, r2
 8005714:	e7bc      	b.n	8005690 <_printf_i+0x14c>
 8005716:	682b      	ldr	r3, [r5, #0]
 8005718:	1d1a      	adds	r2, r3, #4
 800571a:	602a      	str	r2, [r5, #0]
 800571c:	681d      	ldr	r5, [r3, #0]
 800571e:	6862      	ldr	r2, [r4, #4]
 8005720:	2100      	movs	r1, #0
 8005722:	4628      	mov	r0, r5
 8005724:	f7fa fd54 	bl	80001d0 <memchr>
 8005728:	b108      	cbz	r0, 800572e <_printf_i+0x1ea>
 800572a:	1b40      	subs	r0, r0, r5
 800572c:	6060      	str	r0, [r4, #4]
 800572e:	6863      	ldr	r3, [r4, #4]
 8005730:	6123      	str	r3, [r4, #16]
 8005732:	2300      	movs	r3, #0
 8005734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005738:	e7aa      	b.n	8005690 <_printf_i+0x14c>
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	462a      	mov	r2, r5
 800573e:	4649      	mov	r1, r9
 8005740:	4640      	mov	r0, r8
 8005742:	47d0      	blx	sl
 8005744:	3001      	adds	r0, #1
 8005746:	d0ad      	beq.n	80056a4 <_printf_i+0x160>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	079b      	lsls	r3, r3, #30
 800574c:	d413      	bmi.n	8005776 <_printf_i+0x232>
 800574e:	68e0      	ldr	r0, [r4, #12]
 8005750:	9b03      	ldr	r3, [sp, #12]
 8005752:	4298      	cmp	r0, r3
 8005754:	bfb8      	it	lt
 8005756:	4618      	movlt	r0, r3
 8005758:	e7a6      	b.n	80056a8 <_printf_i+0x164>
 800575a:	2301      	movs	r3, #1
 800575c:	4632      	mov	r2, r6
 800575e:	4649      	mov	r1, r9
 8005760:	4640      	mov	r0, r8
 8005762:	47d0      	blx	sl
 8005764:	3001      	adds	r0, #1
 8005766:	d09d      	beq.n	80056a4 <_printf_i+0x160>
 8005768:	3501      	adds	r5, #1
 800576a:	68e3      	ldr	r3, [r4, #12]
 800576c:	9903      	ldr	r1, [sp, #12]
 800576e:	1a5b      	subs	r3, r3, r1
 8005770:	42ab      	cmp	r3, r5
 8005772:	dcf2      	bgt.n	800575a <_printf_i+0x216>
 8005774:	e7eb      	b.n	800574e <_printf_i+0x20a>
 8005776:	2500      	movs	r5, #0
 8005778:	f104 0619 	add.w	r6, r4, #25
 800577c:	e7f5      	b.n	800576a <_printf_i+0x226>
 800577e:	bf00      	nop
 8005780:	080087db 	.word	0x080087db
 8005784:	080087ec 	.word	0x080087ec

08005788 <std>:
 8005788:	2300      	movs	r3, #0
 800578a:	b510      	push	{r4, lr}
 800578c:	4604      	mov	r4, r0
 800578e:	e9c0 3300 	strd	r3, r3, [r0]
 8005792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005796:	6083      	str	r3, [r0, #8]
 8005798:	8181      	strh	r1, [r0, #12]
 800579a:	6643      	str	r3, [r0, #100]	; 0x64
 800579c:	81c2      	strh	r2, [r0, #14]
 800579e:	6183      	str	r3, [r0, #24]
 80057a0:	4619      	mov	r1, r3
 80057a2:	2208      	movs	r2, #8
 80057a4:	305c      	adds	r0, #92	; 0x5c
 80057a6:	f000 f914 	bl	80059d2 <memset>
 80057aa:	4b0d      	ldr	r3, [pc, #52]	; (80057e0 <std+0x58>)
 80057ac:	6263      	str	r3, [r4, #36]	; 0x24
 80057ae:	4b0d      	ldr	r3, [pc, #52]	; (80057e4 <std+0x5c>)
 80057b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80057b2:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <std+0x60>)
 80057b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057b6:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <std+0x64>)
 80057b8:	6323      	str	r3, [r4, #48]	; 0x30
 80057ba:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <std+0x68>)
 80057bc:	6224      	str	r4, [r4, #32]
 80057be:	429c      	cmp	r4, r3
 80057c0:	d006      	beq.n	80057d0 <std+0x48>
 80057c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80057c6:	4294      	cmp	r4, r2
 80057c8:	d002      	beq.n	80057d0 <std+0x48>
 80057ca:	33d0      	adds	r3, #208	; 0xd0
 80057cc:	429c      	cmp	r4, r3
 80057ce:	d105      	bne.n	80057dc <std+0x54>
 80057d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057d8:	f000 b984 	b.w	8005ae4 <__retarget_lock_init_recursive>
 80057dc:	bd10      	pop	{r4, pc}
 80057de:	bf00      	nop
 80057e0:	0800594d 	.word	0x0800594d
 80057e4:	0800596f 	.word	0x0800596f
 80057e8:	080059a7 	.word	0x080059a7
 80057ec:	080059cb 	.word	0x080059cb
 80057f0:	20000364 	.word	0x20000364

080057f4 <stdio_exit_handler>:
 80057f4:	4a02      	ldr	r2, [pc, #8]	; (8005800 <stdio_exit_handler+0xc>)
 80057f6:	4903      	ldr	r1, [pc, #12]	; (8005804 <stdio_exit_handler+0x10>)
 80057f8:	4803      	ldr	r0, [pc, #12]	; (8005808 <stdio_exit_handler+0x14>)
 80057fa:	f000 b869 	b.w	80058d0 <_fwalk_sglue>
 80057fe:	bf00      	nop
 8005800:	2000000c 	.word	0x2000000c
 8005804:	08007499 	.word	0x08007499
 8005808:	20000018 	.word	0x20000018

0800580c <cleanup_stdio>:
 800580c:	6841      	ldr	r1, [r0, #4]
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <cleanup_stdio+0x34>)
 8005810:	4299      	cmp	r1, r3
 8005812:	b510      	push	{r4, lr}
 8005814:	4604      	mov	r4, r0
 8005816:	d001      	beq.n	800581c <cleanup_stdio+0x10>
 8005818:	f001 fe3e 	bl	8007498 <_fflush_r>
 800581c:	68a1      	ldr	r1, [r4, #8]
 800581e:	4b09      	ldr	r3, [pc, #36]	; (8005844 <cleanup_stdio+0x38>)
 8005820:	4299      	cmp	r1, r3
 8005822:	d002      	beq.n	800582a <cleanup_stdio+0x1e>
 8005824:	4620      	mov	r0, r4
 8005826:	f001 fe37 	bl	8007498 <_fflush_r>
 800582a:	68e1      	ldr	r1, [r4, #12]
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <cleanup_stdio+0x3c>)
 800582e:	4299      	cmp	r1, r3
 8005830:	d004      	beq.n	800583c <cleanup_stdio+0x30>
 8005832:	4620      	mov	r0, r4
 8005834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005838:	f001 be2e 	b.w	8007498 <_fflush_r>
 800583c:	bd10      	pop	{r4, pc}
 800583e:	bf00      	nop
 8005840:	20000364 	.word	0x20000364
 8005844:	200003cc 	.word	0x200003cc
 8005848:	20000434 	.word	0x20000434

0800584c <global_stdio_init.part.0>:
 800584c:	b510      	push	{r4, lr}
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <global_stdio_init.part.0+0x30>)
 8005850:	4c0b      	ldr	r4, [pc, #44]	; (8005880 <global_stdio_init.part.0+0x34>)
 8005852:	4a0c      	ldr	r2, [pc, #48]	; (8005884 <global_stdio_init.part.0+0x38>)
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	4620      	mov	r0, r4
 8005858:	2200      	movs	r2, #0
 800585a:	2104      	movs	r1, #4
 800585c:	f7ff ff94 	bl	8005788 <std>
 8005860:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005864:	2201      	movs	r2, #1
 8005866:	2109      	movs	r1, #9
 8005868:	f7ff ff8e 	bl	8005788 <std>
 800586c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005870:	2202      	movs	r2, #2
 8005872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005876:	2112      	movs	r1, #18
 8005878:	f7ff bf86 	b.w	8005788 <std>
 800587c:	2000049c 	.word	0x2000049c
 8005880:	20000364 	.word	0x20000364
 8005884:	080057f5 	.word	0x080057f5

08005888 <__sfp_lock_acquire>:
 8005888:	4801      	ldr	r0, [pc, #4]	; (8005890 <__sfp_lock_acquire+0x8>)
 800588a:	f000 b92c 	b.w	8005ae6 <__retarget_lock_acquire_recursive>
 800588e:	bf00      	nop
 8005890:	200004a5 	.word	0x200004a5

08005894 <__sfp_lock_release>:
 8005894:	4801      	ldr	r0, [pc, #4]	; (800589c <__sfp_lock_release+0x8>)
 8005896:	f000 b927 	b.w	8005ae8 <__retarget_lock_release_recursive>
 800589a:	bf00      	nop
 800589c:	200004a5 	.word	0x200004a5

080058a0 <__sinit>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	4604      	mov	r4, r0
 80058a4:	f7ff fff0 	bl	8005888 <__sfp_lock_acquire>
 80058a8:	6a23      	ldr	r3, [r4, #32]
 80058aa:	b11b      	cbz	r3, 80058b4 <__sinit+0x14>
 80058ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b0:	f7ff bff0 	b.w	8005894 <__sfp_lock_release>
 80058b4:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <__sinit+0x28>)
 80058b6:	6223      	str	r3, [r4, #32]
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <__sinit+0x2c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f5      	bne.n	80058ac <__sinit+0xc>
 80058c0:	f7ff ffc4 	bl	800584c <global_stdio_init.part.0>
 80058c4:	e7f2      	b.n	80058ac <__sinit+0xc>
 80058c6:	bf00      	nop
 80058c8:	0800580d 	.word	0x0800580d
 80058cc:	2000049c 	.word	0x2000049c

080058d0 <_fwalk_sglue>:
 80058d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d4:	4607      	mov	r7, r0
 80058d6:	4688      	mov	r8, r1
 80058d8:	4614      	mov	r4, r2
 80058da:	2600      	movs	r6, #0
 80058dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058e0:	f1b9 0901 	subs.w	r9, r9, #1
 80058e4:	d505      	bpl.n	80058f2 <_fwalk_sglue+0x22>
 80058e6:	6824      	ldr	r4, [r4, #0]
 80058e8:	2c00      	cmp	r4, #0
 80058ea:	d1f7      	bne.n	80058dc <_fwalk_sglue+0xc>
 80058ec:	4630      	mov	r0, r6
 80058ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058f2:	89ab      	ldrh	r3, [r5, #12]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d907      	bls.n	8005908 <_fwalk_sglue+0x38>
 80058f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058fc:	3301      	adds	r3, #1
 80058fe:	d003      	beq.n	8005908 <_fwalk_sglue+0x38>
 8005900:	4629      	mov	r1, r5
 8005902:	4638      	mov	r0, r7
 8005904:	47c0      	blx	r8
 8005906:	4306      	orrs	r6, r0
 8005908:	3568      	adds	r5, #104	; 0x68
 800590a:	e7e9      	b.n	80058e0 <_fwalk_sglue+0x10>

0800590c <siprintf>:
 800590c:	b40e      	push	{r1, r2, r3}
 800590e:	b500      	push	{lr}
 8005910:	b09c      	sub	sp, #112	; 0x70
 8005912:	ab1d      	add	r3, sp, #116	; 0x74
 8005914:	9002      	str	r0, [sp, #8]
 8005916:	9006      	str	r0, [sp, #24]
 8005918:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800591c:	4809      	ldr	r0, [pc, #36]	; (8005944 <siprintf+0x38>)
 800591e:	9107      	str	r1, [sp, #28]
 8005920:	9104      	str	r1, [sp, #16]
 8005922:	4909      	ldr	r1, [pc, #36]	; (8005948 <siprintf+0x3c>)
 8005924:	f853 2b04 	ldr.w	r2, [r3], #4
 8005928:	9105      	str	r1, [sp, #20]
 800592a:	6800      	ldr	r0, [r0, #0]
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	a902      	add	r1, sp, #8
 8005930:	f001 fc2e 	bl	8007190 <_svfiprintf_r>
 8005934:	9b02      	ldr	r3, [sp, #8]
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	b01c      	add	sp, #112	; 0x70
 800593c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005940:	b003      	add	sp, #12
 8005942:	4770      	bx	lr
 8005944:	20000064 	.word	0x20000064
 8005948:	ffff0208 	.word	0xffff0208

0800594c <__sread>:
 800594c:	b510      	push	{r4, lr}
 800594e:	460c      	mov	r4, r1
 8005950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005954:	f000 f878 	bl	8005a48 <_read_r>
 8005958:	2800      	cmp	r0, #0
 800595a:	bfab      	itete	ge
 800595c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800595e:	89a3      	ldrhlt	r3, [r4, #12]
 8005960:	181b      	addge	r3, r3, r0
 8005962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005966:	bfac      	ite	ge
 8005968:	6563      	strge	r3, [r4, #84]	; 0x54
 800596a:	81a3      	strhlt	r3, [r4, #12]
 800596c:	bd10      	pop	{r4, pc}

0800596e <__swrite>:
 800596e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005972:	461f      	mov	r7, r3
 8005974:	898b      	ldrh	r3, [r1, #12]
 8005976:	05db      	lsls	r3, r3, #23
 8005978:	4605      	mov	r5, r0
 800597a:	460c      	mov	r4, r1
 800597c:	4616      	mov	r6, r2
 800597e:	d505      	bpl.n	800598c <__swrite+0x1e>
 8005980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005984:	2302      	movs	r3, #2
 8005986:	2200      	movs	r2, #0
 8005988:	f000 f84c 	bl	8005a24 <_lseek_r>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005996:	81a3      	strh	r3, [r4, #12]
 8005998:	4632      	mov	r2, r6
 800599a:	463b      	mov	r3, r7
 800599c:	4628      	mov	r0, r5
 800599e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059a2:	f000 b863 	b.w	8005a6c <_write_r>

080059a6 <__sseek>:
 80059a6:	b510      	push	{r4, lr}
 80059a8:	460c      	mov	r4, r1
 80059aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ae:	f000 f839 	bl	8005a24 <_lseek_r>
 80059b2:	1c43      	adds	r3, r0, #1
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	bf15      	itete	ne
 80059b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80059ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059c2:	81a3      	strheq	r3, [r4, #12]
 80059c4:	bf18      	it	ne
 80059c6:	81a3      	strhne	r3, [r4, #12]
 80059c8:	bd10      	pop	{r4, pc}

080059ca <__sclose>:
 80059ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ce:	f000 b819 	b.w	8005a04 <_close_r>

080059d2 <memset>:
 80059d2:	4402      	add	r2, r0
 80059d4:	4603      	mov	r3, r0
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d100      	bne.n	80059dc <memset+0xa>
 80059da:	4770      	bx	lr
 80059dc:	f803 1b01 	strb.w	r1, [r3], #1
 80059e0:	e7f9      	b.n	80059d6 <memset+0x4>

080059e2 <strchr>:
 80059e2:	b2c9      	uxtb	r1, r1
 80059e4:	4603      	mov	r3, r0
 80059e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ea:	b11a      	cbz	r2, 80059f4 <strchr+0x12>
 80059ec:	428a      	cmp	r2, r1
 80059ee:	d1f9      	bne.n	80059e4 <strchr+0x2>
 80059f0:	4618      	mov	r0, r3
 80059f2:	4770      	bx	lr
 80059f4:	2900      	cmp	r1, #0
 80059f6:	bf18      	it	ne
 80059f8:	2300      	movne	r3, #0
 80059fa:	e7f9      	b.n	80059f0 <strchr+0xe>

080059fc <_localeconv_r>:
 80059fc:	4800      	ldr	r0, [pc, #0]	; (8005a00 <_localeconv_r+0x4>)
 80059fe:	4770      	bx	lr
 8005a00:	20000158 	.word	0x20000158

08005a04 <_close_r>:
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	4d06      	ldr	r5, [pc, #24]	; (8005a20 <_close_r+0x1c>)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	602b      	str	r3, [r5, #0]
 8005a10:	f7fc f823 	bl	8001a5a <_close>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_close_r+0x1a>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_close_r+0x1a>
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	200004a0 	.word	0x200004a0

08005a24 <_lseek_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4d07      	ldr	r5, [pc, #28]	; (8005a44 <_lseek_r+0x20>)
 8005a28:	4604      	mov	r4, r0
 8005a2a:	4608      	mov	r0, r1
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	602a      	str	r2, [r5, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f7fc f838 	bl	8001aa8 <_lseek>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_lseek_r+0x1e>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_lseek_r+0x1e>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	200004a0 	.word	0x200004a0

08005a48 <_read_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4d07      	ldr	r5, [pc, #28]	; (8005a68 <_read_r+0x20>)
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	4608      	mov	r0, r1
 8005a50:	4611      	mov	r1, r2
 8005a52:	2200      	movs	r2, #0
 8005a54:	602a      	str	r2, [r5, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f7fb ffc6 	bl	80019e8 <_read>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	d102      	bne.n	8005a66 <_read_r+0x1e>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	b103      	cbz	r3, 8005a66 <_read_r+0x1e>
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	bd38      	pop	{r3, r4, r5, pc}
 8005a68:	200004a0 	.word	0x200004a0

08005a6c <_write_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4d07      	ldr	r5, [pc, #28]	; (8005a8c <_write_r+0x20>)
 8005a70:	4604      	mov	r4, r0
 8005a72:	4608      	mov	r0, r1
 8005a74:	4611      	mov	r1, r2
 8005a76:	2200      	movs	r2, #0
 8005a78:	602a      	str	r2, [r5, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f7fb ffd1 	bl	8001a22 <_write>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_write_r+0x1e>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_write_r+0x1e>
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	200004a0 	.word	0x200004a0

08005a90 <__errno>:
 8005a90:	4b01      	ldr	r3, [pc, #4]	; (8005a98 <__errno+0x8>)
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000064 	.word	0x20000064

08005a9c <__libc_init_array>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	4d0d      	ldr	r5, [pc, #52]	; (8005ad4 <__libc_init_array+0x38>)
 8005aa0:	4c0d      	ldr	r4, [pc, #52]	; (8005ad8 <__libc_init_array+0x3c>)
 8005aa2:	1b64      	subs	r4, r4, r5
 8005aa4:	10a4      	asrs	r4, r4, #2
 8005aa6:	2600      	movs	r6, #0
 8005aa8:	42a6      	cmp	r6, r4
 8005aaa:	d109      	bne.n	8005ac0 <__libc_init_array+0x24>
 8005aac:	4d0b      	ldr	r5, [pc, #44]	; (8005adc <__libc_init_array+0x40>)
 8005aae:	4c0c      	ldr	r4, [pc, #48]	; (8005ae0 <__libc_init_array+0x44>)
 8005ab0:	f002 fdd6 	bl	8008660 <_init>
 8005ab4:	1b64      	subs	r4, r4, r5
 8005ab6:	10a4      	asrs	r4, r4, #2
 8005ab8:	2600      	movs	r6, #0
 8005aba:	42a6      	cmp	r6, r4
 8005abc:	d105      	bne.n	8005aca <__libc_init_array+0x2e>
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac4:	4798      	blx	r3
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	e7ee      	b.n	8005aa8 <__libc_init_array+0xc>
 8005aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ace:	4798      	blx	r3
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	e7f2      	b.n	8005aba <__libc_init_array+0x1e>
 8005ad4:	08008a5c 	.word	0x08008a5c
 8005ad8:	08008a5c 	.word	0x08008a5c
 8005adc:	08008a5c 	.word	0x08008a5c
 8005ae0:	08008a60 	.word	0x08008a60

08005ae4 <__retarget_lock_init_recursive>:
 8005ae4:	4770      	bx	lr

08005ae6 <__retarget_lock_acquire_recursive>:
 8005ae6:	4770      	bx	lr

08005ae8 <__retarget_lock_release_recursive>:
 8005ae8:	4770      	bx	lr

08005aea <quorem>:
 8005aea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aee:	6903      	ldr	r3, [r0, #16]
 8005af0:	690c      	ldr	r4, [r1, #16]
 8005af2:	42a3      	cmp	r3, r4
 8005af4:	4607      	mov	r7, r0
 8005af6:	db7e      	blt.n	8005bf6 <quorem+0x10c>
 8005af8:	3c01      	subs	r4, #1
 8005afa:	f101 0814 	add.w	r8, r1, #20
 8005afe:	f100 0514 	add.w	r5, r0, #20
 8005b02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b06:	9301      	str	r3, [sp, #4]
 8005b08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b10:	3301      	adds	r3, #1
 8005b12:	429a      	cmp	r2, r3
 8005b14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b20:	d331      	bcc.n	8005b86 <quorem+0x9c>
 8005b22:	f04f 0e00 	mov.w	lr, #0
 8005b26:	4640      	mov	r0, r8
 8005b28:	46ac      	mov	ip, r5
 8005b2a:	46f2      	mov	sl, lr
 8005b2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b30:	b293      	uxth	r3, r2
 8005b32:	fb06 e303 	mla	r3, r6, r3, lr
 8005b36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b3a:	0c1a      	lsrs	r2, r3, #16
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ebaa 0303 	sub.w	r3, sl, r3
 8005b42:	f8dc a000 	ldr.w	sl, [ip]
 8005b46:	fa13 f38a 	uxtah	r3, r3, sl
 8005b4a:	fb06 220e 	mla	r2, r6, lr, r2
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	9b00      	ldr	r3, [sp, #0]
 8005b52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005b56:	b292      	uxth	r2, r2
 8005b58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005b5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b60:	f8bd 3000 	ldrh.w	r3, [sp]
 8005b64:	4581      	cmp	r9, r0
 8005b66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b6a:	f84c 3b04 	str.w	r3, [ip], #4
 8005b6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005b72:	d2db      	bcs.n	8005b2c <quorem+0x42>
 8005b74:	f855 300b 	ldr.w	r3, [r5, fp]
 8005b78:	b92b      	cbnz	r3, 8005b86 <quorem+0x9c>
 8005b7a:	9b01      	ldr	r3, [sp, #4]
 8005b7c:	3b04      	subs	r3, #4
 8005b7e:	429d      	cmp	r5, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	d32c      	bcc.n	8005bde <quorem+0xf4>
 8005b84:	613c      	str	r4, [r7, #16]
 8005b86:	4638      	mov	r0, r7
 8005b88:	f001 f9a8 	bl	8006edc <__mcmp>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	db22      	blt.n	8005bd6 <quorem+0xec>
 8005b90:	3601      	adds	r6, #1
 8005b92:	4629      	mov	r1, r5
 8005b94:	2000      	movs	r0, #0
 8005b96:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b9a:	f8d1 c000 	ldr.w	ip, [r1]
 8005b9e:	b293      	uxth	r3, r2
 8005ba0:	1ac3      	subs	r3, r0, r3
 8005ba2:	0c12      	lsrs	r2, r2, #16
 8005ba4:	fa13 f38c 	uxtah	r3, r3, ip
 8005ba8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005bac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bb6:	45c1      	cmp	r9, r8
 8005bb8:	f841 3b04 	str.w	r3, [r1], #4
 8005bbc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bc0:	d2e9      	bcs.n	8005b96 <quorem+0xac>
 8005bc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bca:	b922      	cbnz	r2, 8005bd6 <quorem+0xec>
 8005bcc:	3b04      	subs	r3, #4
 8005bce:	429d      	cmp	r5, r3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	d30a      	bcc.n	8005bea <quorem+0x100>
 8005bd4:	613c      	str	r4, [r7, #16]
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	b003      	add	sp, #12
 8005bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bde:	6812      	ldr	r2, [r2, #0]
 8005be0:	3b04      	subs	r3, #4
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	d1ce      	bne.n	8005b84 <quorem+0x9a>
 8005be6:	3c01      	subs	r4, #1
 8005be8:	e7c9      	b.n	8005b7e <quorem+0x94>
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	3b04      	subs	r3, #4
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	d1f0      	bne.n	8005bd4 <quorem+0xea>
 8005bf2:	3c01      	subs	r4, #1
 8005bf4:	e7eb      	b.n	8005bce <quorem+0xe4>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e7ee      	b.n	8005bd8 <quorem+0xee>
 8005bfa:	0000      	movs	r0, r0
 8005bfc:	0000      	movs	r0, r0
	...

08005c00 <_dtoa_r>:
 8005c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c04:	ed2d 8b04 	vpush	{d8-d9}
 8005c08:	69c5      	ldr	r5, [r0, #28]
 8005c0a:	b093      	sub	sp, #76	; 0x4c
 8005c0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c10:	ec57 6b10 	vmov	r6, r7, d0
 8005c14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005c18:	9107      	str	r1, [sp, #28]
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	920a      	str	r2, [sp, #40]	; 0x28
 8005c1e:	930d      	str	r3, [sp, #52]	; 0x34
 8005c20:	b975      	cbnz	r5, 8005c40 <_dtoa_r+0x40>
 8005c22:	2010      	movs	r0, #16
 8005c24:	f000 fe2a 	bl	800687c <malloc>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	61e0      	str	r0, [r4, #28]
 8005c2c:	b920      	cbnz	r0, 8005c38 <_dtoa_r+0x38>
 8005c2e:	4bae      	ldr	r3, [pc, #696]	; (8005ee8 <_dtoa_r+0x2e8>)
 8005c30:	21ef      	movs	r1, #239	; 0xef
 8005c32:	48ae      	ldr	r0, [pc, #696]	; (8005eec <_dtoa_r+0x2ec>)
 8005c34:	f001 fc90 	bl	8007558 <__assert_func>
 8005c38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c3c:	6005      	str	r5, [r0, #0]
 8005c3e:	60c5      	str	r5, [r0, #12]
 8005c40:	69e3      	ldr	r3, [r4, #28]
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	b151      	cbz	r1, 8005c5c <_dtoa_r+0x5c>
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	604a      	str	r2, [r1, #4]
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	4093      	lsls	r3, r2
 8005c4e:	608b      	str	r3, [r1, #8]
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 ff07 	bl	8006a64 <_Bfree>
 8005c56:	69e3      	ldr	r3, [r4, #28]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	1e3b      	subs	r3, r7, #0
 8005c5e:	bfbb      	ittet	lt
 8005c60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c64:	9303      	strlt	r3, [sp, #12]
 8005c66:	2300      	movge	r3, #0
 8005c68:	2201      	movlt	r2, #1
 8005c6a:	bfac      	ite	ge
 8005c6c:	f8c8 3000 	strge.w	r3, [r8]
 8005c70:	f8c8 2000 	strlt.w	r2, [r8]
 8005c74:	4b9e      	ldr	r3, [pc, #632]	; (8005ef0 <_dtoa_r+0x2f0>)
 8005c76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c7a:	ea33 0308 	bics.w	r3, r3, r8
 8005c7e:	d11b      	bne.n	8005cb8 <_dtoa_r+0xb8>
 8005c80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c82:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c8c:	4333      	orrs	r3, r6
 8005c8e:	f000 8593 	beq.w	80067b8 <_dtoa_r+0xbb8>
 8005c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c94:	b963      	cbnz	r3, 8005cb0 <_dtoa_r+0xb0>
 8005c96:	4b97      	ldr	r3, [pc, #604]	; (8005ef4 <_dtoa_r+0x2f4>)
 8005c98:	e027      	b.n	8005cea <_dtoa_r+0xea>
 8005c9a:	4b97      	ldr	r3, [pc, #604]	; (8005ef8 <_dtoa_r+0x2f8>)
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	9800      	ldr	r0, [sp, #0]
 8005ca6:	b013      	add	sp, #76	; 0x4c
 8005ca8:	ecbd 8b04 	vpop	{d8-d9}
 8005cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb0:	4b90      	ldr	r3, [pc, #576]	; (8005ef4 <_dtoa_r+0x2f4>)
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	3303      	adds	r3, #3
 8005cb6:	e7f3      	b.n	8005ca0 <_dtoa_r+0xa0>
 8005cb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	ec51 0b17 	vmov	r0, r1, d7
 8005cc2:	eeb0 8a47 	vmov.f32	s16, s14
 8005cc6:	eef0 8a67 	vmov.f32	s17, s15
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f7fa fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cd0:	4681      	mov	r9, r0
 8005cd2:	b160      	cbz	r0, 8005cee <_dtoa_r+0xee>
 8005cd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8568 	beq.w	80067b2 <_dtoa_r+0xbb2>
 8005ce2:	4b86      	ldr	r3, [pc, #536]	; (8005efc <_dtoa_r+0x2fc>)
 8005ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	e7da      	b.n	8005ca4 <_dtoa_r+0xa4>
 8005cee:	aa10      	add	r2, sp, #64	; 0x40
 8005cf0:	a911      	add	r1, sp, #68	; 0x44
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	eeb0 0a48 	vmov.f32	s0, s16
 8005cf8:	eef0 0a68 	vmov.f32	s1, s17
 8005cfc:	f001 f994 	bl	8007028 <__d2b>
 8005d00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005d04:	4682      	mov	sl, r0
 8005d06:	2d00      	cmp	r5, #0
 8005d08:	d07f      	beq.n	8005e0a <_dtoa_r+0x20a>
 8005d0a:	ee18 3a90 	vmov	r3, s17
 8005d0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005d16:	ec51 0b18 	vmov	r0, r1, d8
 8005d1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005d1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005d26:	4619      	mov	r1, r3
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4b75      	ldr	r3, [pc, #468]	; (8005f00 <_dtoa_r+0x300>)
 8005d2c:	f7fa faac 	bl	8000288 <__aeabi_dsub>
 8005d30:	a367      	add	r3, pc, #412	; (adr r3, 8005ed0 <_dtoa_r+0x2d0>)
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	f7fa fc5f 	bl	80005f8 <__aeabi_dmul>
 8005d3a:	a367      	add	r3, pc, #412	; (adr r3, 8005ed8 <_dtoa_r+0x2d8>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa faa4 	bl	800028c <__adddf3>
 8005d44:	4606      	mov	r6, r0
 8005d46:	4628      	mov	r0, r5
 8005d48:	460f      	mov	r7, r1
 8005d4a:	f7fa fbeb 	bl	8000524 <__aeabi_i2d>
 8005d4e:	a364      	add	r3, pc, #400	; (adr r3, 8005ee0 <_dtoa_r+0x2e0>)
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f7fa fc50 	bl	80005f8 <__aeabi_dmul>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	4639      	mov	r1, r7
 8005d60:	f7fa fa94 	bl	800028c <__adddf3>
 8005d64:	4606      	mov	r6, r0
 8005d66:	460f      	mov	r7, r1
 8005d68:	f7fa fef6 	bl	8000b58 <__aeabi_d2iz>
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4683      	mov	fp, r0
 8005d70:	2300      	movs	r3, #0
 8005d72:	4630      	mov	r0, r6
 8005d74:	4639      	mov	r1, r7
 8005d76:	f7fa feb1 	bl	8000adc <__aeabi_dcmplt>
 8005d7a:	b148      	cbz	r0, 8005d90 <_dtoa_r+0x190>
 8005d7c:	4658      	mov	r0, fp
 8005d7e:	f7fa fbd1 	bl	8000524 <__aeabi_i2d>
 8005d82:	4632      	mov	r2, r6
 8005d84:	463b      	mov	r3, r7
 8005d86:	f7fa fe9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d8a:	b908      	cbnz	r0, 8005d90 <_dtoa_r+0x190>
 8005d8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d90:	f1bb 0f16 	cmp.w	fp, #22
 8005d94:	d857      	bhi.n	8005e46 <_dtoa_r+0x246>
 8005d96:	4b5b      	ldr	r3, [pc, #364]	; (8005f04 <_dtoa_r+0x304>)
 8005d98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	ec51 0b18 	vmov	r0, r1, d8
 8005da4:	f7fa fe9a 	bl	8000adc <__aeabi_dcmplt>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d04e      	beq.n	8005e4a <_dtoa_r+0x24a>
 8005dac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005db0:	2300      	movs	r3, #0
 8005db2:	930c      	str	r3, [sp, #48]	; 0x30
 8005db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005db6:	1b5b      	subs	r3, r3, r5
 8005db8:	1e5a      	subs	r2, r3, #1
 8005dba:	bf45      	ittet	mi
 8005dbc:	f1c3 0301 	rsbmi	r3, r3, #1
 8005dc0:	9305      	strmi	r3, [sp, #20]
 8005dc2:	2300      	movpl	r3, #0
 8005dc4:	2300      	movmi	r3, #0
 8005dc6:	9206      	str	r2, [sp, #24]
 8005dc8:	bf54      	ite	pl
 8005dca:	9305      	strpl	r3, [sp, #20]
 8005dcc:	9306      	strmi	r3, [sp, #24]
 8005dce:	f1bb 0f00 	cmp.w	fp, #0
 8005dd2:	db3c      	blt.n	8005e4e <_dtoa_r+0x24e>
 8005dd4:	9b06      	ldr	r3, [sp, #24]
 8005dd6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005dda:	445b      	add	r3, fp
 8005ddc:	9306      	str	r3, [sp, #24]
 8005dde:	2300      	movs	r3, #0
 8005de0:	9308      	str	r3, [sp, #32]
 8005de2:	9b07      	ldr	r3, [sp, #28]
 8005de4:	2b09      	cmp	r3, #9
 8005de6:	d868      	bhi.n	8005eba <_dtoa_r+0x2ba>
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	bfc4      	itt	gt
 8005dec:	3b04      	subgt	r3, #4
 8005dee:	9307      	strgt	r3, [sp, #28]
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	f1a3 0302 	sub.w	r3, r3, #2
 8005df6:	bfcc      	ite	gt
 8005df8:	2500      	movgt	r5, #0
 8005dfa:	2501      	movle	r5, #1
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	f200 8085 	bhi.w	8005f0c <_dtoa_r+0x30c>
 8005e02:	e8df f003 	tbb	[pc, r3]
 8005e06:	3b2e      	.short	0x3b2e
 8005e08:	5839      	.short	0x5839
 8005e0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005e0e:	441d      	add	r5, r3
 8005e10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	bfc1      	itttt	gt
 8005e18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005e20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005e24:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005e28:	bfd6      	itet	le
 8005e2a:	f1c3 0320 	rsble	r3, r3, #32
 8005e2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005e32:	fa06 f003 	lslle.w	r0, r6, r3
 8005e36:	f7fa fb65 	bl	8000504 <__aeabi_ui2d>
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005e40:	3d01      	subs	r5, #1
 8005e42:	920e      	str	r2, [sp, #56]	; 0x38
 8005e44:	e76f      	b.n	8005d26 <_dtoa_r+0x126>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e7b3      	b.n	8005db2 <_dtoa_r+0x1b2>
 8005e4a:	900c      	str	r0, [sp, #48]	; 0x30
 8005e4c:	e7b2      	b.n	8005db4 <_dtoa_r+0x1b4>
 8005e4e:	9b05      	ldr	r3, [sp, #20]
 8005e50:	eba3 030b 	sub.w	r3, r3, fp
 8005e54:	9305      	str	r3, [sp, #20]
 8005e56:	f1cb 0300 	rsb	r3, fp, #0
 8005e5a:	9308      	str	r3, [sp, #32]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e60:	e7bf      	b.n	8005de2 <_dtoa_r+0x1e2>
 8005e62:	2300      	movs	r3, #0
 8005e64:	9309      	str	r3, [sp, #36]	; 0x24
 8005e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	dc52      	bgt.n	8005f12 <_dtoa_r+0x312>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	9304      	str	r3, [sp, #16]
 8005e72:	461a      	mov	r2, r3
 8005e74:	920a      	str	r2, [sp, #40]	; 0x28
 8005e76:	e00b      	b.n	8005e90 <_dtoa_r+0x290>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e7f3      	b.n	8005e64 <_dtoa_r+0x264>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e82:	445b      	add	r3, fp
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	3301      	adds	r3, #1
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	9304      	str	r3, [sp, #16]
 8005e8c:	bfb8      	it	lt
 8005e8e:	2301      	movlt	r3, #1
 8005e90:	69e0      	ldr	r0, [r4, #28]
 8005e92:	2100      	movs	r1, #0
 8005e94:	2204      	movs	r2, #4
 8005e96:	f102 0614 	add.w	r6, r2, #20
 8005e9a:	429e      	cmp	r6, r3
 8005e9c:	d93d      	bls.n	8005f1a <_dtoa_r+0x31a>
 8005e9e:	6041      	str	r1, [r0, #4]
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 fd9f 	bl	80069e4 <_Balloc>
 8005ea6:	9000      	str	r0, [sp, #0]
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d139      	bne.n	8005f20 <_dtoa_r+0x320>
 8005eac:	4b16      	ldr	r3, [pc, #88]	; (8005f08 <_dtoa_r+0x308>)
 8005eae:	4602      	mov	r2, r0
 8005eb0:	f240 11af 	movw	r1, #431	; 0x1af
 8005eb4:	e6bd      	b.n	8005c32 <_dtoa_r+0x32>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e7e1      	b.n	8005e7e <_dtoa_r+0x27e>
 8005eba:	2501      	movs	r5, #1
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9307      	str	r3, [sp, #28]
 8005ec0:	9509      	str	r5, [sp, #36]	; 0x24
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	9304      	str	r3, [sp, #16]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2312      	movs	r3, #18
 8005ece:	e7d1      	b.n	8005e74 <_dtoa_r+0x274>
 8005ed0:	636f4361 	.word	0x636f4361
 8005ed4:	3fd287a7 	.word	0x3fd287a7
 8005ed8:	8b60c8b3 	.word	0x8b60c8b3
 8005edc:	3fc68a28 	.word	0x3fc68a28
 8005ee0:	509f79fb 	.word	0x509f79fb
 8005ee4:	3fd34413 	.word	0x3fd34413
 8005ee8:	0800880a 	.word	0x0800880a
 8005eec:	08008821 	.word	0x08008821
 8005ef0:	7ff00000 	.word	0x7ff00000
 8005ef4:	08008806 	.word	0x08008806
 8005ef8:	080087fd 	.word	0x080087fd
 8005efc:	080087da 	.word	0x080087da
 8005f00:	3ff80000 	.word	0x3ff80000
 8005f04:	08008910 	.word	0x08008910
 8005f08:	08008879 	.word	0x08008879
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f10:	e7d7      	b.n	8005ec2 <_dtoa_r+0x2c2>
 8005f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	9304      	str	r3, [sp, #16]
 8005f18:	e7ba      	b.n	8005e90 <_dtoa_r+0x290>
 8005f1a:	3101      	adds	r1, #1
 8005f1c:	0052      	lsls	r2, r2, #1
 8005f1e:	e7ba      	b.n	8005e96 <_dtoa_r+0x296>
 8005f20:	69e3      	ldr	r3, [r4, #28]
 8005f22:	9a00      	ldr	r2, [sp, #0]
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	9b04      	ldr	r3, [sp, #16]
 8005f28:	2b0e      	cmp	r3, #14
 8005f2a:	f200 80a8 	bhi.w	800607e <_dtoa_r+0x47e>
 8005f2e:	2d00      	cmp	r5, #0
 8005f30:	f000 80a5 	beq.w	800607e <_dtoa_r+0x47e>
 8005f34:	f1bb 0f00 	cmp.w	fp, #0
 8005f38:	dd38      	ble.n	8005fac <_dtoa_r+0x3ac>
 8005f3a:	4bc0      	ldr	r3, [pc, #768]	; (800623c <_dtoa_r+0x63c>)
 8005f3c:	f00b 020f 	and.w	r2, fp, #15
 8005f40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005f48:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005f4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005f50:	d019      	beq.n	8005f86 <_dtoa_r+0x386>
 8005f52:	4bbb      	ldr	r3, [pc, #748]	; (8006240 <_dtoa_r+0x640>)
 8005f54:	ec51 0b18 	vmov	r0, r1, d8
 8005f58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f5c:	f7fa fc76 	bl	800084c <__aeabi_ddiv>
 8005f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f64:	f008 080f 	and.w	r8, r8, #15
 8005f68:	2503      	movs	r5, #3
 8005f6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006240 <_dtoa_r+0x640>
 8005f6e:	f1b8 0f00 	cmp.w	r8, #0
 8005f72:	d10a      	bne.n	8005f8a <_dtoa_r+0x38a>
 8005f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f78:	4632      	mov	r2, r6
 8005f7a:	463b      	mov	r3, r7
 8005f7c:	f7fa fc66 	bl	800084c <__aeabi_ddiv>
 8005f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f84:	e02b      	b.n	8005fde <_dtoa_r+0x3de>
 8005f86:	2502      	movs	r5, #2
 8005f88:	e7ef      	b.n	8005f6a <_dtoa_r+0x36a>
 8005f8a:	f018 0f01 	tst.w	r8, #1
 8005f8e:	d008      	beq.n	8005fa2 <_dtoa_r+0x3a2>
 8005f90:	4630      	mov	r0, r6
 8005f92:	4639      	mov	r1, r7
 8005f94:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005f98:	f7fa fb2e 	bl	80005f8 <__aeabi_dmul>
 8005f9c:	3501      	adds	r5, #1
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	460f      	mov	r7, r1
 8005fa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005fa6:	f109 0908 	add.w	r9, r9, #8
 8005faa:	e7e0      	b.n	8005f6e <_dtoa_r+0x36e>
 8005fac:	f000 809f 	beq.w	80060ee <_dtoa_r+0x4ee>
 8005fb0:	f1cb 0600 	rsb	r6, fp, #0
 8005fb4:	4ba1      	ldr	r3, [pc, #644]	; (800623c <_dtoa_r+0x63c>)
 8005fb6:	4fa2      	ldr	r7, [pc, #648]	; (8006240 <_dtoa_r+0x640>)
 8005fb8:	f006 020f 	and.w	r2, r6, #15
 8005fbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	ec51 0b18 	vmov	r0, r1, d8
 8005fc8:	f7fa fb16 	bl	80005f8 <__aeabi_dmul>
 8005fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fd0:	1136      	asrs	r6, r6, #4
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2502      	movs	r5, #2
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	d17e      	bne.n	80060d8 <_dtoa_r+0x4d8>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1d0      	bne.n	8005f80 <_dtoa_r+0x380>
 8005fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fe0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8084 	beq.w	80060f2 <_dtoa_r+0x4f2>
 8005fea:	4b96      	ldr	r3, [pc, #600]	; (8006244 <_dtoa_r+0x644>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	4640      	mov	r0, r8
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	f7fa fd73 	bl	8000adc <__aeabi_dcmplt>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d07b      	beq.n	80060f2 <_dtoa_r+0x4f2>
 8005ffa:	9b04      	ldr	r3, [sp, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d078      	beq.n	80060f2 <_dtoa_r+0x4f2>
 8006000:	9b01      	ldr	r3, [sp, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	dd39      	ble.n	800607a <_dtoa_r+0x47a>
 8006006:	4b90      	ldr	r3, [pc, #576]	; (8006248 <_dtoa_r+0x648>)
 8006008:	2200      	movs	r2, #0
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa faf3 	bl	80005f8 <__aeabi_dmul>
 8006012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006016:	9e01      	ldr	r6, [sp, #4]
 8006018:	f10b 37ff 	add.w	r7, fp, #4294967295
 800601c:	3501      	adds	r5, #1
 800601e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006022:	4628      	mov	r0, r5
 8006024:	f7fa fa7e 	bl	8000524 <__aeabi_i2d>
 8006028:	4642      	mov	r2, r8
 800602a:	464b      	mov	r3, r9
 800602c:	f7fa fae4 	bl	80005f8 <__aeabi_dmul>
 8006030:	4b86      	ldr	r3, [pc, #536]	; (800624c <_dtoa_r+0x64c>)
 8006032:	2200      	movs	r2, #0
 8006034:	f7fa f92a 	bl	800028c <__adddf3>
 8006038:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800603c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006040:	9303      	str	r3, [sp, #12]
 8006042:	2e00      	cmp	r6, #0
 8006044:	d158      	bne.n	80060f8 <_dtoa_r+0x4f8>
 8006046:	4b82      	ldr	r3, [pc, #520]	; (8006250 <_dtoa_r+0x650>)
 8006048:	2200      	movs	r2, #0
 800604a:	4640      	mov	r0, r8
 800604c:	4649      	mov	r1, r9
 800604e:	f7fa f91b 	bl	8000288 <__aeabi_dsub>
 8006052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006056:	4680      	mov	r8, r0
 8006058:	4689      	mov	r9, r1
 800605a:	f7fa fd5d 	bl	8000b18 <__aeabi_dcmpgt>
 800605e:	2800      	cmp	r0, #0
 8006060:	f040 8296 	bne.w	8006590 <_dtoa_r+0x990>
 8006064:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006068:	4640      	mov	r0, r8
 800606a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800606e:	4649      	mov	r1, r9
 8006070:	f7fa fd34 	bl	8000adc <__aeabi_dcmplt>
 8006074:	2800      	cmp	r0, #0
 8006076:	f040 8289 	bne.w	800658c <_dtoa_r+0x98c>
 800607a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800607e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006080:	2b00      	cmp	r3, #0
 8006082:	f2c0 814e 	blt.w	8006322 <_dtoa_r+0x722>
 8006086:	f1bb 0f0e 	cmp.w	fp, #14
 800608a:	f300 814a 	bgt.w	8006322 <_dtoa_r+0x722>
 800608e:	4b6b      	ldr	r3, [pc, #428]	; (800623c <_dtoa_r+0x63c>)
 8006090:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800609a:	2b00      	cmp	r3, #0
 800609c:	f280 80dc 	bge.w	8006258 <_dtoa_r+0x658>
 80060a0:	9b04      	ldr	r3, [sp, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f300 80d8 	bgt.w	8006258 <_dtoa_r+0x658>
 80060a8:	f040 826f 	bne.w	800658a <_dtoa_r+0x98a>
 80060ac:	4b68      	ldr	r3, [pc, #416]	; (8006250 <_dtoa_r+0x650>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	4640      	mov	r0, r8
 80060b2:	4649      	mov	r1, r9
 80060b4:	f7fa faa0 	bl	80005f8 <__aeabi_dmul>
 80060b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060bc:	f7fa fd22 	bl	8000b04 <__aeabi_dcmpge>
 80060c0:	9e04      	ldr	r6, [sp, #16]
 80060c2:	4637      	mov	r7, r6
 80060c4:	2800      	cmp	r0, #0
 80060c6:	f040 8245 	bne.w	8006554 <_dtoa_r+0x954>
 80060ca:	9d00      	ldr	r5, [sp, #0]
 80060cc:	2331      	movs	r3, #49	; 0x31
 80060ce:	f805 3b01 	strb.w	r3, [r5], #1
 80060d2:	f10b 0b01 	add.w	fp, fp, #1
 80060d6:	e241      	b.n	800655c <_dtoa_r+0x95c>
 80060d8:	07f2      	lsls	r2, r6, #31
 80060da:	d505      	bpl.n	80060e8 <_dtoa_r+0x4e8>
 80060dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e0:	f7fa fa8a 	bl	80005f8 <__aeabi_dmul>
 80060e4:	3501      	adds	r5, #1
 80060e6:	2301      	movs	r3, #1
 80060e8:	1076      	asrs	r6, r6, #1
 80060ea:	3708      	adds	r7, #8
 80060ec:	e773      	b.n	8005fd6 <_dtoa_r+0x3d6>
 80060ee:	2502      	movs	r5, #2
 80060f0:	e775      	b.n	8005fde <_dtoa_r+0x3de>
 80060f2:	9e04      	ldr	r6, [sp, #16]
 80060f4:	465f      	mov	r7, fp
 80060f6:	e792      	b.n	800601e <_dtoa_r+0x41e>
 80060f8:	9900      	ldr	r1, [sp, #0]
 80060fa:	4b50      	ldr	r3, [pc, #320]	; (800623c <_dtoa_r+0x63c>)
 80060fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006100:	4431      	add	r1, r6
 8006102:	9102      	str	r1, [sp, #8]
 8006104:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006106:	eeb0 9a47 	vmov.f32	s18, s14
 800610a:	eef0 9a67 	vmov.f32	s19, s15
 800610e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006112:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006116:	2900      	cmp	r1, #0
 8006118:	d044      	beq.n	80061a4 <_dtoa_r+0x5a4>
 800611a:	494e      	ldr	r1, [pc, #312]	; (8006254 <_dtoa_r+0x654>)
 800611c:	2000      	movs	r0, #0
 800611e:	f7fa fb95 	bl	800084c <__aeabi_ddiv>
 8006122:	ec53 2b19 	vmov	r2, r3, d9
 8006126:	f7fa f8af 	bl	8000288 <__aeabi_dsub>
 800612a:	9d00      	ldr	r5, [sp, #0]
 800612c:	ec41 0b19 	vmov	d9, r0, r1
 8006130:	4649      	mov	r1, r9
 8006132:	4640      	mov	r0, r8
 8006134:	f7fa fd10 	bl	8000b58 <__aeabi_d2iz>
 8006138:	4606      	mov	r6, r0
 800613a:	f7fa f9f3 	bl	8000524 <__aeabi_i2d>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	f7fa f89f 	bl	8000288 <__aeabi_dsub>
 800614a:	3630      	adds	r6, #48	; 0x30
 800614c:	f805 6b01 	strb.w	r6, [r5], #1
 8006150:	ec53 2b19 	vmov	r2, r3, d9
 8006154:	4680      	mov	r8, r0
 8006156:	4689      	mov	r9, r1
 8006158:	f7fa fcc0 	bl	8000adc <__aeabi_dcmplt>
 800615c:	2800      	cmp	r0, #0
 800615e:	d164      	bne.n	800622a <_dtoa_r+0x62a>
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	4937      	ldr	r1, [pc, #220]	; (8006244 <_dtoa_r+0x644>)
 8006166:	2000      	movs	r0, #0
 8006168:	f7fa f88e 	bl	8000288 <__aeabi_dsub>
 800616c:	ec53 2b19 	vmov	r2, r3, d9
 8006170:	f7fa fcb4 	bl	8000adc <__aeabi_dcmplt>
 8006174:	2800      	cmp	r0, #0
 8006176:	f040 80b6 	bne.w	80062e6 <_dtoa_r+0x6e6>
 800617a:	9b02      	ldr	r3, [sp, #8]
 800617c:	429d      	cmp	r5, r3
 800617e:	f43f af7c 	beq.w	800607a <_dtoa_r+0x47a>
 8006182:	4b31      	ldr	r3, [pc, #196]	; (8006248 <_dtoa_r+0x648>)
 8006184:	ec51 0b19 	vmov	r0, r1, d9
 8006188:	2200      	movs	r2, #0
 800618a:	f7fa fa35 	bl	80005f8 <__aeabi_dmul>
 800618e:	4b2e      	ldr	r3, [pc, #184]	; (8006248 <_dtoa_r+0x648>)
 8006190:	ec41 0b19 	vmov	d9, r0, r1
 8006194:	2200      	movs	r2, #0
 8006196:	4640      	mov	r0, r8
 8006198:	4649      	mov	r1, r9
 800619a:	f7fa fa2d 	bl	80005f8 <__aeabi_dmul>
 800619e:	4680      	mov	r8, r0
 80061a0:	4689      	mov	r9, r1
 80061a2:	e7c5      	b.n	8006130 <_dtoa_r+0x530>
 80061a4:	ec51 0b17 	vmov	r0, r1, d7
 80061a8:	f7fa fa26 	bl	80005f8 <__aeabi_dmul>
 80061ac:	9b02      	ldr	r3, [sp, #8]
 80061ae:	9d00      	ldr	r5, [sp, #0]
 80061b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80061b2:	ec41 0b19 	vmov	d9, r0, r1
 80061b6:	4649      	mov	r1, r9
 80061b8:	4640      	mov	r0, r8
 80061ba:	f7fa fccd 	bl	8000b58 <__aeabi_d2iz>
 80061be:	4606      	mov	r6, r0
 80061c0:	f7fa f9b0 	bl	8000524 <__aeabi_i2d>
 80061c4:	3630      	adds	r6, #48	; 0x30
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4640      	mov	r0, r8
 80061cc:	4649      	mov	r1, r9
 80061ce:	f7fa f85b 	bl	8000288 <__aeabi_dsub>
 80061d2:	f805 6b01 	strb.w	r6, [r5], #1
 80061d6:	9b02      	ldr	r3, [sp, #8]
 80061d8:	429d      	cmp	r5, r3
 80061da:	4680      	mov	r8, r0
 80061dc:	4689      	mov	r9, r1
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	d124      	bne.n	800622e <_dtoa_r+0x62e>
 80061e4:	4b1b      	ldr	r3, [pc, #108]	; (8006254 <_dtoa_r+0x654>)
 80061e6:	ec51 0b19 	vmov	r0, r1, d9
 80061ea:	f7fa f84f 	bl	800028c <__adddf3>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4640      	mov	r0, r8
 80061f4:	4649      	mov	r1, r9
 80061f6:	f7fa fc8f 	bl	8000b18 <__aeabi_dcmpgt>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d173      	bne.n	80062e6 <_dtoa_r+0x6e6>
 80061fe:	ec53 2b19 	vmov	r2, r3, d9
 8006202:	4914      	ldr	r1, [pc, #80]	; (8006254 <_dtoa_r+0x654>)
 8006204:	2000      	movs	r0, #0
 8006206:	f7fa f83f 	bl	8000288 <__aeabi_dsub>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	4640      	mov	r0, r8
 8006210:	4649      	mov	r1, r9
 8006212:	f7fa fc63 	bl	8000adc <__aeabi_dcmplt>
 8006216:	2800      	cmp	r0, #0
 8006218:	f43f af2f 	beq.w	800607a <_dtoa_r+0x47a>
 800621c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800621e:	1e6b      	subs	r3, r5, #1
 8006220:	930f      	str	r3, [sp, #60]	; 0x3c
 8006222:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006226:	2b30      	cmp	r3, #48	; 0x30
 8006228:	d0f8      	beq.n	800621c <_dtoa_r+0x61c>
 800622a:	46bb      	mov	fp, r7
 800622c:	e04a      	b.n	80062c4 <_dtoa_r+0x6c4>
 800622e:	4b06      	ldr	r3, [pc, #24]	; (8006248 <_dtoa_r+0x648>)
 8006230:	f7fa f9e2 	bl	80005f8 <__aeabi_dmul>
 8006234:	4680      	mov	r8, r0
 8006236:	4689      	mov	r9, r1
 8006238:	e7bd      	b.n	80061b6 <_dtoa_r+0x5b6>
 800623a:	bf00      	nop
 800623c:	08008910 	.word	0x08008910
 8006240:	080088e8 	.word	0x080088e8
 8006244:	3ff00000 	.word	0x3ff00000
 8006248:	40240000 	.word	0x40240000
 800624c:	401c0000 	.word	0x401c0000
 8006250:	40140000 	.word	0x40140000
 8006254:	3fe00000 	.word	0x3fe00000
 8006258:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800625c:	9d00      	ldr	r5, [sp, #0]
 800625e:	4642      	mov	r2, r8
 8006260:	464b      	mov	r3, r9
 8006262:	4630      	mov	r0, r6
 8006264:	4639      	mov	r1, r7
 8006266:	f7fa faf1 	bl	800084c <__aeabi_ddiv>
 800626a:	f7fa fc75 	bl	8000b58 <__aeabi_d2iz>
 800626e:	9001      	str	r0, [sp, #4]
 8006270:	f7fa f958 	bl	8000524 <__aeabi_i2d>
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	f7fa f9be 	bl	80005f8 <__aeabi_dmul>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4630      	mov	r0, r6
 8006282:	4639      	mov	r1, r7
 8006284:	f7fa f800 	bl	8000288 <__aeabi_dsub>
 8006288:	9e01      	ldr	r6, [sp, #4]
 800628a:	9f04      	ldr	r7, [sp, #16]
 800628c:	3630      	adds	r6, #48	; 0x30
 800628e:	f805 6b01 	strb.w	r6, [r5], #1
 8006292:	9e00      	ldr	r6, [sp, #0]
 8006294:	1bae      	subs	r6, r5, r6
 8006296:	42b7      	cmp	r7, r6
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	d134      	bne.n	8006308 <_dtoa_r+0x708>
 800629e:	f7f9 fff5 	bl	800028c <__adddf3>
 80062a2:	4642      	mov	r2, r8
 80062a4:	464b      	mov	r3, r9
 80062a6:	4606      	mov	r6, r0
 80062a8:	460f      	mov	r7, r1
 80062aa:	f7fa fc35 	bl	8000b18 <__aeabi_dcmpgt>
 80062ae:	b9c8      	cbnz	r0, 80062e4 <_dtoa_r+0x6e4>
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	4630      	mov	r0, r6
 80062b6:	4639      	mov	r1, r7
 80062b8:	f7fa fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 80062bc:	b110      	cbz	r0, 80062c4 <_dtoa_r+0x6c4>
 80062be:	9b01      	ldr	r3, [sp, #4]
 80062c0:	07db      	lsls	r3, r3, #31
 80062c2:	d40f      	bmi.n	80062e4 <_dtoa_r+0x6e4>
 80062c4:	4651      	mov	r1, sl
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 fbcc 	bl	8006a64 <_Bfree>
 80062cc:	2300      	movs	r3, #0
 80062ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062d0:	702b      	strb	r3, [r5, #0]
 80062d2:	f10b 0301 	add.w	r3, fp, #1
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f43f ace2 	beq.w	8005ca4 <_dtoa_r+0xa4>
 80062e0:	601d      	str	r5, [r3, #0]
 80062e2:	e4df      	b.n	8005ca4 <_dtoa_r+0xa4>
 80062e4:	465f      	mov	r7, fp
 80062e6:	462b      	mov	r3, r5
 80062e8:	461d      	mov	r5, r3
 80062ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062ee:	2a39      	cmp	r2, #57	; 0x39
 80062f0:	d106      	bne.n	8006300 <_dtoa_r+0x700>
 80062f2:	9a00      	ldr	r2, [sp, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d1f7      	bne.n	80062e8 <_dtoa_r+0x6e8>
 80062f8:	9900      	ldr	r1, [sp, #0]
 80062fa:	2230      	movs	r2, #48	; 0x30
 80062fc:	3701      	adds	r7, #1
 80062fe:	700a      	strb	r2, [r1, #0]
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	3201      	adds	r2, #1
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	e790      	b.n	800622a <_dtoa_r+0x62a>
 8006308:	4ba3      	ldr	r3, [pc, #652]	; (8006598 <_dtoa_r+0x998>)
 800630a:	2200      	movs	r2, #0
 800630c:	f7fa f974 	bl	80005f8 <__aeabi_dmul>
 8006310:	2200      	movs	r2, #0
 8006312:	2300      	movs	r3, #0
 8006314:	4606      	mov	r6, r0
 8006316:	460f      	mov	r7, r1
 8006318:	f7fa fbd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800631c:	2800      	cmp	r0, #0
 800631e:	d09e      	beq.n	800625e <_dtoa_r+0x65e>
 8006320:	e7d0      	b.n	80062c4 <_dtoa_r+0x6c4>
 8006322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006324:	2a00      	cmp	r2, #0
 8006326:	f000 80ca 	beq.w	80064be <_dtoa_r+0x8be>
 800632a:	9a07      	ldr	r2, [sp, #28]
 800632c:	2a01      	cmp	r2, #1
 800632e:	f300 80ad 	bgt.w	800648c <_dtoa_r+0x88c>
 8006332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006334:	2a00      	cmp	r2, #0
 8006336:	f000 80a5 	beq.w	8006484 <_dtoa_r+0x884>
 800633a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800633e:	9e08      	ldr	r6, [sp, #32]
 8006340:	9d05      	ldr	r5, [sp, #20]
 8006342:	9a05      	ldr	r2, [sp, #20]
 8006344:	441a      	add	r2, r3
 8006346:	9205      	str	r2, [sp, #20]
 8006348:	9a06      	ldr	r2, [sp, #24]
 800634a:	2101      	movs	r1, #1
 800634c:	441a      	add	r2, r3
 800634e:	4620      	mov	r0, r4
 8006350:	9206      	str	r2, [sp, #24]
 8006352:	f000 fc3d 	bl	8006bd0 <__i2b>
 8006356:	4607      	mov	r7, r0
 8006358:	b165      	cbz	r5, 8006374 <_dtoa_r+0x774>
 800635a:	9b06      	ldr	r3, [sp, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	dd09      	ble.n	8006374 <_dtoa_r+0x774>
 8006360:	42ab      	cmp	r3, r5
 8006362:	9a05      	ldr	r2, [sp, #20]
 8006364:	bfa8      	it	ge
 8006366:	462b      	movge	r3, r5
 8006368:	1ad2      	subs	r2, r2, r3
 800636a:	9205      	str	r2, [sp, #20]
 800636c:	9a06      	ldr	r2, [sp, #24]
 800636e:	1aed      	subs	r5, r5, r3
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	9306      	str	r3, [sp, #24]
 8006374:	9b08      	ldr	r3, [sp, #32]
 8006376:	b1f3      	cbz	r3, 80063b6 <_dtoa_r+0x7b6>
 8006378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 80a3 	beq.w	80064c6 <_dtoa_r+0x8c6>
 8006380:	2e00      	cmp	r6, #0
 8006382:	dd10      	ble.n	80063a6 <_dtoa_r+0x7a6>
 8006384:	4639      	mov	r1, r7
 8006386:	4632      	mov	r2, r6
 8006388:	4620      	mov	r0, r4
 800638a:	f000 fce1 	bl	8006d50 <__pow5mult>
 800638e:	4652      	mov	r2, sl
 8006390:	4601      	mov	r1, r0
 8006392:	4607      	mov	r7, r0
 8006394:	4620      	mov	r0, r4
 8006396:	f000 fc31 	bl	8006bfc <__multiply>
 800639a:	4651      	mov	r1, sl
 800639c:	4680      	mov	r8, r0
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 fb60 	bl	8006a64 <_Bfree>
 80063a4:	46c2      	mov	sl, r8
 80063a6:	9b08      	ldr	r3, [sp, #32]
 80063a8:	1b9a      	subs	r2, r3, r6
 80063aa:	d004      	beq.n	80063b6 <_dtoa_r+0x7b6>
 80063ac:	4651      	mov	r1, sl
 80063ae:	4620      	mov	r0, r4
 80063b0:	f000 fcce 	bl	8006d50 <__pow5mult>
 80063b4:	4682      	mov	sl, r0
 80063b6:	2101      	movs	r1, #1
 80063b8:	4620      	mov	r0, r4
 80063ba:	f000 fc09 	bl	8006bd0 <__i2b>
 80063be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	4606      	mov	r6, r0
 80063c4:	f340 8081 	ble.w	80064ca <_dtoa_r+0x8ca>
 80063c8:	461a      	mov	r2, r3
 80063ca:	4601      	mov	r1, r0
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 fcbf 	bl	8006d50 <__pow5mult>
 80063d2:	9b07      	ldr	r3, [sp, #28]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	4606      	mov	r6, r0
 80063d8:	dd7a      	ble.n	80064d0 <_dtoa_r+0x8d0>
 80063da:	f04f 0800 	mov.w	r8, #0
 80063de:	6933      	ldr	r3, [r6, #16]
 80063e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80063e4:	6918      	ldr	r0, [r3, #16]
 80063e6:	f000 fba5 	bl	8006b34 <__hi0bits>
 80063ea:	f1c0 0020 	rsb	r0, r0, #32
 80063ee:	9b06      	ldr	r3, [sp, #24]
 80063f0:	4418      	add	r0, r3
 80063f2:	f010 001f 	ands.w	r0, r0, #31
 80063f6:	f000 8094 	beq.w	8006522 <_dtoa_r+0x922>
 80063fa:	f1c0 0320 	rsb	r3, r0, #32
 80063fe:	2b04      	cmp	r3, #4
 8006400:	f340 8085 	ble.w	800650e <_dtoa_r+0x90e>
 8006404:	9b05      	ldr	r3, [sp, #20]
 8006406:	f1c0 001c 	rsb	r0, r0, #28
 800640a:	4403      	add	r3, r0
 800640c:	9305      	str	r3, [sp, #20]
 800640e:	9b06      	ldr	r3, [sp, #24]
 8006410:	4403      	add	r3, r0
 8006412:	4405      	add	r5, r0
 8006414:	9306      	str	r3, [sp, #24]
 8006416:	9b05      	ldr	r3, [sp, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	dd05      	ble.n	8006428 <_dtoa_r+0x828>
 800641c:	4651      	mov	r1, sl
 800641e:	461a      	mov	r2, r3
 8006420:	4620      	mov	r0, r4
 8006422:	f000 fcef 	bl	8006e04 <__lshift>
 8006426:	4682      	mov	sl, r0
 8006428:	9b06      	ldr	r3, [sp, #24]
 800642a:	2b00      	cmp	r3, #0
 800642c:	dd05      	ble.n	800643a <_dtoa_r+0x83a>
 800642e:	4631      	mov	r1, r6
 8006430:	461a      	mov	r2, r3
 8006432:	4620      	mov	r0, r4
 8006434:	f000 fce6 	bl	8006e04 <__lshift>
 8006438:	4606      	mov	r6, r0
 800643a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800643c:	2b00      	cmp	r3, #0
 800643e:	d072      	beq.n	8006526 <_dtoa_r+0x926>
 8006440:	4631      	mov	r1, r6
 8006442:	4650      	mov	r0, sl
 8006444:	f000 fd4a 	bl	8006edc <__mcmp>
 8006448:	2800      	cmp	r0, #0
 800644a:	da6c      	bge.n	8006526 <_dtoa_r+0x926>
 800644c:	2300      	movs	r3, #0
 800644e:	4651      	mov	r1, sl
 8006450:	220a      	movs	r2, #10
 8006452:	4620      	mov	r0, r4
 8006454:	f000 fb28 	bl	8006aa8 <__multadd>
 8006458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800645e:	4682      	mov	sl, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 81b0 	beq.w	80067c6 <_dtoa_r+0xbc6>
 8006466:	2300      	movs	r3, #0
 8006468:	4639      	mov	r1, r7
 800646a:	220a      	movs	r2, #10
 800646c:	4620      	mov	r0, r4
 800646e:	f000 fb1b 	bl	8006aa8 <__multadd>
 8006472:	9b01      	ldr	r3, [sp, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	4607      	mov	r7, r0
 8006478:	f300 8096 	bgt.w	80065a8 <_dtoa_r+0x9a8>
 800647c:	9b07      	ldr	r3, [sp, #28]
 800647e:	2b02      	cmp	r3, #2
 8006480:	dc59      	bgt.n	8006536 <_dtoa_r+0x936>
 8006482:	e091      	b.n	80065a8 <_dtoa_r+0x9a8>
 8006484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006486:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800648a:	e758      	b.n	800633e <_dtoa_r+0x73e>
 800648c:	9b04      	ldr	r3, [sp, #16]
 800648e:	1e5e      	subs	r6, r3, #1
 8006490:	9b08      	ldr	r3, [sp, #32]
 8006492:	42b3      	cmp	r3, r6
 8006494:	bfbf      	itttt	lt
 8006496:	9b08      	ldrlt	r3, [sp, #32]
 8006498:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800649a:	9608      	strlt	r6, [sp, #32]
 800649c:	1af3      	sublt	r3, r6, r3
 800649e:	bfb4      	ite	lt
 80064a0:	18d2      	addlt	r2, r2, r3
 80064a2:	1b9e      	subge	r6, r3, r6
 80064a4:	9b04      	ldr	r3, [sp, #16]
 80064a6:	bfbc      	itt	lt
 80064a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80064aa:	2600      	movlt	r6, #0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bfb7      	itett	lt
 80064b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80064b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80064b8:	1a9d      	sublt	r5, r3, r2
 80064ba:	2300      	movlt	r3, #0
 80064bc:	e741      	b.n	8006342 <_dtoa_r+0x742>
 80064be:	9e08      	ldr	r6, [sp, #32]
 80064c0:	9d05      	ldr	r5, [sp, #20]
 80064c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80064c4:	e748      	b.n	8006358 <_dtoa_r+0x758>
 80064c6:	9a08      	ldr	r2, [sp, #32]
 80064c8:	e770      	b.n	80063ac <_dtoa_r+0x7ac>
 80064ca:	9b07      	ldr	r3, [sp, #28]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	dc19      	bgt.n	8006504 <_dtoa_r+0x904>
 80064d0:	9b02      	ldr	r3, [sp, #8]
 80064d2:	b9bb      	cbnz	r3, 8006504 <_dtoa_r+0x904>
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064da:	b99b      	cbnz	r3, 8006504 <_dtoa_r+0x904>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064e2:	0d1b      	lsrs	r3, r3, #20
 80064e4:	051b      	lsls	r3, r3, #20
 80064e6:	b183      	cbz	r3, 800650a <_dtoa_r+0x90a>
 80064e8:	9b05      	ldr	r3, [sp, #20]
 80064ea:	3301      	adds	r3, #1
 80064ec:	9305      	str	r3, [sp, #20]
 80064ee:	9b06      	ldr	r3, [sp, #24]
 80064f0:	3301      	adds	r3, #1
 80064f2:	9306      	str	r3, [sp, #24]
 80064f4:	f04f 0801 	mov.w	r8, #1
 80064f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f47f af6f 	bne.w	80063de <_dtoa_r+0x7de>
 8006500:	2001      	movs	r0, #1
 8006502:	e774      	b.n	80063ee <_dtoa_r+0x7ee>
 8006504:	f04f 0800 	mov.w	r8, #0
 8006508:	e7f6      	b.n	80064f8 <_dtoa_r+0x8f8>
 800650a:	4698      	mov	r8, r3
 800650c:	e7f4      	b.n	80064f8 <_dtoa_r+0x8f8>
 800650e:	d082      	beq.n	8006416 <_dtoa_r+0x816>
 8006510:	9a05      	ldr	r2, [sp, #20]
 8006512:	331c      	adds	r3, #28
 8006514:	441a      	add	r2, r3
 8006516:	9205      	str	r2, [sp, #20]
 8006518:	9a06      	ldr	r2, [sp, #24]
 800651a:	441a      	add	r2, r3
 800651c:	441d      	add	r5, r3
 800651e:	9206      	str	r2, [sp, #24]
 8006520:	e779      	b.n	8006416 <_dtoa_r+0x816>
 8006522:	4603      	mov	r3, r0
 8006524:	e7f4      	b.n	8006510 <_dtoa_r+0x910>
 8006526:	9b04      	ldr	r3, [sp, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	dc37      	bgt.n	800659c <_dtoa_r+0x99c>
 800652c:	9b07      	ldr	r3, [sp, #28]
 800652e:	2b02      	cmp	r3, #2
 8006530:	dd34      	ble.n	800659c <_dtoa_r+0x99c>
 8006532:	9b04      	ldr	r3, [sp, #16]
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	b963      	cbnz	r3, 8006554 <_dtoa_r+0x954>
 800653a:	4631      	mov	r1, r6
 800653c:	2205      	movs	r2, #5
 800653e:	4620      	mov	r0, r4
 8006540:	f000 fab2 	bl	8006aa8 <__multadd>
 8006544:	4601      	mov	r1, r0
 8006546:	4606      	mov	r6, r0
 8006548:	4650      	mov	r0, sl
 800654a:	f000 fcc7 	bl	8006edc <__mcmp>
 800654e:	2800      	cmp	r0, #0
 8006550:	f73f adbb 	bgt.w	80060ca <_dtoa_r+0x4ca>
 8006554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006556:	9d00      	ldr	r5, [sp, #0]
 8006558:	ea6f 0b03 	mvn.w	fp, r3
 800655c:	f04f 0800 	mov.w	r8, #0
 8006560:	4631      	mov	r1, r6
 8006562:	4620      	mov	r0, r4
 8006564:	f000 fa7e 	bl	8006a64 <_Bfree>
 8006568:	2f00      	cmp	r7, #0
 800656a:	f43f aeab 	beq.w	80062c4 <_dtoa_r+0x6c4>
 800656e:	f1b8 0f00 	cmp.w	r8, #0
 8006572:	d005      	beq.n	8006580 <_dtoa_r+0x980>
 8006574:	45b8      	cmp	r8, r7
 8006576:	d003      	beq.n	8006580 <_dtoa_r+0x980>
 8006578:	4641      	mov	r1, r8
 800657a:	4620      	mov	r0, r4
 800657c:	f000 fa72 	bl	8006a64 <_Bfree>
 8006580:	4639      	mov	r1, r7
 8006582:	4620      	mov	r0, r4
 8006584:	f000 fa6e 	bl	8006a64 <_Bfree>
 8006588:	e69c      	b.n	80062c4 <_dtoa_r+0x6c4>
 800658a:	2600      	movs	r6, #0
 800658c:	4637      	mov	r7, r6
 800658e:	e7e1      	b.n	8006554 <_dtoa_r+0x954>
 8006590:	46bb      	mov	fp, r7
 8006592:	4637      	mov	r7, r6
 8006594:	e599      	b.n	80060ca <_dtoa_r+0x4ca>
 8006596:	bf00      	nop
 8006598:	40240000 	.word	0x40240000
 800659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 80c8 	beq.w	8006734 <_dtoa_r+0xb34>
 80065a4:	9b04      	ldr	r3, [sp, #16]
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	2d00      	cmp	r5, #0
 80065aa:	dd05      	ble.n	80065b8 <_dtoa_r+0x9b8>
 80065ac:	4639      	mov	r1, r7
 80065ae:	462a      	mov	r2, r5
 80065b0:	4620      	mov	r0, r4
 80065b2:	f000 fc27 	bl	8006e04 <__lshift>
 80065b6:	4607      	mov	r7, r0
 80065b8:	f1b8 0f00 	cmp.w	r8, #0
 80065bc:	d05b      	beq.n	8006676 <_dtoa_r+0xa76>
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 fa0f 	bl	80069e4 <_Balloc>
 80065c6:	4605      	mov	r5, r0
 80065c8:	b928      	cbnz	r0, 80065d6 <_dtoa_r+0x9d6>
 80065ca:	4b83      	ldr	r3, [pc, #524]	; (80067d8 <_dtoa_r+0xbd8>)
 80065cc:	4602      	mov	r2, r0
 80065ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80065d2:	f7ff bb2e 	b.w	8005c32 <_dtoa_r+0x32>
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	3202      	adds	r2, #2
 80065da:	0092      	lsls	r2, r2, #2
 80065dc:	f107 010c 	add.w	r1, r7, #12
 80065e0:	300c      	adds	r0, #12
 80065e2:	f000 ffab 	bl	800753c <memcpy>
 80065e6:	2201      	movs	r2, #1
 80065e8:	4629      	mov	r1, r5
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 fc0a 	bl	8006e04 <__lshift>
 80065f0:	9b00      	ldr	r3, [sp, #0]
 80065f2:	3301      	adds	r3, #1
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065fa:	4413      	add	r3, r2
 80065fc:	9308      	str	r3, [sp, #32]
 80065fe:	9b02      	ldr	r3, [sp, #8]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	46b8      	mov	r8, r7
 8006606:	9306      	str	r3, [sp, #24]
 8006608:	4607      	mov	r7, r0
 800660a:	9b04      	ldr	r3, [sp, #16]
 800660c:	4631      	mov	r1, r6
 800660e:	3b01      	subs	r3, #1
 8006610:	4650      	mov	r0, sl
 8006612:	9301      	str	r3, [sp, #4]
 8006614:	f7ff fa69 	bl	8005aea <quorem>
 8006618:	4641      	mov	r1, r8
 800661a:	9002      	str	r0, [sp, #8]
 800661c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006620:	4650      	mov	r0, sl
 8006622:	f000 fc5b 	bl	8006edc <__mcmp>
 8006626:	463a      	mov	r2, r7
 8006628:	9005      	str	r0, [sp, #20]
 800662a:	4631      	mov	r1, r6
 800662c:	4620      	mov	r0, r4
 800662e:	f000 fc71 	bl	8006f14 <__mdiff>
 8006632:	68c2      	ldr	r2, [r0, #12]
 8006634:	4605      	mov	r5, r0
 8006636:	bb02      	cbnz	r2, 800667a <_dtoa_r+0xa7a>
 8006638:	4601      	mov	r1, r0
 800663a:	4650      	mov	r0, sl
 800663c:	f000 fc4e 	bl	8006edc <__mcmp>
 8006640:	4602      	mov	r2, r0
 8006642:	4629      	mov	r1, r5
 8006644:	4620      	mov	r0, r4
 8006646:	9209      	str	r2, [sp, #36]	; 0x24
 8006648:	f000 fa0c 	bl	8006a64 <_Bfree>
 800664c:	9b07      	ldr	r3, [sp, #28]
 800664e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006650:	9d04      	ldr	r5, [sp, #16]
 8006652:	ea43 0102 	orr.w	r1, r3, r2
 8006656:	9b06      	ldr	r3, [sp, #24]
 8006658:	4319      	orrs	r1, r3
 800665a:	d110      	bne.n	800667e <_dtoa_r+0xa7e>
 800665c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006660:	d029      	beq.n	80066b6 <_dtoa_r+0xab6>
 8006662:	9b05      	ldr	r3, [sp, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	dd02      	ble.n	800666e <_dtoa_r+0xa6e>
 8006668:	9b02      	ldr	r3, [sp, #8]
 800666a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800666e:	9b01      	ldr	r3, [sp, #4]
 8006670:	f883 9000 	strb.w	r9, [r3]
 8006674:	e774      	b.n	8006560 <_dtoa_r+0x960>
 8006676:	4638      	mov	r0, r7
 8006678:	e7ba      	b.n	80065f0 <_dtoa_r+0x9f0>
 800667a:	2201      	movs	r2, #1
 800667c:	e7e1      	b.n	8006642 <_dtoa_r+0xa42>
 800667e:	9b05      	ldr	r3, [sp, #20]
 8006680:	2b00      	cmp	r3, #0
 8006682:	db04      	blt.n	800668e <_dtoa_r+0xa8e>
 8006684:	9907      	ldr	r1, [sp, #28]
 8006686:	430b      	orrs	r3, r1
 8006688:	9906      	ldr	r1, [sp, #24]
 800668a:	430b      	orrs	r3, r1
 800668c:	d120      	bne.n	80066d0 <_dtoa_r+0xad0>
 800668e:	2a00      	cmp	r2, #0
 8006690:	dded      	ble.n	800666e <_dtoa_r+0xa6e>
 8006692:	4651      	mov	r1, sl
 8006694:	2201      	movs	r2, #1
 8006696:	4620      	mov	r0, r4
 8006698:	f000 fbb4 	bl	8006e04 <__lshift>
 800669c:	4631      	mov	r1, r6
 800669e:	4682      	mov	sl, r0
 80066a0:	f000 fc1c 	bl	8006edc <__mcmp>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	dc03      	bgt.n	80066b0 <_dtoa_r+0xab0>
 80066a8:	d1e1      	bne.n	800666e <_dtoa_r+0xa6e>
 80066aa:	f019 0f01 	tst.w	r9, #1
 80066ae:	d0de      	beq.n	800666e <_dtoa_r+0xa6e>
 80066b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80066b4:	d1d8      	bne.n	8006668 <_dtoa_r+0xa68>
 80066b6:	9a01      	ldr	r2, [sp, #4]
 80066b8:	2339      	movs	r3, #57	; 0x39
 80066ba:	7013      	strb	r3, [r2, #0]
 80066bc:	462b      	mov	r3, r5
 80066be:	461d      	mov	r5, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80066c6:	2a39      	cmp	r2, #57	; 0x39
 80066c8:	d06c      	beq.n	80067a4 <_dtoa_r+0xba4>
 80066ca:	3201      	adds	r2, #1
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	e747      	b.n	8006560 <_dtoa_r+0x960>
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	dd07      	ble.n	80066e4 <_dtoa_r+0xae4>
 80066d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80066d8:	d0ed      	beq.n	80066b6 <_dtoa_r+0xab6>
 80066da:	9a01      	ldr	r2, [sp, #4]
 80066dc:	f109 0301 	add.w	r3, r9, #1
 80066e0:	7013      	strb	r3, [r2, #0]
 80066e2:	e73d      	b.n	8006560 <_dtoa_r+0x960>
 80066e4:	9b04      	ldr	r3, [sp, #16]
 80066e6:	9a08      	ldr	r2, [sp, #32]
 80066e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d043      	beq.n	8006778 <_dtoa_r+0xb78>
 80066f0:	4651      	mov	r1, sl
 80066f2:	2300      	movs	r3, #0
 80066f4:	220a      	movs	r2, #10
 80066f6:	4620      	mov	r0, r4
 80066f8:	f000 f9d6 	bl	8006aa8 <__multadd>
 80066fc:	45b8      	cmp	r8, r7
 80066fe:	4682      	mov	sl, r0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	f04f 020a 	mov.w	r2, #10
 8006708:	4641      	mov	r1, r8
 800670a:	4620      	mov	r0, r4
 800670c:	d107      	bne.n	800671e <_dtoa_r+0xb1e>
 800670e:	f000 f9cb 	bl	8006aa8 <__multadd>
 8006712:	4680      	mov	r8, r0
 8006714:	4607      	mov	r7, r0
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	3301      	adds	r3, #1
 800671a:	9304      	str	r3, [sp, #16]
 800671c:	e775      	b.n	800660a <_dtoa_r+0xa0a>
 800671e:	f000 f9c3 	bl	8006aa8 <__multadd>
 8006722:	4639      	mov	r1, r7
 8006724:	4680      	mov	r8, r0
 8006726:	2300      	movs	r3, #0
 8006728:	220a      	movs	r2, #10
 800672a:	4620      	mov	r0, r4
 800672c:	f000 f9bc 	bl	8006aa8 <__multadd>
 8006730:	4607      	mov	r7, r0
 8006732:	e7f0      	b.n	8006716 <_dtoa_r+0xb16>
 8006734:	9b04      	ldr	r3, [sp, #16]
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	9d00      	ldr	r5, [sp, #0]
 800673a:	4631      	mov	r1, r6
 800673c:	4650      	mov	r0, sl
 800673e:	f7ff f9d4 	bl	8005aea <quorem>
 8006742:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006746:	9b00      	ldr	r3, [sp, #0]
 8006748:	f805 9b01 	strb.w	r9, [r5], #1
 800674c:	1aea      	subs	r2, r5, r3
 800674e:	9b01      	ldr	r3, [sp, #4]
 8006750:	4293      	cmp	r3, r2
 8006752:	dd07      	ble.n	8006764 <_dtoa_r+0xb64>
 8006754:	4651      	mov	r1, sl
 8006756:	2300      	movs	r3, #0
 8006758:	220a      	movs	r2, #10
 800675a:	4620      	mov	r0, r4
 800675c:	f000 f9a4 	bl	8006aa8 <__multadd>
 8006760:	4682      	mov	sl, r0
 8006762:	e7ea      	b.n	800673a <_dtoa_r+0xb3a>
 8006764:	9b01      	ldr	r3, [sp, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	bfc8      	it	gt
 800676a:	461d      	movgt	r5, r3
 800676c:	9b00      	ldr	r3, [sp, #0]
 800676e:	bfd8      	it	le
 8006770:	2501      	movle	r5, #1
 8006772:	441d      	add	r5, r3
 8006774:	f04f 0800 	mov.w	r8, #0
 8006778:	4651      	mov	r1, sl
 800677a:	2201      	movs	r2, #1
 800677c:	4620      	mov	r0, r4
 800677e:	f000 fb41 	bl	8006e04 <__lshift>
 8006782:	4631      	mov	r1, r6
 8006784:	4682      	mov	sl, r0
 8006786:	f000 fba9 	bl	8006edc <__mcmp>
 800678a:	2800      	cmp	r0, #0
 800678c:	dc96      	bgt.n	80066bc <_dtoa_r+0xabc>
 800678e:	d102      	bne.n	8006796 <_dtoa_r+0xb96>
 8006790:	f019 0f01 	tst.w	r9, #1
 8006794:	d192      	bne.n	80066bc <_dtoa_r+0xabc>
 8006796:	462b      	mov	r3, r5
 8006798:	461d      	mov	r5, r3
 800679a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800679e:	2a30      	cmp	r2, #48	; 0x30
 80067a0:	d0fa      	beq.n	8006798 <_dtoa_r+0xb98>
 80067a2:	e6dd      	b.n	8006560 <_dtoa_r+0x960>
 80067a4:	9a00      	ldr	r2, [sp, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d189      	bne.n	80066be <_dtoa_r+0xabe>
 80067aa:	f10b 0b01 	add.w	fp, fp, #1
 80067ae:	2331      	movs	r3, #49	; 0x31
 80067b0:	e796      	b.n	80066e0 <_dtoa_r+0xae0>
 80067b2:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <_dtoa_r+0xbdc>)
 80067b4:	f7ff ba99 	b.w	8005cea <_dtoa_r+0xea>
 80067b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f47f aa6d 	bne.w	8005c9a <_dtoa_r+0x9a>
 80067c0:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <_dtoa_r+0xbe0>)
 80067c2:	f7ff ba92 	b.w	8005cea <_dtoa_r+0xea>
 80067c6:	9b01      	ldr	r3, [sp, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	dcb5      	bgt.n	8006738 <_dtoa_r+0xb38>
 80067cc:	9b07      	ldr	r3, [sp, #28]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	f73f aeb1 	bgt.w	8006536 <_dtoa_r+0x936>
 80067d4:	e7b0      	b.n	8006738 <_dtoa_r+0xb38>
 80067d6:	bf00      	nop
 80067d8:	08008879 	.word	0x08008879
 80067dc:	080087d9 	.word	0x080087d9
 80067e0:	080087fd 	.word	0x080087fd

080067e4 <_free_r>:
 80067e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067e6:	2900      	cmp	r1, #0
 80067e8:	d044      	beq.n	8006874 <_free_r+0x90>
 80067ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ee:	9001      	str	r0, [sp, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f1a1 0404 	sub.w	r4, r1, #4
 80067f6:	bfb8      	it	lt
 80067f8:	18e4      	addlt	r4, r4, r3
 80067fa:	f000 f8e7 	bl	80069cc <__malloc_lock>
 80067fe:	4a1e      	ldr	r2, [pc, #120]	; (8006878 <_free_r+0x94>)
 8006800:	9801      	ldr	r0, [sp, #4]
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	b933      	cbnz	r3, 8006814 <_free_r+0x30>
 8006806:	6063      	str	r3, [r4, #4]
 8006808:	6014      	str	r4, [r2, #0]
 800680a:	b003      	add	sp, #12
 800680c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006810:	f000 b8e2 	b.w	80069d8 <__malloc_unlock>
 8006814:	42a3      	cmp	r3, r4
 8006816:	d908      	bls.n	800682a <_free_r+0x46>
 8006818:	6825      	ldr	r5, [r4, #0]
 800681a:	1961      	adds	r1, r4, r5
 800681c:	428b      	cmp	r3, r1
 800681e:	bf01      	itttt	eq
 8006820:	6819      	ldreq	r1, [r3, #0]
 8006822:	685b      	ldreq	r3, [r3, #4]
 8006824:	1949      	addeq	r1, r1, r5
 8006826:	6021      	streq	r1, [r4, #0]
 8006828:	e7ed      	b.n	8006806 <_free_r+0x22>
 800682a:	461a      	mov	r2, r3
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	b10b      	cbz	r3, 8006834 <_free_r+0x50>
 8006830:	42a3      	cmp	r3, r4
 8006832:	d9fa      	bls.n	800682a <_free_r+0x46>
 8006834:	6811      	ldr	r1, [r2, #0]
 8006836:	1855      	adds	r5, r2, r1
 8006838:	42a5      	cmp	r5, r4
 800683a:	d10b      	bne.n	8006854 <_free_r+0x70>
 800683c:	6824      	ldr	r4, [r4, #0]
 800683e:	4421      	add	r1, r4
 8006840:	1854      	adds	r4, r2, r1
 8006842:	42a3      	cmp	r3, r4
 8006844:	6011      	str	r1, [r2, #0]
 8006846:	d1e0      	bne.n	800680a <_free_r+0x26>
 8006848:	681c      	ldr	r4, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	6053      	str	r3, [r2, #4]
 800684e:	440c      	add	r4, r1
 8006850:	6014      	str	r4, [r2, #0]
 8006852:	e7da      	b.n	800680a <_free_r+0x26>
 8006854:	d902      	bls.n	800685c <_free_r+0x78>
 8006856:	230c      	movs	r3, #12
 8006858:	6003      	str	r3, [r0, #0]
 800685a:	e7d6      	b.n	800680a <_free_r+0x26>
 800685c:	6825      	ldr	r5, [r4, #0]
 800685e:	1961      	adds	r1, r4, r5
 8006860:	428b      	cmp	r3, r1
 8006862:	bf04      	itt	eq
 8006864:	6819      	ldreq	r1, [r3, #0]
 8006866:	685b      	ldreq	r3, [r3, #4]
 8006868:	6063      	str	r3, [r4, #4]
 800686a:	bf04      	itt	eq
 800686c:	1949      	addeq	r1, r1, r5
 800686e:	6021      	streq	r1, [r4, #0]
 8006870:	6054      	str	r4, [r2, #4]
 8006872:	e7ca      	b.n	800680a <_free_r+0x26>
 8006874:	b003      	add	sp, #12
 8006876:	bd30      	pop	{r4, r5, pc}
 8006878:	200004a8 	.word	0x200004a8

0800687c <malloc>:
 800687c:	4b02      	ldr	r3, [pc, #8]	; (8006888 <malloc+0xc>)
 800687e:	4601      	mov	r1, r0
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	f000 b823 	b.w	80068cc <_malloc_r>
 8006886:	bf00      	nop
 8006888:	20000064 	.word	0x20000064

0800688c <sbrk_aligned>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4e0e      	ldr	r6, [pc, #56]	; (80068c8 <sbrk_aligned+0x3c>)
 8006890:	460c      	mov	r4, r1
 8006892:	6831      	ldr	r1, [r6, #0]
 8006894:	4605      	mov	r5, r0
 8006896:	b911      	cbnz	r1, 800689e <sbrk_aligned+0x12>
 8006898:	f000 fe40 	bl	800751c <_sbrk_r>
 800689c:	6030      	str	r0, [r6, #0]
 800689e:	4621      	mov	r1, r4
 80068a0:	4628      	mov	r0, r5
 80068a2:	f000 fe3b 	bl	800751c <_sbrk_r>
 80068a6:	1c43      	adds	r3, r0, #1
 80068a8:	d00a      	beq.n	80068c0 <sbrk_aligned+0x34>
 80068aa:	1cc4      	adds	r4, r0, #3
 80068ac:	f024 0403 	bic.w	r4, r4, #3
 80068b0:	42a0      	cmp	r0, r4
 80068b2:	d007      	beq.n	80068c4 <sbrk_aligned+0x38>
 80068b4:	1a21      	subs	r1, r4, r0
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 fe30 	bl	800751c <_sbrk_r>
 80068bc:	3001      	adds	r0, #1
 80068be:	d101      	bne.n	80068c4 <sbrk_aligned+0x38>
 80068c0:	f04f 34ff 	mov.w	r4, #4294967295
 80068c4:	4620      	mov	r0, r4
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	200004ac 	.word	0x200004ac

080068cc <_malloc_r>:
 80068cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d0:	1ccd      	adds	r5, r1, #3
 80068d2:	f025 0503 	bic.w	r5, r5, #3
 80068d6:	3508      	adds	r5, #8
 80068d8:	2d0c      	cmp	r5, #12
 80068da:	bf38      	it	cc
 80068dc:	250c      	movcc	r5, #12
 80068de:	2d00      	cmp	r5, #0
 80068e0:	4607      	mov	r7, r0
 80068e2:	db01      	blt.n	80068e8 <_malloc_r+0x1c>
 80068e4:	42a9      	cmp	r1, r5
 80068e6:	d905      	bls.n	80068f4 <_malloc_r+0x28>
 80068e8:	230c      	movs	r3, #12
 80068ea:	603b      	str	r3, [r7, #0]
 80068ec:	2600      	movs	r6, #0
 80068ee:	4630      	mov	r0, r6
 80068f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80069c8 <_malloc_r+0xfc>
 80068f8:	f000 f868 	bl	80069cc <__malloc_lock>
 80068fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006900:	461c      	mov	r4, r3
 8006902:	bb5c      	cbnz	r4, 800695c <_malloc_r+0x90>
 8006904:	4629      	mov	r1, r5
 8006906:	4638      	mov	r0, r7
 8006908:	f7ff ffc0 	bl	800688c <sbrk_aligned>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	4604      	mov	r4, r0
 8006910:	d155      	bne.n	80069be <_malloc_r+0xf2>
 8006912:	f8d8 4000 	ldr.w	r4, [r8]
 8006916:	4626      	mov	r6, r4
 8006918:	2e00      	cmp	r6, #0
 800691a:	d145      	bne.n	80069a8 <_malloc_r+0xdc>
 800691c:	2c00      	cmp	r4, #0
 800691e:	d048      	beq.n	80069b2 <_malloc_r+0xe6>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	4631      	mov	r1, r6
 8006924:	4638      	mov	r0, r7
 8006926:	eb04 0903 	add.w	r9, r4, r3
 800692a:	f000 fdf7 	bl	800751c <_sbrk_r>
 800692e:	4581      	cmp	r9, r0
 8006930:	d13f      	bne.n	80069b2 <_malloc_r+0xe6>
 8006932:	6821      	ldr	r1, [r4, #0]
 8006934:	1a6d      	subs	r5, r5, r1
 8006936:	4629      	mov	r1, r5
 8006938:	4638      	mov	r0, r7
 800693a:	f7ff ffa7 	bl	800688c <sbrk_aligned>
 800693e:	3001      	adds	r0, #1
 8006940:	d037      	beq.n	80069b2 <_malloc_r+0xe6>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	442b      	add	r3, r5
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	f8d8 3000 	ldr.w	r3, [r8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d038      	beq.n	80069c2 <_malloc_r+0xf6>
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	42a2      	cmp	r2, r4
 8006954:	d12b      	bne.n	80069ae <_malloc_r+0xe2>
 8006956:	2200      	movs	r2, #0
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	e00f      	b.n	800697c <_malloc_r+0xb0>
 800695c:	6822      	ldr	r2, [r4, #0]
 800695e:	1b52      	subs	r2, r2, r5
 8006960:	d41f      	bmi.n	80069a2 <_malloc_r+0xd6>
 8006962:	2a0b      	cmp	r2, #11
 8006964:	d917      	bls.n	8006996 <_malloc_r+0xca>
 8006966:	1961      	adds	r1, r4, r5
 8006968:	42a3      	cmp	r3, r4
 800696a:	6025      	str	r5, [r4, #0]
 800696c:	bf18      	it	ne
 800696e:	6059      	strne	r1, [r3, #4]
 8006970:	6863      	ldr	r3, [r4, #4]
 8006972:	bf08      	it	eq
 8006974:	f8c8 1000 	streq.w	r1, [r8]
 8006978:	5162      	str	r2, [r4, r5]
 800697a:	604b      	str	r3, [r1, #4]
 800697c:	4638      	mov	r0, r7
 800697e:	f104 060b 	add.w	r6, r4, #11
 8006982:	f000 f829 	bl	80069d8 <__malloc_unlock>
 8006986:	f026 0607 	bic.w	r6, r6, #7
 800698a:	1d23      	adds	r3, r4, #4
 800698c:	1af2      	subs	r2, r6, r3
 800698e:	d0ae      	beq.n	80068ee <_malloc_r+0x22>
 8006990:	1b9b      	subs	r3, r3, r6
 8006992:	50a3      	str	r3, [r4, r2]
 8006994:	e7ab      	b.n	80068ee <_malloc_r+0x22>
 8006996:	42a3      	cmp	r3, r4
 8006998:	6862      	ldr	r2, [r4, #4]
 800699a:	d1dd      	bne.n	8006958 <_malloc_r+0x8c>
 800699c:	f8c8 2000 	str.w	r2, [r8]
 80069a0:	e7ec      	b.n	800697c <_malloc_r+0xb0>
 80069a2:	4623      	mov	r3, r4
 80069a4:	6864      	ldr	r4, [r4, #4]
 80069a6:	e7ac      	b.n	8006902 <_malloc_r+0x36>
 80069a8:	4634      	mov	r4, r6
 80069aa:	6876      	ldr	r6, [r6, #4]
 80069ac:	e7b4      	b.n	8006918 <_malloc_r+0x4c>
 80069ae:	4613      	mov	r3, r2
 80069b0:	e7cc      	b.n	800694c <_malloc_r+0x80>
 80069b2:	230c      	movs	r3, #12
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	4638      	mov	r0, r7
 80069b8:	f000 f80e 	bl	80069d8 <__malloc_unlock>
 80069bc:	e797      	b.n	80068ee <_malloc_r+0x22>
 80069be:	6025      	str	r5, [r4, #0]
 80069c0:	e7dc      	b.n	800697c <_malloc_r+0xb0>
 80069c2:	605b      	str	r3, [r3, #4]
 80069c4:	deff      	udf	#255	; 0xff
 80069c6:	bf00      	nop
 80069c8:	200004a8 	.word	0x200004a8

080069cc <__malloc_lock>:
 80069cc:	4801      	ldr	r0, [pc, #4]	; (80069d4 <__malloc_lock+0x8>)
 80069ce:	f7ff b88a 	b.w	8005ae6 <__retarget_lock_acquire_recursive>
 80069d2:	bf00      	nop
 80069d4:	200004a4 	.word	0x200004a4

080069d8 <__malloc_unlock>:
 80069d8:	4801      	ldr	r0, [pc, #4]	; (80069e0 <__malloc_unlock+0x8>)
 80069da:	f7ff b885 	b.w	8005ae8 <__retarget_lock_release_recursive>
 80069de:	bf00      	nop
 80069e0:	200004a4 	.word	0x200004a4

080069e4 <_Balloc>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	69c6      	ldr	r6, [r0, #28]
 80069e8:	4604      	mov	r4, r0
 80069ea:	460d      	mov	r5, r1
 80069ec:	b976      	cbnz	r6, 8006a0c <_Balloc+0x28>
 80069ee:	2010      	movs	r0, #16
 80069f0:	f7ff ff44 	bl	800687c <malloc>
 80069f4:	4602      	mov	r2, r0
 80069f6:	61e0      	str	r0, [r4, #28]
 80069f8:	b920      	cbnz	r0, 8006a04 <_Balloc+0x20>
 80069fa:	4b18      	ldr	r3, [pc, #96]	; (8006a5c <_Balloc+0x78>)
 80069fc:	4818      	ldr	r0, [pc, #96]	; (8006a60 <_Balloc+0x7c>)
 80069fe:	216b      	movs	r1, #107	; 0x6b
 8006a00:	f000 fdaa 	bl	8007558 <__assert_func>
 8006a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a08:	6006      	str	r6, [r0, #0]
 8006a0a:	60c6      	str	r6, [r0, #12]
 8006a0c:	69e6      	ldr	r6, [r4, #28]
 8006a0e:	68f3      	ldr	r3, [r6, #12]
 8006a10:	b183      	cbz	r3, 8006a34 <_Balloc+0x50>
 8006a12:	69e3      	ldr	r3, [r4, #28]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a1a:	b9b8      	cbnz	r0, 8006a4c <_Balloc+0x68>
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006a22:	1d72      	adds	r2, r6, #5
 8006a24:	0092      	lsls	r2, r2, #2
 8006a26:	4620      	mov	r0, r4
 8006a28:	f000 fdb4 	bl	8007594 <_calloc_r>
 8006a2c:	b160      	cbz	r0, 8006a48 <_Balloc+0x64>
 8006a2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a32:	e00e      	b.n	8006a52 <_Balloc+0x6e>
 8006a34:	2221      	movs	r2, #33	; 0x21
 8006a36:	2104      	movs	r1, #4
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fdab 	bl	8007594 <_calloc_r>
 8006a3e:	69e3      	ldr	r3, [r4, #28]
 8006a40:	60f0      	str	r0, [r6, #12]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e4      	bne.n	8006a12 <_Balloc+0x2e>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	6802      	ldr	r2, [r0, #0]
 8006a4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a52:	2300      	movs	r3, #0
 8006a54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a58:	e7f7      	b.n	8006a4a <_Balloc+0x66>
 8006a5a:	bf00      	nop
 8006a5c:	0800880a 	.word	0x0800880a
 8006a60:	0800888a 	.word	0x0800888a

08006a64 <_Bfree>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	69c6      	ldr	r6, [r0, #28]
 8006a68:	4605      	mov	r5, r0
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	b976      	cbnz	r6, 8006a8c <_Bfree+0x28>
 8006a6e:	2010      	movs	r0, #16
 8006a70:	f7ff ff04 	bl	800687c <malloc>
 8006a74:	4602      	mov	r2, r0
 8006a76:	61e8      	str	r0, [r5, #28]
 8006a78:	b920      	cbnz	r0, 8006a84 <_Bfree+0x20>
 8006a7a:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <_Bfree+0x3c>)
 8006a7c:	4809      	ldr	r0, [pc, #36]	; (8006aa4 <_Bfree+0x40>)
 8006a7e:	218f      	movs	r1, #143	; 0x8f
 8006a80:	f000 fd6a 	bl	8007558 <__assert_func>
 8006a84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a88:	6006      	str	r6, [r0, #0]
 8006a8a:	60c6      	str	r6, [r0, #12]
 8006a8c:	b13c      	cbz	r4, 8006a9e <_Bfree+0x3a>
 8006a8e:	69eb      	ldr	r3, [r5, #28]
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a98:	6021      	str	r1, [r4, #0]
 8006a9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	0800880a 	.word	0x0800880a
 8006aa4:	0800888a 	.word	0x0800888a

08006aa8 <__multadd>:
 8006aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aac:	690d      	ldr	r5, [r1, #16]
 8006aae:	4607      	mov	r7, r0
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	461e      	mov	r6, r3
 8006ab4:	f101 0c14 	add.w	ip, r1, #20
 8006ab8:	2000      	movs	r0, #0
 8006aba:	f8dc 3000 	ldr.w	r3, [ip]
 8006abe:	b299      	uxth	r1, r3
 8006ac0:	fb02 6101 	mla	r1, r2, r1, r6
 8006ac4:	0c1e      	lsrs	r6, r3, #16
 8006ac6:	0c0b      	lsrs	r3, r1, #16
 8006ac8:	fb02 3306 	mla	r3, r2, r6, r3
 8006acc:	b289      	uxth	r1, r1
 8006ace:	3001      	adds	r0, #1
 8006ad0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ad4:	4285      	cmp	r5, r0
 8006ad6:	f84c 1b04 	str.w	r1, [ip], #4
 8006ada:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ade:	dcec      	bgt.n	8006aba <__multadd+0x12>
 8006ae0:	b30e      	cbz	r6, 8006b26 <__multadd+0x7e>
 8006ae2:	68a3      	ldr	r3, [r4, #8]
 8006ae4:	42ab      	cmp	r3, r5
 8006ae6:	dc19      	bgt.n	8006b1c <__multadd+0x74>
 8006ae8:	6861      	ldr	r1, [r4, #4]
 8006aea:	4638      	mov	r0, r7
 8006aec:	3101      	adds	r1, #1
 8006aee:	f7ff ff79 	bl	80069e4 <_Balloc>
 8006af2:	4680      	mov	r8, r0
 8006af4:	b928      	cbnz	r0, 8006b02 <__multadd+0x5a>
 8006af6:	4602      	mov	r2, r0
 8006af8:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <__multadd+0x84>)
 8006afa:	480d      	ldr	r0, [pc, #52]	; (8006b30 <__multadd+0x88>)
 8006afc:	21ba      	movs	r1, #186	; 0xba
 8006afe:	f000 fd2b 	bl	8007558 <__assert_func>
 8006b02:	6922      	ldr	r2, [r4, #16]
 8006b04:	3202      	adds	r2, #2
 8006b06:	f104 010c 	add.w	r1, r4, #12
 8006b0a:	0092      	lsls	r2, r2, #2
 8006b0c:	300c      	adds	r0, #12
 8006b0e:	f000 fd15 	bl	800753c <memcpy>
 8006b12:	4621      	mov	r1, r4
 8006b14:	4638      	mov	r0, r7
 8006b16:	f7ff ffa5 	bl	8006a64 <_Bfree>
 8006b1a:	4644      	mov	r4, r8
 8006b1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b20:	3501      	adds	r5, #1
 8006b22:	615e      	str	r6, [r3, #20]
 8006b24:	6125      	str	r5, [r4, #16]
 8006b26:	4620      	mov	r0, r4
 8006b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2c:	08008879 	.word	0x08008879
 8006b30:	0800888a 	.word	0x0800888a

08006b34 <__hi0bits>:
 8006b34:	0c03      	lsrs	r3, r0, #16
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	b9d3      	cbnz	r3, 8006b70 <__hi0bits+0x3c>
 8006b3a:	0400      	lsls	r0, r0, #16
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b42:	bf04      	itt	eq
 8006b44:	0200      	lsleq	r0, r0, #8
 8006b46:	3308      	addeq	r3, #8
 8006b48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b4c:	bf04      	itt	eq
 8006b4e:	0100      	lsleq	r0, r0, #4
 8006b50:	3304      	addeq	r3, #4
 8006b52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b56:	bf04      	itt	eq
 8006b58:	0080      	lsleq	r0, r0, #2
 8006b5a:	3302      	addeq	r3, #2
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	db05      	blt.n	8006b6c <__hi0bits+0x38>
 8006b60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b64:	f103 0301 	add.w	r3, r3, #1
 8006b68:	bf08      	it	eq
 8006b6a:	2320      	moveq	r3, #32
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	4770      	bx	lr
 8006b70:	2300      	movs	r3, #0
 8006b72:	e7e4      	b.n	8006b3e <__hi0bits+0xa>

08006b74 <__lo0bits>:
 8006b74:	6803      	ldr	r3, [r0, #0]
 8006b76:	f013 0207 	ands.w	r2, r3, #7
 8006b7a:	d00c      	beq.n	8006b96 <__lo0bits+0x22>
 8006b7c:	07d9      	lsls	r1, r3, #31
 8006b7e:	d422      	bmi.n	8006bc6 <__lo0bits+0x52>
 8006b80:	079a      	lsls	r2, r3, #30
 8006b82:	bf49      	itett	mi
 8006b84:	085b      	lsrmi	r3, r3, #1
 8006b86:	089b      	lsrpl	r3, r3, #2
 8006b88:	6003      	strmi	r3, [r0, #0]
 8006b8a:	2201      	movmi	r2, #1
 8006b8c:	bf5c      	itt	pl
 8006b8e:	6003      	strpl	r3, [r0, #0]
 8006b90:	2202      	movpl	r2, #2
 8006b92:	4610      	mov	r0, r2
 8006b94:	4770      	bx	lr
 8006b96:	b299      	uxth	r1, r3
 8006b98:	b909      	cbnz	r1, 8006b9e <__lo0bits+0x2a>
 8006b9a:	0c1b      	lsrs	r3, r3, #16
 8006b9c:	2210      	movs	r2, #16
 8006b9e:	b2d9      	uxtb	r1, r3
 8006ba0:	b909      	cbnz	r1, 8006ba6 <__lo0bits+0x32>
 8006ba2:	3208      	adds	r2, #8
 8006ba4:	0a1b      	lsrs	r3, r3, #8
 8006ba6:	0719      	lsls	r1, r3, #28
 8006ba8:	bf04      	itt	eq
 8006baa:	091b      	lsreq	r3, r3, #4
 8006bac:	3204      	addeq	r2, #4
 8006bae:	0799      	lsls	r1, r3, #30
 8006bb0:	bf04      	itt	eq
 8006bb2:	089b      	lsreq	r3, r3, #2
 8006bb4:	3202      	addeq	r2, #2
 8006bb6:	07d9      	lsls	r1, r3, #31
 8006bb8:	d403      	bmi.n	8006bc2 <__lo0bits+0x4e>
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	f102 0201 	add.w	r2, r2, #1
 8006bc0:	d003      	beq.n	8006bca <__lo0bits+0x56>
 8006bc2:	6003      	str	r3, [r0, #0]
 8006bc4:	e7e5      	b.n	8006b92 <__lo0bits+0x1e>
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	e7e3      	b.n	8006b92 <__lo0bits+0x1e>
 8006bca:	2220      	movs	r2, #32
 8006bcc:	e7e1      	b.n	8006b92 <__lo0bits+0x1e>
	...

08006bd0 <__i2b>:
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	f7ff ff05 	bl	80069e4 <_Balloc>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	b928      	cbnz	r0, 8006bea <__i2b+0x1a>
 8006bde:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <__i2b+0x24>)
 8006be0:	4805      	ldr	r0, [pc, #20]	; (8006bf8 <__i2b+0x28>)
 8006be2:	f240 1145 	movw	r1, #325	; 0x145
 8006be6:	f000 fcb7 	bl	8007558 <__assert_func>
 8006bea:	2301      	movs	r3, #1
 8006bec:	6144      	str	r4, [r0, #20]
 8006bee:	6103      	str	r3, [r0, #16]
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	bf00      	nop
 8006bf4:	08008879 	.word	0x08008879
 8006bf8:	0800888a 	.word	0x0800888a

08006bfc <__multiply>:
 8006bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c00:	4691      	mov	r9, r2
 8006c02:	690a      	ldr	r2, [r1, #16]
 8006c04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	bfb8      	it	lt
 8006c0c:	460b      	movlt	r3, r1
 8006c0e:	460c      	mov	r4, r1
 8006c10:	bfbc      	itt	lt
 8006c12:	464c      	movlt	r4, r9
 8006c14:	4699      	movlt	r9, r3
 8006c16:	6927      	ldr	r7, [r4, #16]
 8006c18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c1c:	68a3      	ldr	r3, [r4, #8]
 8006c1e:	6861      	ldr	r1, [r4, #4]
 8006c20:	eb07 060a 	add.w	r6, r7, sl
 8006c24:	42b3      	cmp	r3, r6
 8006c26:	b085      	sub	sp, #20
 8006c28:	bfb8      	it	lt
 8006c2a:	3101      	addlt	r1, #1
 8006c2c:	f7ff feda 	bl	80069e4 <_Balloc>
 8006c30:	b930      	cbnz	r0, 8006c40 <__multiply+0x44>
 8006c32:	4602      	mov	r2, r0
 8006c34:	4b44      	ldr	r3, [pc, #272]	; (8006d48 <__multiply+0x14c>)
 8006c36:	4845      	ldr	r0, [pc, #276]	; (8006d4c <__multiply+0x150>)
 8006c38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006c3c:	f000 fc8c 	bl	8007558 <__assert_func>
 8006c40:	f100 0514 	add.w	r5, r0, #20
 8006c44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c48:	462b      	mov	r3, r5
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	4543      	cmp	r3, r8
 8006c4e:	d321      	bcc.n	8006c94 <__multiply+0x98>
 8006c50:	f104 0314 	add.w	r3, r4, #20
 8006c54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c58:	f109 0314 	add.w	r3, r9, #20
 8006c5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c60:	9202      	str	r2, [sp, #8]
 8006c62:	1b3a      	subs	r2, r7, r4
 8006c64:	3a15      	subs	r2, #21
 8006c66:	f022 0203 	bic.w	r2, r2, #3
 8006c6a:	3204      	adds	r2, #4
 8006c6c:	f104 0115 	add.w	r1, r4, #21
 8006c70:	428f      	cmp	r7, r1
 8006c72:	bf38      	it	cc
 8006c74:	2204      	movcc	r2, #4
 8006c76:	9201      	str	r2, [sp, #4]
 8006c78:	9a02      	ldr	r2, [sp, #8]
 8006c7a:	9303      	str	r3, [sp, #12]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d80c      	bhi.n	8006c9a <__multiply+0x9e>
 8006c80:	2e00      	cmp	r6, #0
 8006c82:	dd03      	ble.n	8006c8c <__multiply+0x90>
 8006c84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d05b      	beq.n	8006d44 <__multiply+0x148>
 8006c8c:	6106      	str	r6, [r0, #16]
 8006c8e:	b005      	add	sp, #20
 8006c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c94:	f843 2b04 	str.w	r2, [r3], #4
 8006c98:	e7d8      	b.n	8006c4c <__multiply+0x50>
 8006c9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c9e:	f1ba 0f00 	cmp.w	sl, #0
 8006ca2:	d024      	beq.n	8006cee <__multiply+0xf2>
 8006ca4:	f104 0e14 	add.w	lr, r4, #20
 8006ca8:	46a9      	mov	r9, r5
 8006caa:	f04f 0c00 	mov.w	ip, #0
 8006cae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006cb2:	f8d9 1000 	ldr.w	r1, [r9]
 8006cb6:	fa1f fb82 	uxth.w	fp, r2
 8006cba:	b289      	uxth	r1, r1
 8006cbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006cc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006cc4:	f8d9 2000 	ldr.w	r2, [r9]
 8006cc8:	4461      	add	r1, ip
 8006cca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cce:	fb0a c20b 	mla	r2, sl, fp, ip
 8006cd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cd6:	b289      	uxth	r1, r1
 8006cd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cdc:	4577      	cmp	r7, lr
 8006cde:	f849 1b04 	str.w	r1, [r9], #4
 8006ce2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ce6:	d8e2      	bhi.n	8006cae <__multiply+0xb2>
 8006ce8:	9a01      	ldr	r2, [sp, #4]
 8006cea:	f845 c002 	str.w	ip, [r5, r2]
 8006cee:	9a03      	ldr	r2, [sp, #12]
 8006cf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	f1b9 0f00 	cmp.w	r9, #0
 8006cfa:	d021      	beq.n	8006d40 <__multiply+0x144>
 8006cfc:	6829      	ldr	r1, [r5, #0]
 8006cfe:	f104 0c14 	add.w	ip, r4, #20
 8006d02:	46ae      	mov	lr, r5
 8006d04:	f04f 0a00 	mov.w	sl, #0
 8006d08:	f8bc b000 	ldrh.w	fp, [ip]
 8006d0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d10:	fb09 220b 	mla	r2, r9, fp, r2
 8006d14:	4452      	add	r2, sl
 8006d16:	b289      	uxth	r1, r1
 8006d18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d1c:	f84e 1b04 	str.w	r1, [lr], #4
 8006d20:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d28:	f8be 1000 	ldrh.w	r1, [lr]
 8006d2c:	fb09 110a 	mla	r1, r9, sl, r1
 8006d30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006d34:	4567      	cmp	r7, ip
 8006d36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d3a:	d8e5      	bhi.n	8006d08 <__multiply+0x10c>
 8006d3c:	9a01      	ldr	r2, [sp, #4]
 8006d3e:	50a9      	str	r1, [r5, r2]
 8006d40:	3504      	adds	r5, #4
 8006d42:	e799      	b.n	8006c78 <__multiply+0x7c>
 8006d44:	3e01      	subs	r6, #1
 8006d46:	e79b      	b.n	8006c80 <__multiply+0x84>
 8006d48:	08008879 	.word	0x08008879
 8006d4c:	0800888a 	.word	0x0800888a

08006d50 <__pow5mult>:
 8006d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d54:	4615      	mov	r5, r2
 8006d56:	f012 0203 	ands.w	r2, r2, #3
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	460f      	mov	r7, r1
 8006d5e:	d007      	beq.n	8006d70 <__pow5mult+0x20>
 8006d60:	4c25      	ldr	r4, [pc, #148]	; (8006df8 <__pow5mult+0xa8>)
 8006d62:	3a01      	subs	r2, #1
 8006d64:	2300      	movs	r3, #0
 8006d66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d6a:	f7ff fe9d 	bl	8006aa8 <__multadd>
 8006d6e:	4607      	mov	r7, r0
 8006d70:	10ad      	asrs	r5, r5, #2
 8006d72:	d03d      	beq.n	8006df0 <__pow5mult+0xa0>
 8006d74:	69f4      	ldr	r4, [r6, #28]
 8006d76:	b97c      	cbnz	r4, 8006d98 <__pow5mult+0x48>
 8006d78:	2010      	movs	r0, #16
 8006d7a:	f7ff fd7f 	bl	800687c <malloc>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	61f0      	str	r0, [r6, #28]
 8006d82:	b928      	cbnz	r0, 8006d90 <__pow5mult+0x40>
 8006d84:	4b1d      	ldr	r3, [pc, #116]	; (8006dfc <__pow5mult+0xac>)
 8006d86:	481e      	ldr	r0, [pc, #120]	; (8006e00 <__pow5mult+0xb0>)
 8006d88:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006d8c:	f000 fbe4 	bl	8007558 <__assert_func>
 8006d90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d94:	6004      	str	r4, [r0, #0]
 8006d96:	60c4      	str	r4, [r0, #12]
 8006d98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006d9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006da0:	b94c      	cbnz	r4, 8006db6 <__pow5mult+0x66>
 8006da2:	f240 2171 	movw	r1, #625	; 0x271
 8006da6:	4630      	mov	r0, r6
 8006da8:	f7ff ff12 	bl	8006bd0 <__i2b>
 8006dac:	2300      	movs	r3, #0
 8006dae:	f8c8 0008 	str.w	r0, [r8, #8]
 8006db2:	4604      	mov	r4, r0
 8006db4:	6003      	str	r3, [r0, #0]
 8006db6:	f04f 0900 	mov.w	r9, #0
 8006dba:	07eb      	lsls	r3, r5, #31
 8006dbc:	d50a      	bpl.n	8006dd4 <__pow5mult+0x84>
 8006dbe:	4639      	mov	r1, r7
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f7ff ff1a 	bl	8006bfc <__multiply>
 8006dc8:	4639      	mov	r1, r7
 8006dca:	4680      	mov	r8, r0
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f7ff fe49 	bl	8006a64 <_Bfree>
 8006dd2:	4647      	mov	r7, r8
 8006dd4:	106d      	asrs	r5, r5, #1
 8006dd6:	d00b      	beq.n	8006df0 <__pow5mult+0xa0>
 8006dd8:	6820      	ldr	r0, [r4, #0]
 8006dda:	b938      	cbnz	r0, 8006dec <__pow5mult+0x9c>
 8006ddc:	4622      	mov	r2, r4
 8006dde:	4621      	mov	r1, r4
 8006de0:	4630      	mov	r0, r6
 8006de2:	f7ff ff0b 	bl	8006bfc <__multiply>
 8006de6:	6020      	str	r0, [r4, #0]
 8006de8:	f8c0 9000 	str.w	r9, [r0]
 8006dec:	4604      	mov	r4, r0
 8006dee:	e7e4      	b.n	8006dba <__pow5mult+0x6a>
 8006df0:	4638      	mov	r0, r7
 8006df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006df6:	bf00      	nop
 8006df8:	080089d8 	.word	0x080089d8
 8006dfc:	0800880a 	.word	0x0800880a
 8006e00:	0800888a 	.word	0x0800888a

08006e04 <__lshift>:
 8006e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e08:	460c      	mov	r4, r1
 8006e0a:	6849      	ldr	r1, [r1, #4]
 8006e0c:	6923      	ldr	r3, [r4, #16]
 8006e0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	4607      	mov	r7, r0
 8006e16:	4691      	mov	r9, r2
 8006e18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e1c:	f108 0601 	add.w	r6, r8, #1
 8006e20:	42b3      	cmp	r3, r6
 8006e22:	db0b      	blt.n	8006e3c <__lshift+0x38>
 8006e24:	4638      	mov	r0, r7
 8006e26:	f7ff fddd 	bl	80069e4 <_Balloc>
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	b948      	cbnz	r0, 8006e42 <__lshift+0x3e>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	4b28      	ldr	r3, [pc, #160]	; (8006ed4 <__lshift+0xd0>)
 8006e32:	4829      	ldr	r0, [pc, #164]	; (8006ed8 <__lshift+0xd4>)
 8006e34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006e38:	f000 fb8e 	bl	8007558 <__assert_func>
 8006e3c:	3101      	adds	r1, #1
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	e7ee      	b.n	8006e20 <__lshift+0x1c>
 8006e42:	2300      	movs	r3, #0
 8006e44:	f100 0114 	add.w	r1, r0, #20
 8006e48:	f100 0210 	add.w	r2, r0, #16
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	4553      	cmp	r3, sl
 8006e50:	db33      	blt.n	8006eba <__lshift+0xb6>
 8006e52:	6920      	ldr	r0, [r4, #16]
 8006e54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e58:	f104 0314 	add.w	r3, r4, #20
 8006e5c:	f019 091f 	ands.w	r9, r9, #31
 8006e60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e68:	d02b      	beq.n	8006ec2 <__lshift+0xbe>
 8006e6a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e6e:	468a      	mov	sl, r1
 8006e70:	2200      	movs	r2, #0
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	fa00 f009 	lsl.w	r0, r0, r9
 8006e78:	4310      	orrs	r0, r2
 8006e7a:	f84a 0b04 	str.w	r0, [sl], #4
 8006e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e82:	459c      	cmp	ip, r3
 8006e84:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e88:	d8f3      	bhi.n	8006e72 <__lshift+0x6e>
 8006e8a:	ebac 0304 	sub.w	r3, ip, r4
 8006e8e:	3b15      	subs	r3, #21
 8006e90:	f023 0303 	bic.w	r3, r3, #3
 8006e94:	3304      	adds	r3, #4
 8006e96:	f104 0015 	add.w	r0, r4, #21
 8006e9a:	4584      	cmp	ip, r0
 8006e9c:	bf38      	it	cc
 8006e9e:	2304      	movcc	r3, #4
 8006ea0:	50ca      	str	r2, [r1, r3]
 8006ea2:	b10a      	cbz	r2, 8006ea8 <__lshift+0xa4>
 8006ea4:	f108 0602 	add.w	r6, r8, #2
 8006ea8:	3e01      	subs	r6, #1
 8006eaa:	4638      	mov	r0, r7
 8006eac:	612e      	str	r6, [r5, #16]
 8006eae:	4621      	mov	r1, r4
 8006eb0:	f7ff fdd8 	bl	8006a64 <_Bfree>
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eba:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	e7c5      	b.n	8006e4e <__lshift+0x4a>
 8006ec2:	3904      	subs	r1, #4
 8006ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ecc:	459c      	cmp	ip, r3
 8006ece:	d8f9      	bhi.n	8006ec4 <__lshift+0xc0>
 8006ed0:	e7ea      	b.n	8006ea8 <__lshift+0xa4>
 8006ed2:	bf00      	nop
 8006ed4:	08008879 	.word	0x08008879
 8006ed8:	0800888a 	.word	0x0800888a

08006edc <__mcmp>:
 8006edc:	b530      	push	{r4, r5, lr}
 8006ede:	6902      	ldr	r2, [r0, #16]
 8006ee0:	690c      	ldr	r4, [r1, #16]
 8006ee2:	1b12      	subs	r2, r2, r4
 8006ee4:	d10e      	bne.n	8006f04 <__mcmp+0x28>
 8006ee6:	f100 0314 	add.w	r3, r0, #20
 8006eea:	3114      	adds	r1, #20
 8006eec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ef0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ef4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ef8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006efc:	42a5      	cmp	r5, r4
 8006efe:	d003      	beq.n	8006f08 <__mcmp+0x2c>
 8006f00:	d305      	bcc.n	8006f0e <__mcmp+0x32>
 8006f02:	2201      	movs	r2, #1
 8006f04:	4610      	mov	r0, r2
 8006f06:	bd30      	pop	{r4, r5, pc}
 8006f08:	4283      	cmp	r3, r0
 8006f0a:	d3f3      	bcc.n	8006ef4 <__mcmp+0x18>
 8006f0c:	e7fa      	b.n	8006f04 <__mcmp+0x28>
 8006f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f12:	e7f7      	b.n	8006f04 <__mcmp+0x28>

08006f14 <__mdiff>:
 8006f14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f18:	460c      	mov	r4, r1
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4620      	mov	r0, r4
 8006f20:	4690      	mov	r8, r2
 8006f22:	f7ff ffdb 	bl	8006edc <__mcmp>
 8006f26:	1e05      	subs	r5, r0, #0
 8006f28:	d110      	bne.n	8006f4c <__mdiff+0x38>
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7ff fd59 	bl	80069e4 <_Balloc>
 8006f32:	b930      	cbnz	r0, 8006f42 <__mdiff+0x2e>
 8006f34:	4b3a      	ldr	r3, [pc, #232]	; (8007020 <__mdiff+0x10c>)
 8006f36:	4602      	mov	r2, r0
 8006f38:	f240 2137 	movw	r1, #567	; 0x237
 8006f3c:	4839      	ldr	r0, [pc, #228]	; (8007024 <__mdiff+0x110>)
 8006f3e:	f000 fb0b 	bl	8007558 <__assert_func>
 8006f42:	2301      	movs	r3, #1
 8006f44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4c:	bfa4      	itt	ge
 8006f4e:	4643      	movge	r3, r8
 8006f50:	46a0      	movge	r8, r4
 8006f52:	4630      	mov	r0, r6
 8006f54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f58:	bfa6      	itte	ge
 8006f5a:	461c      	movge	r4, r3
 8006f5c:	2500      	movge	r5, #0
 8006f5e:	2501      	movlt	r5, #1
 8006f60:	f7ff fd40 	bl	80069e4 <_Balloc>
 8006f64:	b920      	cbnz	r0, 8006f70 <__mdiff+0x5c>
 8006f66:	4b2e      	ldr	r3, [pc, #184]	; (8007020 <__mdiff+0x10c>)
 8006f68:	4602      	mov	r2, r0
 8006f6a:	f240 2145 	movw	r1, #581	; 0x245
 8006f6e:	e7e5      	b.n	8006f3c <__mdiff+0x28>
 8006f70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f74:	6926      	ldr	r6, [r4, #16]
 8006f76:	60c5      	str	r5, [r0, #12]
 8006f78:	f104 0914 	add.w	r9, r4, #20
 8006f7c:	f108 0514 	add.w	r5, r8, #20
 8006f80:	f100 0e14 	add.w	lr, r0, #20
 8006f84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f8c:	f108 0210 	add.w	r2, r8, #16
 8006f90:	46f2      	mov	sl, lr
 8006f92:	2100      	movs	r1, #0
 8006f94:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f9c:	fa11 f88b 	uxtah	r8, r1, fp
 8006fa0:	b299      	uxth	r1, r3
 8006fa2:	0c1b      	lsrs	r3, r3, #16
 8006fa4:	eba8 0801 	sub.w	r8, r8, r1
 8006fa8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006fac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006fb0:	fa1f f888 	uxth.w	r8, r8
 8006fb4:	1419      	asrs	r1, r3, #16
 8006fb6:	454e      	cmp	r6, r9
 8006fb8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006fbc:	f84a 3b04 	str.w	r3, [sl], #4
 8006fc0:	d8e8      	bhi.n	8006f94 <__mdiff+0x80>
 8006fc2:	1b33      	subs	r3, r6, r4
 8006fc4:	3b15      	subs	r3, #21
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	3304      	adds	r3, #4
 8006fcc:	3415      	adds	r4, #21
 8006fce:	42a6      	cmp	r6, r4
 8006fd0:	bf38      	it	cc
 8006fd2:	2304      	movcc	r3, #4
 8006fd4:	441d      	add	r5, r3
 8006fd6:	4473      	add	r3, lr
 8006fd8:	469e      	mov	lr, r3
 8006fda:	462e      	mov	r6, r5
 8006fdc:	4566      	cmp	r6, ip
 8006fde:	d30e      	bcc.n	8006ffe <__mdiff+0xea>
 8006fe0:	f10c 0203 	add.w	r2, ip, #3
 8006fe4:	1b52      	subs	r2, r2, r5
 8006fe6:	f022 0203 	bic.w	r2, r2, #3
 8006fea:	3d03      	subs	r5, #3
 8006fec:	45ac      	cmp	ip, r5
 8006fee:	bf38      	it	cc
 8006ff0:	2200      	movcc	r2, #0
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006ff8:	b17a      	cbz	r2, 800701a <__mdiff+0x106>
 8006ffa:	6107      	str	r7, [r0, #16]
 8006ffc:	e7a4      	b.n	8006f48 <__mdiff+0x34>
 8006ffe:	f856 8b04 	ldr.w	r8, [r6], #4
 8007002:	fa11 f288 	uxtah	r2, r1, r8
 8007006:	1414      	asrs	r4, r2, #16
 8007008:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800700c:	b292      	uxth	r2, r2
 800700e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007012:	f84e 2b04 	str.w	r2, [lr], #4
 8007016:	1421      	asrs	r1, r4, #16
 8007018:	e7e0      	b.n	8006fdc <__mdiff+0xc8>
 800701a:	3f01      	subs	r7, #1
 800701c:	e7ea      	b.n	8006ff4 <__mdiff+0xe0>
 800701e:	bf00      	nop
 8007020:	08008879 	.word	0x08008879
 8007024:	0800888a 	.word	0x0800888a

08007028 <__d2b>:
 8007028:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800702c:	460f      	mov	r7, r1
 800702e:	2101      	movs	r1, #1
 8007030:	ec59 8b10 	vmov	r8, r9, d0
 8007034:	4616      	mov	r6, r2
 8007036:	f7ff fcd5 	bl	80069e4 <_Balloc>
 800703a:	4604      	mov	r4, r0
 800703c:	b930      	cbnz	r0, 800704c <__d2b+0x24>
 800703e:	4602      	mov	r2, r0
 8007040:	4b24      	ldr	r3, [pc, #144]	; (80070d4 <__d2b+0xac>)
 8007042:	4825      	ldr	r0, [pc, #148]	; (80070d8 <__d2b+0xb0>)
 8007044:	f240 310f 	movw	r1, #783	; 0x30f
 8007048:	f000 fa86 	bl	8007558 <__assert_func>
 800704c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007054:	bb2d      	cbnz	r5, 80070a2 <__d2b+0x7a>
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	f1b8 0300 	subs.w	r3, r8, #0
 800705c:	d026      	beq.n	80070ac <__d2b+0x84>
 800705e:	4668      	mov	r0, sp
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	f7ff fd87 	bl	8006b74 <__lo0bits>
 8007066:	e9dd 1200 	ldrd	r1, r2, [sp]
 800706a:	b1e8      	cbz	r0, 80070a8 <__d2b+0x80>
 800706c:	f1c0 0320 	rsb	r3, r0, #32
 8007070:	fa02 f303 	lsl.w	r3, r2, r3
 8007074:	430b      	orrs	r3, r1
 8007076:	40c2      	lsrs	r2, r0
 8007078:	6163      	str	r3, [r4, #20]
 800707a:	9201      	str	r2, [sp, #4]
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	61a3      	str	r3, [r4, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	bf14      	ite	ne
 8007084:	2202      	movne	r2, #2
 8007086:	2201      	moveq	r2, #1
 8007088:	6122      	str	r2, [r4, #16]
 800708a:	b1bd      	cbz	r5, 80070bc <__d2b+0x94>
 800708c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007090:	4405      	add	r5, r0
 8007092:	603d      	str	r5, [r7, #0]
 8007094:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007098:	6030      	str	r0, [r6, #0]
 800709a:	4620      	mov	r0, r4
 800709c:	b003      	add	sp, #12
 800709e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070a6:	e7d6      	b.n	8007056 <__d2b+0x2e>
 80070a8:	6161      	str	r1, [r4, #20]
 80070aa:	e7e7      	b.n	800707c <__d2b+0x54>
 80070ac:	a801      	add	r0, sp, #4
 80070ae:	f7ff fd61 	bl	8006b74 <__lo0bits>
 80070b2:	9b01      	ldr	r3, [sp, #4]
 80070b4:	6163      	str	r3, [r4, #20]
 80070b6:	3020      	adds	r0, #32
 80070b8:	2201      	movs	r2, #1
 80070ba:	e7e5      	b.n	8007088 <__d2b+0x60>
 80070bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070c4:	6038      	str	r0, [r7, #0]
 80070c6:	6918      	ldr	r0, [r3, #16]
 80070c8:	f7ff fd34 	bl	8006b34 <__hi0bits>
 80070cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070d0:	e7e2      	b.n	8007098 <__d2b+0x70>
 80070d2:	bf00      	nop
 80070d4:	08008879 	.word	0x08008879
 80070d8:	0800888a 	.word	0x0800888a

080070dc <__ssputs_r>:
 80070dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	688e      	ldr	r6, [r1, #8]
 80070e2:	461f      	mov	r7, r3
 80070e4:	42be      	cmp	r6, r7
 80070e6:	680b      	ldr	r3, [r1, #0]
 80070e8:	4682      	mov	sl, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	4690      	mov	r8, r2
 80070ee:	d82c      	bhi.n	800714a <__ssputs_r+0x6e>
 80070f0:	898a      	ldrh	r2, [r1, #12]
 80070f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070f6:	d026      	beq.n	8007146 <__ssputs_r+0x6a>
 80070f8:	6965      	ldr	r5, [r4, #20]
 80070fa:	6909      	ldr	r1, [r1, #16]
 80070fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007100:	eba3 0901 	sub.w	r9, r3, r1
 8007104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007108:	1c7b      	adds	r3, r7, #1
 800710a:	444b      	add	r3, r9
 800710c:	106d      	asrs	r5, r5, #1
 800710e:	429d      	cmp	r5, r3
 8007110:	bf38      	it	cc
 8007112:	461d      	movcc	r5, r3
 8007114:	0553      	lsls	r3, r2, #21
 8007116:	d527      	bpl.n	8007168 <__ssputs_r+0x8c>
 8007118:	4629      	mov	r1, r5
 800711a:	f7ff fbd7 	bl	80068cc <_malloc_r>
 800711e:	4606      	mov	r6, r0
 8007120:	b360      	cbz	r0, 800717c <__ssputs_r+0xa0>
 8007122:	6921      	ldr	r1, [r4, #16]
 8007124:	464a      	mov	r2, r9
 8007126:	f000 fa09 	bl	800753c <memcpy>
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007134:	81a3      	strh	r3, [r4, #12]
 8007136:	6126      	str	r6, [r4, #16]
 8007138:	6165      	str	r5, [r4, #20]
 800713a:	444e      	add	r6, r9
 800713c:	eba5 0509 	sub.w	r5, r5, r9
 8007140:	6026      	str	r6, [r4, #0]
 8007142:	60a5      	str	r5, [r4, #8]
 8007144:	463e      	mov	r6, r7
 8007146:	42be      	cmp	r6, r7
 8007148:	d900      	bls.n	800714c <__ssputs_r+0x70>
 800714a:	463e      	mov	r6, r7
 800714c:	6820      	ldr	r0, [r4, #0]
 800714e:	4632      	mov	r2, r6
 8007150:	4641      	mov	r1, r8
 8007152:	f000 f9c9 	bl	80074e8 <memmove>
 8007156:	68a3      	ldr	r3, [r4, #8]
 8007158:	1b9b      	subs	r3, r3, r6
 800715a:	60a3      	str	r3, [r4, #8]
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	4433      	add	r3, r6
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	2000      	movs	r0, #0
 8007164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007168:	462a      	mov	r2, r5
 800716a:	f000 fa3b 	bl	80075e4 <_realloc_r>
 800716e:	4606      	mov	r6, r0
 8007170:	2800      	cmp	r0, #0
 8007172:	d1e0      	bne.n	8007136 <__ssputs_r+0x5a>
 8007174:	6921      	ldr	r1, [r4, #16]
 8007176:	4650      	mov	r0, sl
 8007178:	f7ff fb34 	bl	80067e4 <_free_r>
 800717c:	230c      	movs	r3, #12
 800717e:	f8ca 3000 	str.w	r3, [sl]
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	f04f 30ff 	mov.w	r0, #4294967295
 800718e:	e7e9      	b.n	8007164 <__ssputs_r+0x88>

08007190 <_svfiprintf_r>:
 8007190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	4698      	mov	r8, r3
 8007196:	898b      	ldrh	r3, [r1, #12]
 8007198:	061b      	lsls	r3, r3, #24
 800719a:	b09d      	sub	sp, #116	; 0x74
 800719c:	4607      	mov	r7, r0
 800719e:	460d      	mov	r5, r1
 80071a0:	4614      	mov	r4, r2
 80071a2:	d50e      	bpl.n	80071c2 <_svfiprintf_r+0x32>
 80071a4:	690b      	ldr	r3, [r1, #16]
 80071a6:	b963      	cbnz	r3, 80071c2 <_svfiprintf_r+0x32>
 80071a8:	2140      	movs	r1, #64	; 0x40
 80071aa:	f7ff fb8f 	bl	80068cc <_malloc_r>
 80071ae:	6028      	str	r0, [r5, #0]
 80071b0:	6128      	str	r0, [r5, #16]
 80071b2:	b920      	cbnz	r0, 80071be <_svfiprintf_r+0x2e>
 80071b4:	230c      	movs	r3, #12
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	f04f 30ff 	mov.w	r0, #4294967295
 80071bc:	e0d0      	b.n	8007360 <_svfiprintf_r+0x1d0>
 80071be:	2340      	movs	r3, #64	; 0x40
 80071c0:	616b      	str	r3, [r5, #20]
 80071c2:	2300      	movs	r3, #0
 80071c4:	9309      	str	r3, [sp, #36]	; 0x24
 80071c6:	2320      	movs	r3, #32
 80071c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80071d0:	2330      	movs	r3, #48	; 0x30
 80071d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007378 <_svfiprintf_r+0x1e8>
 80071d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071da:	f04f 0901 	mov.w	r9, #1
 80071de:	4623      	mov	r3, r4
 80071e0:	469a      	mov	sl, r3
 80071e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071e6:	b10a      	cbz	r2, 80071ec <_svfiprintf_r+0x5c>
 80071e8:	2a25      	cmp	r2, #37	; 0x25
 80071ea:	d1f9      	bne.n	80071e0 <_svfiprintf_r+0x50>
 80071ec:	ebba 0b04 	subs.w	fp, sl, r4
 80071f0:	d00b      	beq.n	800720a <_svfiprintf_r+0x7a>
 80071f2:	465b      	mov	r3, fp
 80071f4:	4622      	mov	r2, r4
 80071f6:	4629      	mov	r1, r5
 80071f8:	4638      	mov	r0, r7
 80071fa:	f7ff ff6f 	bl	80070dc <__ssputs_r>
 80071fe:	3001      	adds	r0, #1
 8007200:	f000 80a9 	beq.w	8007356 <_svfiprintf_r+0x1c6>
 8007204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007206:	445a      	add	r2, fp
 8007208:	9209      	str	r2, [sp, #36]	; 0x24
 800720a:	f89a 3000 	ldrb.w	r3, [sl]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 80a1 	beq.w	8007356 <_svfiprintf_r+0x1c6>
 8007214:	2300      	movs	r3, #0
 8007216:	f04f 32ff 	mov.w	r2, #4294967295
 800721a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800721e:	f10a 0a01 	add.w	sl, sl, #1
 8007222:	9304      	str	r3, [sp, #16]
 8007224:	9307      	str	r3, [sp, #28]
 8007226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800722a:	931a      	str	r3, [sp, #104]	; 0x68
 800722c:	4654      	mov	r4, sl
 800722e:	2205      	movs	r2, #5
 8007230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007234:	4850      	ldr	r0, [pc, #320]	; (8007378 <_svfiprintf_r+0x1e8>)
 8007236:	f7f8 ffcb 	bl	80001d0 <memchr>
 800723a:	9a04      	ldr	r2, [sp, #16]
 800723c:	b9d8      	cbnz	r0, 8007276 <_svfiprintf_r+0xe6>
 800723e:	06d0      	lsls	r0, r2, #27
 8007240:	bf44      	itt	mi
 8007242:	2320      	movmi	r3, #32
 8007244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007248:	0711      	lsls	r1, r2, #28
 800724a:	bf44      	itt	mi
 800724c:	232b      	movmi	r3, #43	; 0x2b
 800724e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007252:	f89a 3000 	ldrb.w	r3, [sl]
 8007256:	2b2a      	cmp	r3, #42	; 0x2a
 8007258:	d015      	beq.n	8007286 <_svfiprintf_r+0xf6>
 800725a:	9a07      	ldr	r2, [sp, #28]
 800725c:	4654      	mov	r4, sl
 800725e:	2000      	movs	r0, #0
 8007260:	f04f 0c0a 	mov.w	ip, #10
 8007264:	4621      	mov	r1, r4
 8007266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800726a:	3b30      	subs	r3, #48	; 0x30
 800726c:	2b09      	cmp	r3, #9
 800726e:	d94d      	bls.n	800730c <_svfiprintf_r+0x17c>
 8007270:	b1b0      	cbz	r0, 80072a0 <_svfiprintf_r+0x110>
 8007272:	9207      	str	r2, [sp, #28]
 8007274:	e014      	b.n	80072a0 <_svfiprintf_r+0x110>
 8007276:	eba0 0308 	sub.w	r3, r0, r8
 800727a:	fa09 f303 	lsl.w	r3, r9, r3
 800727e:	4313      	orrs	r3, r2
 8007280:	9304      	str	r3, [sp, #16]
 8007282:	46a2      	mov	sl, r4
 8007284:	e7d2      	b.n	800722c <_svfiprintf_r+0x9c>
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	1d19      	adds	r1, r3, #4
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	9103      	str	r1, [sp, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	bfbb      	ittet	lt
 8007292:	425b      	neglt	r3, r3
 8007294:	f042 0202 	orrlt.w	r2, r2, #2
 8007298:	9307      	strge	r3, [sp, #28]
 800729a:	9307      	strlt	r3, [sp, #28]
 800729c:	bfb8      	it	lt
 800729e:	9204      	strlt	r2, [sp, #16]
 80072a0:	7823      	ldrb	r3, [r4, #0]
 80072a2:	2b2e      	cmp	r3, #46	; 0x2e
 80072a4:	d10c      	bne.n	80072c0 <_svfiprintf_r+0x130>
 80072a6:	7863      	ldrb	r3, [r4, #1]
 80072a8:	2b2a      	cmp	r3, #42	; 0x2a
 80072aa:	d134      	bne.n	8007316 <_svfiprintf_r+0x186>
 80072ac:	9b03      	ldr	r3, [sp, #12]
 80072ae:	1d1a      	adds	r2, r3, #4
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	9203      	str	r2, [sp, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bfb8      	it	lt
 80072b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80072bc:	3402      	adds	r4, #2
 80072be:	9305      	str	r3, [sp, #20]
 80072c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007388 <_svfiprintf_r+0x1f8>
 80072c4:	7821      	ldrb	r1, [r4, #0]
 80072c6:	2203      	movs	r2, #3
 80072c8:	4650      	mov	r0, sl
 80072ca:	f7f8 ff81 	bl	80001d0 <memchr>
 80072ce:	b138      	cbz	r0, 80072e0 <_svfiprintf_r+0x150>
 80072d0:	9b04      	ldr	r3, [sp, #16]
 80072d2:	eba0 000a 	sub.w	r0, r0, sl
 80072d6:	2240      	movs	r2, #64	; 0x40
 80072d8:	4082      	lsls	r2, r0
 80072da:	4313      	orrs	r3, r2
 80072dc:	3401      	adds	r4, #1
 80072de:	9304      	str	r3, [sp, #16]
 80072e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e4:	4825      	ldr	r0, [pc, #148]	; (800737c <_svfiprintf_r+0x1ec>)
 80072e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072ea:	2206      	movs	r2, #6
 80072ec:	f7f8 ff70 	bl	80001d0 <memchr>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d038      	beq.n	8007366 <_svfiprintf_r+0x1d6>
 80072f4:	4b22      	ldr	r3, [pc, #136]	; (8007380 <_svfiprintf_r+0x1f0>)
 80072f6:	bb1b      	cbnz	r3, 8007340 <_svfiprintf_r+0x1b0>
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	3307      	adds	r3, #7
 80072fc:	f023 0307 	bic.w	r3, r3, #7
 8007300:	3308      	adds	r3, #8
 8007302:	9303      	str	r3, [sp, #12]
 8007304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007306:	4433      	add	r3, r6
 8007308:	9309      	str	r3, [sp, #36]	; 0x24
 800730a:	e768      	b.n	80071de <_svfiprintf_r+0x4e>
 800730c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007310:	460c      	mov	r4, r1
 8007312:	2001      	movs	r0, #1
 8007314:	e7a6      	b.n	8007264 <_svfiprintf_r+0xd4>
 8007316:	2300      	movs	r3, #0
 8007318:	3401      	adds	r4, #1
 800731a:	9305      	str	r3, [sp, #20]
 800731c:	4619      	mov	r1, r3
 800731e:	f04f 0c0a 	mov.w	ip, #10
 8007322:	4620      	mov	r0, r4
 8007324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007328:	3a30      	subs	r2, #48	; 0x30
 800732a:	2a09      	cmp	r2, #9
 800732c:	d903      	bls.n	8007336 <_svfiprintf_r+0x1a6>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0c6      	beq.n	80072c0 <_svfiprintf_r+0x130>
 8007332:	9105      	str	r1, [sp, #20]
 8007334:	e7c4      	b.n	80072c0 <_svfiprintf_r+0x130>
 8007336:	fb0c 2101 	mla	r1, ip, r1, r2
 800733a:	4604      	mov	r4, r0
 800733c:	2301      	movs	r3, #1
 800733e:	e7f0      	b.n	8007322 <_svfiprintf_r+0x192>
 8007340:	ab03      	add	r3, sp, #12
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	462a      	mov	r2, r5
 8007346:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <_svfiprintf_r+0x1f4>)
 8007348:	a904      	add	r1, sp, #16
 800734a:	4638      	mov	r0, r7
 800734c:	f7fd fe56 	bl	8004ffc <_printf_float>
 8007350:	1c42      	adds	r2, r0, #1
 8007352:	4606      	mov	r6, r0
 8007354:	d1d6      	bne.n	8007304 <_svfiprintf_r+0x174>
 8007356:	89ab      	ldrh	r3, [r5, #12]
 8007358:	065b      	lsls	r3, r3, #25
 800735a:	f53f af2d 	bmi.w	80071b8 <_svfiprintf_r+0x28>
 800735e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007360:	b01d      	add	sp, #116	; 0x74
 8007362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007366:	ab03      	add	r3, sp, #12
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	462a      	mov	r2, r5
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <_svfiprintf_r+0x1f4>)
 800736e:	a904      	add	r1, sp, #16
 8007370:	4638      	mov	r0, r7
 8007372:	f7fe f8e7 	bl	8005544 <_printf_i>
 8007376:	e7eb      	b.n	8007350 <_svfiprintf_r+0x1c0>
 8007378:	080089e4 	.word	0x080089e4
 800737c:	080089ee 	.word	0x080089ee
 8007380:	08004ffd 	.word	0x08004ffd
 8007384:	080070dd 	.word	0x080070dd
 8007388:	080089ea 	.word	0x080089ea

0800738c <__sflush_r>:
 800738c:	898a      	ldrh	r2, [r1, #12]
 800738e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007392:	4605      	mov	r5, r0
 8007394:	0710      	lsls	r0, r2, #28
 8007396:	460c      	mov	r4, r1
 8007398:	d458      	bmi.n	800744c <__sflush_r+0xc0>
 800739a:	684b      	ldr	r3, [r1, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	dc05      	bgt.n	80073ac <__sflush_r+0x20>
 80073a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	dc02      	bgt.n	80073ac <__sflush_r+0x20>
 80073a6:	2000      	movs	r0, #0
 80073a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073ae:	2e00      	cmp	r6, #0
 80073b0:	d0f9      	beq.n	80073a6 <__sflush_r+0x1a>
 80073b2:	2300      	movs	r3, #0
 80073b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073b8:	682f      	ldr	r7, [r5, #0]
 80073ba:	6a21      	ldr	r1, [r4, #32]
 80073bc:	602b      	str	r3, [r5, #0]
 80073be:	d032      	beq.n	8007426 <__sflush_r+0x9a>
 80073c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	075a      	lsls	r2, r3, #29
 80073c6:	d505      	bpl.n	80073d4 <__sflush_r+0x48>
 80073c8:	6863      	ldr	r3, [r4, #4]
 80073ca:	1ac0      	subs	r0, r0, r3
 80073cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073ce:	b10b      	cbz	r3, 80073d4 <__sflush_r+0x48>
 80073d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073d2:	1ac0      	subs	r0, r0, r3
 80073d4:	2300      	movs	r3, #0
 80073d6:	4602      	mov	r2, r0
 80073d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073da:	6a21      	ldr	r1, [r4, #32]
 80073dc:	4628      	mov	r0, r5
 80073de:	47b0      	blx	r6
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	d106      	bne.n	80073f4 <__sflush_r+0x68>
 80073e6:	6829      	ldr	r1, [r5, #0]
 80073e8:	291d      	cmp	r1, #29
 80073ea:	d82b      	bhi.n	8007444 <__sflush_r+0xb8>
 80073ec:	4a29      	ldr	r2, [pc, #164]	; (8007494 <__sflush_r+0x108>)
 80073ee:	410a      	asrs	r2, r1
 80073f0:	07d6      	lsls	r6, r2, #31
 80073f2:	d427      	bmi.n	8007444 <__sflush_r+0xb8>
 80073f4:	2200      	movs	r2, #0
 80073f6:	6062      	str	r2, [r4, #4]
 80073f8:	04d9      	lsls	r1, r3, #19
 80073fa:	6922      	ldr	r2, [r4, #16]
 80073fc:	6022      	str	r2, [r4, #0]
 80073fe:	d504      	bpl.n	800740a <__sflush_r+0x7e>
 8007400:	1c42      	adds	r2, r0, #1
 8007402:	d101      	bne.n	8007408 <__sflush_r+0x7c>
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	b903      	cbnz	r3, 800740a <__sflush_r+0x7e>
 8007408:	6560      	str	r0, [r4, #84]	; 0x54
 800740a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800740c:	602f      	str	r7, [r5, #0]
 800740e:	2900      	cmp	r1, #0
 8007410:	d0c9      	beq.n	80073a6 <__sflush_r+0x1a>
 8007412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007416:	4299      	cmp	r1, r3
 8007418:	d002      	beq.n	8007420 <__sflush_r+0x94>
 800741a:	4628      	mov	r0, r5
 800741c:	f7ff f9e2 	bl	80067e4 <_free_r>
 8007420:	2000      	movs	r0, #0
 8007422:	6360      	str	r0, [r4, #52]	; 0x34
 8007424:	e7c0      	b.n	80073a8 <__sflush_r+0x1c>
 8007426:	2301      	movs	r3, #1
 8007428:	4628      	mov	r0, r5
 800742a:	47b0      	blx	r6
 800742c:	1c41      	adds	r1, r0, #1
 800742e:	d1c8      	bne.n	80073c2 <__sflush_r+0x36>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0c5      	beq.n	80073c2 <__sflush_r+0x36>
 8007436:	2b1d      	cmp	r3, #29
 8007438:	d001      	beq.n	800743e <__sflush_r+0xb2>
 800743a:	2b16      	cmp	r3, #22
 800743c:	d101      	bne.n	8007442 <__sflush_r+0xb6>
 800743e:	602f      	str	r7, [r5, #0]
 8007440:	e7b1      	b.n	80073a6 <__sflush_r+0x1a>
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007448:	81a3      	strh	r3, [r4, #12]
 800744a:	e7ad      	b.n	80073a8 <__sflush_r+0x1c>
 800744c:	690f      	ldr	r7, [r1, #16]
 800744e:	2f00      	cmp	r7, #0
 8007450:	d0a9      	beq.n	80073a6 <__sflush_r+0x1a>
 8007452:	0793      	lsls	r3, r2, #30
 8007454:	680e      	ldr	r6, [r1, #0]
 8007456:	bf08      	it	eq
 8007458:	694b      	ldreq	r3, [r1, #20]
 800745a:	600f      	str	r7, [r1, #0]
 800745c:	bf18      	it	ne
 800745e:	2300      	movne	r3, #0
 8007460:	eba6 0807 	sub.w	r8, r6, r7
 8007464:	608b      	str	r3, [r1, #8]
 8007466:	f1b8 0f00 	cmp.w	r8, #0
 800746a:	dd9c      	ble.n	80073a6 <__sflush_r+0x1a>
 800746c:	6a21      	ldr	r1, [r4, #32]
 800746e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007470:	4643      	mov	r3, r8
 8007472:	463a      	mov	r2, r7
 8007474:	4628      	mov	r0, r5
 8007476:	47b0      	blx	r6
 8007478:	2800      	cmp	r0, #0
 800747a:	dc06      	bgt.n	800748a <__sflush_r+0xfe>
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007482:	81a3      	strh	r3, [r4, #12]
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	e78e      	b.n	80073a8 <__sflush_r+0x1c>
 800748a:	4407      	add	r7, r0
 800748c:	eba8 0800 	sub.w	r8, r8, r0
 8007490:	e7e9      	b.n	8007466 <__sflush_r+0xda>
 8007492:	bf00      	nop
 8007494:	dfbffffe 	.word	0xdfbffffe

08007498 <_fflush_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	690b      	ldr	r3, [r1, #16]
 800749c:	4605      	mov	r5, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	b913      	cbnz	r3, 80074a8 <_fflush_r+0x10>
 80074a2:	2500      	movs	r5, #0
 80074a4:	4628      	mov	r0, r5
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	b118      	cbz	r0, 80074b2 <_fflush_r+0x1a>
 80074aa:	6a03      	ldr	r3, [r0, #32]
 80074ac:	b90b      	cbnz	r3, 80074b2 <_fflush_r+0x1a>
 80074ae:	f7fe f9f7 	bl	80058a0 <__sinit>
 80074b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f3      	beq.n	80074a2 <_fflush_r+0xa>
 80074ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074bc:	07d0      	lsls	r0, r2, #31
 80074be:	d404      	bmi.n	80074ca <_fflush_r+0x32>
 80074c0:	0599      	lsls	r1, r3, #22
 80074c2:	d402      	bmi.n	80074ca <_fflush_r+0x32>
 80074c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074c6:	f7fe fb0e 	bl	8005ae6 <__retarget_lock_acquire_recursive>
 80074ca:	4628      	mov	r0, r5
 80074cc:	4621      	mov	r1, r4
 80074ce:	f7ff ff5d 	bl	800738c <__sflush_r>
 80074d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074d4:	07da      	lsls	r2, r3, #31
 80074d6:	4605      	mov	r5, r0
 80074d8:	d4e4      	bmi.n	80074a4 <_fflush_r+0xc>
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	059b      	lsls	r3, r3, #22
 80074de:	d4e1      	bmi.n	80074a4 <_fflush_r+0xc>
 80074e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074e2:	f7fe fb01 	bl	8005ae8 <__retarget_lock_release_recursive>
 80074e6:	e7dd      	b.n	80074a4 <_fflush_r+0xc>

080074e8 <memmove>:
 80074e8:	4288      	cmp	r0, r1
 80074ea:	b510      	push	{r4, lr}
 80074ec:	eb01 0402 	add.w	r4, r1, r2
 80074f0:	d902      	bls.n	80074f8 <memmove+0x10>
 80074f2:	4284      	cmp	r4, r0
 80074f4:	4623      	mov	r3, r4
 80074f6:	d807      	bhi.n	8007508 <memmove+0x20>
 80074f8:	1e43      	subs	r3, r0, #1
 80074fa:	42a1      	cmp	r1, r4
 80074fc:	d008      	beq.n	8007510 <memmove+0x28>
 80074fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007502:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007506:	e7f8      	b.n	80074fa <memmove+0x12>
 8007508:	4402      	add	r2, r0
 800750a:	4601      	mov	r1, r0
 800750c:	428a      	cmp	r2, r1
 800750e:	d100      	bne.n	8007512 <memmove+0x2a>
 8007510:	bd10      	pop	{r4, pc}
 8007512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800751a:	e7f7      	b.n	800750c <memmove+0x24>

0800751c <_sbrk_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4d06      	ldr	r5, [pc, #24]	; (8007538 <_sbrk_r+0x1c>)
 8007520:	2300      	movs	r3, #0
 8007522:	4604      	mov	r4, r0
 8007524:	4608      	mov	r0, r1
 8007526:	602b      	str	r3, [r5, #0]
 8007528:	f7fa facc 	bl	8001ac4 <_sbrk>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_sbrk_r+0x1a>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_sbrk_r+0x1a>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	200004a0 	.word	0x200004a0

0800753c <memcpy>:
 800753c:	440a      	add	r2, r1
 800753e:	4291      	cmp	r1, r2
 8007540:	f100 33ff 	add.w	r3, r0, #4294967295
 8007544:	d100      	bne.n	8007548 <memcpy+0xc>
 8007546:	4770      	bx	lr
 8007548:	b510      	push	{r4, lr}
 800754a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800754e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007552:	4291      	cmp	r1, r2
 8007554:	d1f9      	bne.n	800754a <memcpy+0xe>
 8007556:	bd10      	pop	{r4, pc}

08007558 <__assert_func>:
 8007558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800755a:	4614      	mov	r4, r2
 800755c:	461a      	mov	r2, r3
 800755e:	4b09      	ldr	r3, [pc, #36]	; (8007584 <__assert_func+0x2c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4605      	mov	r5, r0
 8007564:	68d8      	ldr	r0, [r3, #12]
 8007566:	b14c      	cbz	r4, 800757c <__assert_func+0x24>
 8007568:	4b07      	ldr	r3, [pc, #28]	; (8007588 <__assert_func+0x30>)
 800756a:	9100      	str	r1, [sp, #0]
 800756c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007570:	4906      	ldr	r1, [pc, #24]	; (800758c <__assert_func+0x34>)
 8007572:	462b      	mov	r3, r5
 8007574:	f000 f872 	bl	800765c <fiprintf>
 8007578:	f000 f882 	bl	8007680 <abort>
 800757c:	4b04      	ldr	r3, [pc, #16]	; (8007590 <__assert_func+0x38>)
 800757e:	461c      	mov	r4, r3
 8007580:	e7f3      	b.n	800756a <__assert_func+0x12>
 8007582:	bf00      	nop
 8007584:	20000064 	.word	0x20000064
 8007588:	080089ff 	.word	0x080089ff
 800758c:	08008a0c 	.word	0x08008a0c
 8007590:	08008a3a 	.word	0x08008a3a

08007594 <_calloc_r>:
 8007594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007596:	fba1 2402 	umull	r2, r4, r1, r2
 800759a:	b94c      	cbnz	r4, 80075b0 <_calloc_r+0x1c>
 800759c:	4611      	mov	r1, r2
 800759e:	9201      	str	r2, [sp, #4]
 80075a0:	f7ff f994 	bl	80068cc <_malloc_r>
 80075a4:	9a01      	ldr	r2, [sp, #4]
 80075a6:	4605      	mov	r5, r0
 80075a8:	b930      	cbnz	r0, 80075b8 <_calloc_r+0x24>
 80075aa:	4628      	mov	r0, r5
 80075ac:	b003      	add	sp, #12
 80075ae:	bd30      	pop	{r4, r5, pc}
 80075b0:	220c      	movs	r2, #12
 80075b2:	6002      	str	r2, [r0, #0]
 80075b4:	2500      	movs	r5, #0
 80075b6:	e7f8      	b.n	80075aa <_calloc_r+0x16>
 80075b8:	4621      	mov	r1, r4
 80075ba:	f7fe fa0a 	bl	80059d2 <memset>
 80075be:	e7f4      	b.n	80075aa <_calloc_r+0x16>

080075c0 <__ascii_mbtowc>:
 80075c0:	b082      	sub	sp, #8
 80075c2:	b901      	cbnz	r1, 80075c6 <__ascii_mbtowc+0x6>
 80075c4:	a901      	add	r1, sp, #4
 80075c6:	b142      	cbz	r2, 80075da <__ascii_mbtowc+0x1a>
 80075c8:	b14b      	cbz	r3, 80075de <__ascii_mbtowc+0x1e>
 80075ca:	7813      	ldrb	r3, [r2, #0]
 80075cc:	600b      	str	r3, [r1, #0]
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	1e10      	subs	r0, r2, #0
 80075d2:	bf18      	it	ne
 80075d4:	2001      	movne	r0, #1
 80075d6:	b002      	add	sp, #8
 80075d8:	4770      	bx	lr
 80075da:	4610      	mov	r0, r2
 80075dc:	e7fb      	b.n	80075d6 <__ascii_mbtowc+0x16>
 80075de:	f06f 0001 	mvn.w	r0, #1
 80075e2:	e7f8      	b.n	80075d6 <__ascii_mbtowc+0x16>

080075e4 <_realloc_r>:
 80075e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e8:	4680      	mov	r8, r0
 80075ea:	4614      	mov	r4, r2
 80075ec:	460e      	mov	r6, r1
 80075ee:	b921      	cbnz	r1, 80075fa <_realloc_r+0x16>
 80075f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075f4:	4611      	mov	r1, r2
 80075f6:	f7ff b969 	b.w	80068cc <_malloc_r>
 80075fa:	b92a      	cbnz	r2, 8007608 <_realloc_r+0x24>
 80075fc:	f7ff f8f2 	bl	80067e4 <_free_r>
 8007600:	4625      	mov	r5, r4
 8007602:	4628      	mov	r0, r5
 8007604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007608:	f000 f841 	bl	800768e <_malloc_usable_size_r>
 800760c:	4284      	cmp	r4, r0
 800760e:	4607      	mov	r7, r0
 8007610:	d802      	bhi.n	8007618 <_realloc_r+0x34>
 8007612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007616:	d812      	bhi.n	800763e <_realloc_r+0x5a>
 8007618:	4621      	mov	r1, r4
 800761a:	4640      	mov	r0, r8
 800761c:	f7ff f956 	bl	80068cc <_malloc_r>
 8007620:	4605      	mov	r5, r0
 8007622:	2800      	cmp	r0, #0
 8007624:	d0ed      	beq.n	8007602 <_realloc_r+0x1e>
 8007626:	42bc      	cmp	r4, r7
 8007628:	4622      	mov	r2, r4
 800762a:	4631      	mov	r1, r6
 800762c:	bf28      	it	cs
 800762e:	463a      	movcs	r2, r7
 8007630:	f7ff ff84 	bl	800753c <memcpy>
 8007634:	4631      	mov	r1, r6
 8007636:	4640      	mov	r0, r8
 8007638:	f7ff f8d4 	bl	80067e4 <_free_r>
 800763c:	e7e1      	b.n	8007602 <_realloc_r+0x1e>
 800763e:	4635      	mov	r5, r6
 8007640:	e7df      	b.n	8007602 <_realloc_r+0x1e>

08007642 <__ascii_wctomb>:
 8007642:	b149      	cbz	r1, 8007658 <__ascii_wctomb+0x16>
 8007644:	2aff      	cmp	r2, #255	; 0xff
 8007646:	bf85      	ittet	hi
 8007648:	238a      	movhi	r3, #138	; 0x8a
 800764a:	6003      	strhi	r3, [r0, #0]
 800764c:	700a      	strbls	r2, [r1, #0]
 800764e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007652:	bf98      	it	ls
 8007654:	2001      	movls	r0, #1
 8007656:	4770      	bx	lr
 8007658:	4608      	mov	r0, r1
 800765a:	4770      	bx	lr

0800765c <fiprintf>:
 800765c:	b40e      	push	{r1, r2, r3}
 800765e:	b503      	push	{r0, r1, lr}
 8007660:	4601      	mov	r1, r0
 8007662:	ab03      	add	r3, sp, #12
 8007664:	4805      	ldr	r0, [pc, #20]	; (800767c <fiprintf+0x20>)
 8007666:	f853 2b04 	ldr.w	r2, [r3], #4
 800766a:	6800      	ldr	r0, [r0, #0]
 800766c:	9301      	str	r3, [sp, #4]
 800766e:	f000 f83f 	bl	80076f0 <_vfiprintf_r>
 8007672:	b002      	add	sp, #8
 8007674:	f85d eb04 	ldr.w	lr, [sp], #4
 8007678:	b003      	add	sp, #12
 800767a:	4770      	bx	lr
 800767c:	20000064 	.word	0x20000064

08007680 <abort>:
 8007680:	b508      	push	{r3, lr}
 8007682:	2006      	movs	r0, #6
 8007684:	f000 fa0c 	bl	8007aa0 <raise>
 8007688:	2001      	movs	r0, #1
 800768a:	f7fa f9a3 	bl	80019d4 <_exit>

0800768e <_malloc_usable_size_r>:
 800768e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007692:	1f18      	subs	r0, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	bfbc      	itt	lt
 8007698:	580b      	ldrlt	r3, [r1, r0]
 800769a:	18c0      	addlt	r0, r0, r3
 800769c:	4770      	bx	lr

0800769e <__sfputc_r>:
 800769e:	6893      	ldr	r3, [r2, #8]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	b410      	push	{r4}
 80076a6:	6093      	str	r3, [r2, #8]
 80076a8:	da08      	bge.n	80076bc <__sfputc_r+0x1e>
 80076aa:	6994      	ldr	r4, [r2, #24]
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	db01      	blt.n	80076b4 <__sfputc_r+0x16>
 80076b0:	290a      	cmp	r1, #10
 80076b2:	d103      	bne.n	80076bc <__sfputc_r+0x1e>
 80076b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076b8:	f000 b934 	b.w	8007924 <__swbuf_r>
 80076bc:	6813      	ldr	r3, [r2, #0]
 80076be:	1c58      	adds	r0, r3, #1
 80076c0:	6010      	str	r0, [r2, #0]
 80076c2:	7019      	strb	r1, [r3, #0]
 80076c4:	4608      	mov	r0, r1
 80076c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <__sfputs_r>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	4606      	mov	r6, r0
 80076d0:	460f      	mov	r7, r1
 80076d2:	4614      	mov	r4, r2
 80076d4:	18d5      	adds	r5, r2, r3
 80076d6:	42ac      	cmp	r4, r5
 80076d8:	d101      	bne.n	80076de <__sfputs_r+0x12>
 80076da:	2000      	movs	r0, #0
 80076dc:	e007      	b.n	80076ee <__sfputs_r+0x22>
 80076de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e2:	463a      	mov	r2, r7
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7ff ffda 	bl	800769e <__sfputc_r>
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	d1f3      	bne.n	80076d6 <__sfputs_r+0xa>
 80076ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076f0 <_vfiprintf_r>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	460d      	mov	r5, r1
 80076f6:	b09d      	sub	sp, #116	; 0x74
 80076f8:	4614      	mov	r4, r2
 80076fa:	4698      	mov	r8, r3
 80076fc:	4606      	mov	r6, r0
 80076fe:	b118      	cbz	r0, 8007708 <_vfiprintf_r+0x18>
 8007700:	6a03      	ldr	r3, [r0, #32]
 8007702:	b90b      	cbnz	r3, 8007708 <_vfiprintf_r+0x18>
 8007704:	f7fe f8cc 	bl	80058a0 <__sinit>
 8007708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800770a:	07d9      	lsls	r1, r3, #31
 800770c:	d405      	bmi.n	800771a <_vfiprintf_r+0x2a>
 800770e:	89ab      	ldrh	r3, [r5, #12]
 8007710:	059a      	lsls	r2, r3, #22
 8007712:	d402      	bmi.n	800771a <_vfiprintf_r+0x2a>
 8007714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007716:	f7fe f9e6 	bl	8005ae6 <__retarget_lock_acquire_recursive>
 800771a:	89ab      	ldrh	r3, [r5, #12]
 800771c:	071b      	lsls	r3, r3, #28
 800771e:	d501      	bpl.n	8007724 <_vfiprintf_r+0x34>
 8007720:	692b      	ldr	r3, [r5, #16]
 8007722:	b99b      	cbnz	r3, 800774c <_vfiprintf_r+0x5c>
 8007724:	4629      	mov	r1, r5
 8007726:	4630      	mov	r0, r6
 8007728:	f000 f93a 	bl	80079a0 <__swsetup_r>
 800772c:	b170      	cbz	r0, 800774c <_vfiprintf_r+0x5c>
 800772e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007730:	07dc      	lsls	r4, r3, #31
 8007732:	d504      	bpl.n	800773e <_vfiprintf_r+0x4e>
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	b01d      	add	sp, #116	; 0x74
 800773a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	0598      	lsls	r0, r3, #22
 8007742:	d4f7      	bmi.n	8007734 <_vfiprintf_r+0x44>
 8007744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007746:	f7fe f9cf 	bl	8005ae8 <__retarget_lock_release_recursive>
 800774a:	e7f3      	b.n	8007734 <_vfiprintf_r+0x44>
 800774c:	2300      	movs	r3, #0
 800774e:	9309      	str	r3, [sp, #36]	; 0x24
 8007750:	2320      	movs	r3, #32
 8007752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007756:	f8cd 800c 	str.w	r8, [sp, #12]
 800775a:	2330      	movs	r3, #48	; 0x30
 800775c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007910 <_vfiprintf_r+0x220>
 8007760:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007764:	f04f 0901 	mov.w	r9, #1
 8007768:	4623      	mov	r3, r4
 800776a:	469a      	mov	sl, r3
 800776c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007770:	b10a      	cbz	r2, 8007776 <_vfiprintf_r+0x86>
 8007772:	2a25      	cmp	r2, #37	; 0x25
 8007774:	d1f9      	bne.n	800776a <_vfiprintf_r+0x7a>
 8007776:	ebba 0b04 	subs.w	fp, sl, r4
 800777a:	d00b      	beq.n	8007794 <_vfiprintf_r+0xa4>
 800777c:	465b      	mov	r3, fp
 800777e:	4622      	mov	r2, r4
 8007780:	4629      	mov	r1, r5
 8007782:	4630      	mov	r0, r6
 8007784:	f7ff ffa2 	bl	80076cc <__sfputs_r>
 8007788:	3001      	adds	r0, #1
 800778a:	f000 80a9 	beq.w	80078e0 <_vfiprintf_r+0x1f0>
 800778e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007790:	445a      	add	r2, fp
 8007792:	9209      	str	r2, [sp, #36]	; 0x24
 8007794:	f89a 3000 	ldrb.w	r3, [sl]
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 80a1 	beq.w	80078e0 <_vfiprintf_r+0x1f0>
 800779e:	2300      	movs	r3, #0
 80077a0:	f04f 32ff 	mov.w	r2, #4294967295
 80077a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a8:	f10a 0a01 	add.w	sl, sl, #1
 80077ac:	9304      	str	r3, [sp, #16]
 80077ae:	9307      	str	r3, [sp, #28]
 80077b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077b4:	931a      	str	r3, [sp, #104]	; 0x68
 80077b6:	4654      	mov	r4, sl
 80077b8:	2205      	movs	r2, #5
 80077ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077be:	4854      	ldr	r0, [pc, #336]	; (8007910 <_vfiprintf_r+0x220>)
 80077c0:	f7f8 fd06 	bl	80001d0 <memchr>
 80077c4:	9a04      	ldr	r2, [sp, #16]
 80077c6:	b9d8      	cbnz	r0, 8007800 <_vfiprintf_r+0x110>
 80077c8:	06d1      	lsls	r1, r2, #27
 80077ca:	bf44      	itt	mi
 80077cc:	2320      	movmi	r3, #32
 80077ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077d2:	0713      	lsls	r3, r2, #28
 80077d4:	bf44      	itt	mi
 80077d6:	232b      	movmi	r3, #43	; 0x2b
 80077d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077dc:	f89a 3000 	ldrb.w	r3, [sl]
 80077e0:	2b2a      	cmp	r3, #42	; 0x2a
 80077e2:	d015      	beq.n	8007810 <_vfiprintf_r+0x120>
 80077e4:	9a07      	ldr	r2, [sp, #28]
 80077e6:	4654      	mov	r4, sl
 80077e8:	2000      	movs	r0, #0
 80077ea:	f04f 0c0a 	mov.w	ip, #10
 80077ee:	4621      	mov	r1, r4
 80077f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077f4:	3b30      	subs	r3, #48	; 0x30
 80077f6:	2b09      	cmp	r3, #9
 80077f8:	d94d      	bls.n	8007896 <_vfiprintf_r+0x1a6>
 80077fa:	b1b0      	cbz	r0, 800782a <_vfiprintf_r+0x13a>
 80077fc:	9207      	str	r2, [sp, #28]
 80077fe:	e014      	b.n	800782a <_vfiprintf_r+0x13a>
 8007800:	eba0 0308 	sub.w	r3, r0, r8
 8007804:	fa09 f303 	lsl.w	r3, r9, r3
 8007808:	4313      	orrs	r3, r2
 800780a:	9304      	str	r3, [sp, #16]
 800780c:	46a2      	mov	sl, r4
 800780e:	e7d2      	b.n	80077b6 <_vfiprintf_r+0xc6>
 8007810:	9b03      	ldr	r3, [sp, #12]
 8007812:	1d19      	adds	r1, r3, #4
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	9103      	str	r1, [sp, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	bfbb      	ittet	lt
 800781c:	425b      	neglt	r3, r3
 800781e:	f042 0202 	orrlt.w	r2, r2, #2
 8007822:	9307      	strge	r3, [sp, #28]
 8007824:	9307      	strlt	r3, [sp, #28]
 8007826:	bfb8      	it	lt
 8007828:	9204      	strlt	r2, [sp, #16]
 800782a:	7823      	ldrb	r3, [r4, #0]
 800782c:	2b2e      	cmp	r3, #46	; 0x2e
 800782e:	d10c      	bne.n	800784a <_vfiprintf_r+0x15a>
 8007830:	7863      	ldrb	r3, [r4, #1]
 8007832:	2b2a      	cmp	r3, #42	; 0x2a
 8007834:	d134      	bne.n	80078a0 <_vfiprintf_r+0x1b0>
 8007836:	9b03      	ldr	r3, [sp, #12]
 8007838:	1d1a      	adds	r2, r3, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	9203      	str	r2, [sp, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	bfb8      	it	lt
 8007842:	f04f 33ff 	movlt.w	r3, #4294967295
 8007846:	3402      	adds	r4, #2
 8007848:	9305      	str	r3, [sp, #20]
 800784a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007920 <_vfiprintf_r+0x230>
 800784e:	7821      	ldrb	r1, [r4, #0]
 8007850:	2203      	movs	r2, #3
 8007852:	4650      	mov	r0, sl
 8007854:	f7f8 fcbc 	bl	80001d0 <memchr>
 8007858:	b138      	cbz	r0, 800786a <_vfiprintf_r+0x17a>
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	eba0 000a 	sub.w	r0, r0, sl
 8007860:	2240      	movs	r2, #64	; 0x40
 8007862:	4082      	lsls	r2, r0
 8007864:	4313      	orrs	r3, r2
 8007866:	3401      	adds	r4, #1
 8007868:	9304      	str	r3, [sp, #16]
 800786a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786e:	4829      	ldr	r0, [pc, #164]	; (8007914 <_vfiprintf_r+0x224>)
 8007870:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007874:	2206      	movs	r2, #6
 8007876:	f7f8 fcab 	bl	80001d0 <memchr>
 800787a:	2800      	cmp	r0, #0
 800787c:	d03f      	beq.n	80078fe <_vfiprintf_r+0x20e>
 800787e:	4b26      	ldr	r3, [pc, #152]	; (8007918 <_vfiprintf_r+0x228>)
 8007880:	bb1b      	cbnz	r3, 80078ca <_vfiprintf_r+0x1da>
 8007882:	9b03      	ldr	r3, [sp, #12]
 8007884:	3307      	adds	r3, #7
 8007886:	f023 0307 	bic.w	r3, r3, #7
 800788a:	3308      	adds	r3, #8
 800788c:	9303      	str	r3, [sp, #12]
 800788e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007890:	443b      	add	r3, r7
 8007892:	9309      	str	r3, [sp, #36]	; 0x24
 8007894:	e768      	b.n	8007768 <_vfiprintf_r+0x78>
 8007896:	fb0c 3202 	mla	r2, ip, r2, r3
 800789a:	460c      	mov	r4, r1
 800789c:	2001      	movs	r0, #1
 800789e:	e7a6      	b.n	80077ee <_vfiprintf_r+0xfe>
 80078a0:	2300      	movs	r3, #0
 80078a2:	3401      	adds	r4, #1
 80078a4:	9305      	str	r3, [sp, #20]
 80078a6:	4619      	mov	r1, r3
 80078a8:	f04f 0c0a 	mov.w	ip, #10
 80078ac:	4620      	mov	r0, r4
 80078ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078b2:	3a30      	subs	r2, #48	; 0x30
 80078b4:	2a09      	cmp	r2, #9
 80078b6:	d903      	bls.n	80078c0 <_vfiprintf_r+0x1d0>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0c6      	beq.n	800784a <_vfiprintf_r+0x15a>
 80078bc:	9105      	str	r1, [sp, #20]
 80078be:	e7c4      	b.n	800784a <_vfiprintf_r+0x15a>
 80078c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c4:	4604      	mov	r4, r0
 80078c6:	2301      	movs	r3, #1
 80078c8:	e7f0      	b.n	80078ac <_vfiprintf_r+0x1bc>
 80078ca:	ab03      	add	r3, sp, #12
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	462a      	mov	r2, r5
 80078d0:	4b12      	ldr	r3, [pc, #72]	; (800791c <_vfiprintf_r+0x22c>)
 80078d2:	a904      	add	r1, sp, #16
 80078d4:	4630      	mov	r0, r6
 80078d6:	f7fd fb91 	bl	8004ffc <_printf_float>
 80078da:	4607      	mov	r7, r0
 80078dc:	1c78      	adds	r0, r7, #1
 80078de:	d1d6      	bne.n	800788e <_vfiprintf_r+0x19e>
 80078e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078e2:	07d9      	lsls	r1, r3, #31
 80078e4:	d405      	bmi.n	80078f2 <_vfiprintf_r+0x202>
 80078e6:	89ab      	ldrh	r3, [r5, #12]
 80078e8:	059a      	lsls	r2, r3, #22
 80078ea:	d402      	bmi.n	80078f2 <_vfiprintf_r+0x202>
 80078ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ee:	f7fe f8fb 	bl	8005ae8 <__retarget_lock_release_recursive>
 80078f2:	89ab      	ldrh	r3, [r5, #12]
 80078f4:	065b      	lsls	r3, r3, #25
 80078f6:	f53f af1d 	bmi.w	8007734 <_vfiprintf_r+0x44>
 80078fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078fc:	e71c      	b.n	8007738 <_vfiprintf_r+0x48>
 80078fe:	ab03      	add	r3, sp, #12
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	462a      	mov	r2, r5
 8007904:	4b05      	ldr	r3, [pc, #20]	; (800791c <_vfiprintf_r+0x22c>)
 8007906:	a904      	add	r1, sp, #16
 8007908:	4630      	mov	r0, r6
 800790a:	f7fd fe1b 	bl	8005544 <_printf_i>
 800790e:	e7e4      	b.n	80078da <_vfiprintf_r+0x1ea>
 8007910:	080089e4 	.word	0x080089e4
 8007914:	080089ee 	.word	0x080089ee
 8007918:	08004ffd 	.word	0x08004ffd
 800791c:	080076cd 	.word	0x080076cd
 8007920:	080089ea 	.word	0x080089ea

08007924 <__swbuf_r>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	460e      	mov	r6, r1
 8007928:	4614      	mov	r4, r2
 800792a:	4605      	mov	r5, r0
 800792c:	b118      	cbz	r0, 8007936 <__swbuf_r+0x12>
 800792e:	6a03      	ldr	r3, [r0, #32]
 8007930:	b90b      	cbnz	r3, 8007936 <__swbuf_r+0x12>
 8007932:	f7fd ffb5 	bl	80058a0 <__sinit>
 8007936:	69a3      	ldr	r3, [r4, #24]
 8007938:	60a3      	str	r3, [r4, #8]
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	071a      	lsls	r2, r3, #28
 800793e:	d525      	bpl.n	800798c <__swbuf_r+0x68>
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	b31b      	cbz	r3, 800798c <__swbuf_r+0x68>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	6922      	ldr	r2, [r4, #16]
 8007948:	1a98      	subs	r0, r3, r2
 800794a:	6963      	ldr	r3, [r4, #20]
 800794c:	b2f6      	uxtb	r6, r6
 800794e:	4283      	cmp	r3, r0
 8007950:	4637      	mov	r7, r6
 8007952:	dc04      	bgt.n	800795e <__swbuf_r+0x3a>
 8007954:	4621      	mov	r1, r4
 8007956:	4628      	mov	r0, r5
 8007958:	f7ff fd9e 	bl	8007498 <_fflush_r>
 800795c:	b9e0      	cbnz	r0, 8007998 <__swbuf_r+0x74>
 800795e:	68a3      	ldr	r3, [r4, #8]
 8007960:	3b01      	subs	r3, #1
 8007962:	60a3      	str	r3, [r4, #8]
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	6022      	str	r2, [r4, #0]
 800796a:	701e      	strb	r6, [r3, #0]
 800796c:	6962      	ldr	r2, [r4, #20]
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	429a      	cmp	r2, r3
 8007972:	d004      	beq.n	800797e <__swbuf_r+0x5a>
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	07db      	lsls	r3, r3, #31
 8007978:	d506      	bpl.n	8007988 <__swbuf_r+0x64>
 800797a:	2e0a      	cmp	r6, #10
 800797c:	d104      	bne.n	8007988 <__swbuf_r+0x64>
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f7ff fd89 	bl	8007498 <_fflush_r>
 8007986:	b938      	cbnz	r0, 8007998 <__swbuf_r+0x74>
 8007988:	4638      	mov	r0, r7
 800798a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800798c:	4621      	mov	r1, r4
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f806 	bl	80079a0 <__swsetup_r>
 8007994:	2800      	cmp	r0, #0
 8007996:	d0d5      	beq.n	8007944 <__swbuf_r+0x20>
 8007998:	f04f 37ff 	mov.w	r7, #4294967295
 800799c:	e7f4      	b.n	8007988 <__swbuf_r+0x64>
	...

080079a0 <__swsetup_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4b2a      	ldr	r3, [pc, #168]	; (8007a4c <__swsetup_r+0xac>)
 80079a4:	4605      	mov	r5, r0
 80079a6:	6818      	ldr	r0, [r3, #0]
 80079a8:	460c      	mov	r4, r1
 80079aa:	b118      	cbz	r0, 80079b4 <__swsetup_r+0x14>
 80079ac:	6a03      	ldr	r3, [r0, #32]
 80079ae:	b90b      	cbnz	r3, 80079b4 <__swsetup_r+0x14>
 80079b0:	f7fd ff76 	bl	80058a0 <__sinit>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079ba:	0718      	lsls	r0, r3, #28
 80079bc:	d422      	bmi.n	8007a04 <__swsetup_r+0x64>
 80079be:	06d9      	lsls	r1, r3, #27
 80079c0:	d407      	bmi.n	80079d2 <__swsetup_r+0x32>
 80079c2:	2309      	movs	r3, #9
 80079c4:	602b      	str	r3, [r5, #0]
 80079c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	e034      	b.n	8007a3c <__swsetup_r+0x9c>
 80079d2:	0758      	lsls	r0, r3, #29
 80079d4:	d512      	bpl.n	80079fc <__swsetup_r+0x5c>
 80079d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079d8:	b141      	cbz	r1, 80079ec <__swsetup_r+0x4c>
 80079da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079de:	4299      	cmp	r1, r3
 80079e0:	d002      	beq.n	80079e8 <__swsetup_r+0x48>
 80079e2:	4628      	mov	r0, r5
 80079e4:	f7fe fefe 	bl	80067e4 <_free_r>
 80079e8:	2300      	movs	r3, #0
 80079ea:	6363      	str	r3, [r4, #52]	; 0x34
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	2300      	movs	r3, #0
 80079f6:	6063      	str	r3, [r4, #4]
 80079f8:	6923      	ldr	r3, [r4, #16]
 80079fa:	6023      	str	r3, [r4, #0]
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f043 0308 	orr.w	r3, r3, #8
 8007a02:	81a3      	strh	r3, [r4, #12]
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	b94b      	cbnz	r3, 8007a1c <__swsetup_r+0x7c>
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a12:	d003      	beq.n	8007a1c <__swsetup_r+0x7c>
 8007a14:	4621      	mov	r1, r4
 8007a16:	4628      	mov	r0, r5
 8007a18:	f000 f884 	bl	8007b24 <__smakebuf_r>
 8007a1c:	89a0      	ldrh	r0, [r4, #12]
 8007a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a22:	f010 0301 	ands.w	r3, r0, #1
 8007a26:	d00a      	beq.n	8007a3e <__swsetup_r+0x9e>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60a3      	str	r3, [r4, #8]
 8007a2c:	6963      	ldr	r3, [r4, #20]
 8007a2e:	425b      	negs	r3, r3
 8007a30:	61a3      	str	r3, [r4, #24]
 8007a32:	6923      	ldr	r3, [r4, #16]
 8007a34:	b943      	cbnz	r3, 8007a48 <__swsetup_r+0xa8>
 8007a36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a3a:	d1c4      	bne.n	80079c6 <__swsetup_r+0x26>
 8007a3c:	bd38      	pop	{r3, r4, r5, pc}
 8007a3e:	0781      	lsls	r1, r0, #30
 8007a40:	bf58      	it	pl
 8007a42:	6963      	ldrpl	r3, [r4, #20]
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	e7f4      	b.n	8007a32 <__swsetup_r+0x92>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e7f7      	b.n	8007a3c <__swsetup_r+0x9c>
 8007a4c:	20000064 	.word	0x20000064

08007a50 <_raise_r>:
 8007a50:	291f      	cmp	r1, #31
 8007a52:	b538      	push	{r3, r4, r5, lr}
 8007a54:	4604      	mov	r4, r0
 8007a56:	460d      	mov	r5, r1
 8007a58:	d904      	bls.n	8007a64 <_raise_r+0x14>
 8007a5a:	2316      	movs	r3, #22
 8007a5c:	6003      	str	r3, [r0, #0]
 8007a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007a66:	b112      	cbz	r2, 8007a6e <_raise_r+0x1e>
 8007a68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a6c:	b94b      	cbnz	r3, 8007a82 <_raise_r+0x32>
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f000 f830 	bl	8007ad4 <_getpid_r>
 8007a74:	462a      	mov	r2, r5
 8007a76:	4601      	mov	r1, r0
 8007a78:	4620      	mov	r0, r4
 8007a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a7e:	f000 b817 	b.w	8007ab0 <_kill_r>
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d00a      	beq.n	8007a9c <_raise_r+0x4c>
 8007a86:	1c59      	adds	r1, r3, #1
 8007a88:	d103      	bne.n	8007a92 <_raise_r+0x42>
 8007a8a:	2316      	movs	r3, #22
 8007a8c:	6003      	str	r3, [r0, #0]
 8007a8e:	2001      	movs	r0, #1
 8007a90:	e7e7      	b.n	8007a62 <_raise_r+0x12>
 8007a92:	2400      	movs	r4, #0
 8007a94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a98:	4628      	mov	r0, r5
 8007a9a:	4798      	blx	r3
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	e7e0      	b.n	8007a62 <_raise_r+0x12>

08007aa0 <raise>:
 8007aa0:	4b02      	ldr	r3, [pc, #8]	; (8007aac <raise+0xc>)
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	f7ff bfd3 	b.w	8007a50 <_raise_r>
 8007aaa:	bf00      	nop
 8007aac:	20000064 	.word	0x20000064

08007ab0 <_kill_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d07      	ldr	r5, [pc, #28]	; (8007ad0 <_kill_r+0x20>)
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	4608      	mov	r0, r1
 8007aba:	4611      	mov	r1, r2
 8007abc:	602b      	str	r3, [r5, #0]
 8007abe:	f7f9 ff79 	bl	80019b4 <_kill>
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	d102      	bne.n	8007acc <_kill_r+0x1c>
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	b103      	cbz	r3, 8007acc <_kill_r+0x1c>
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	bd38      	pop	{r3, r4, r5, pc}
 8007ace:	bf00      	nop
 8007ad0:	200004a0 	.word	0x200004a0

08007ad4 <_getpid_r>:
 8007ad4:	f7f9 bf66 	b.w	80019a4 <_getpid>

08007ad8 <__swhatbuf_r>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	460c      	mov	r4, r1
 8007adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	b096      	sub	sp, #88	; 0x58
 8007ae4:	4615      	mov	r5, r2
 8007ae6:	461e      	mov	r6, r3
 8007ae8:	da0d      	bge.n	8007b06 <__swhatbuf_r+0x2e>
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007af0:	f04f 0100 	mov.w	r1, #0
 8007af4:	bf0c      	ite	eq
 8007af6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007afa:	2340      	movne	r3, #64	; 0x40
 8007afc:	2000      	movs	r0, #0
 8007afe:	6031      	str	r1, [r6, #0]
 8007b00:	602b      	str	r3, [r5, #0]
 8007b02:	b016      	add	sp, #88	; 0x58
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
 8007b06:	466a      	mov	r2, sp
 8007b08:	f000 f848 	bl	8007b9c <_fstat_r>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	dbec      	blt.n	8007aea <__swhatbuf_r+0x12>
 8007b10:	9901      	ldr	r1, [sp, #4]
 8007b12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b1a:	4259      	negs	r1, r3
 8007b1c:	4159      	adcs	r1, r3
 8007b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b22:	e7eb      	b.n	8007afc <__swhatbuf_r+0x24>

08007b24 <__smakebuf_r>:
 8007b24:	898b      	ldrh	r3, [r1, #12]
 8007b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b28:	079d      	lsls	r5, r3, #30
 8007b2a:	4606      	mov	r6, r0
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	d507      	bpl.n	8007b40 <__smakebuf_r+0x1c>
 8007b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	6123      	str	r3, [r4, #16]
 8007b38:	2301      	movs	r3, #1
 8007b3a:	6163      	str	r3, [r4, #20]
 8007b3c:	b002      	add	sp, #8
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	ab01      	add	r3, sp, #4
 8007b42:	466a      	mov	r2, sp
 8007b44:	f7ff ffc8 	bl	8007ad8 <__swhatbuf_r>
 8007b48:	9900      	ldr	r1, [sp, #0]
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7fe febd 	bl	80068cc <_malloc_r>
 8007b52:	b948      	cbnz	r0, 8007b68 <__smakebuf_r+0x44>
 8007b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b58:	059a      	lsls	r2, r3, #22
 8007b5a:	d4ef      	bmi.n	8007b3c <__smakebuf_r+0x18>
 8007b5c:	f023 0303 	bic.w	r3, r3, #3
 8007b60:	f043 0302 	orr.w	r3, r3, #2
 8007b64:	81a3      	strh	r3, [r4, #12]
 8007b66:	e7e3      	b.n	8007b30 <__smakebuf_r+0xc>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	6020      	str	r0, [r4, #0]
 8007b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b70:	81a3      	strh	r3, [r4, #12]
 8007b72:	9b00      	ldr	r3, [sp, #0]
 8007b74:	6163      	str	r3, [r4, #20]
 8007b76:	9b01      	ldr	r3, [sp, #4]
 8007b78:	6120      	str	r0, [r4, #16]
 8007b7a:	b15b      	cbz	r3, 8007b94 <__smakebuf_r+0x70>
 8007b7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b80:	4630      	mov	r0, r6
 8007b82:	f000 f81d 	bl	8007bc0 <_isatty_r>
 8007b86:	b128      	cbz	r0, 8007b94 <__smakebuf_r+0x70>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	f023 0303 	bic.w	r3, r3, #3
 8007b8e:	f043 0301 	orr.w	r3, r3, #1
 8007b92:	81a3      	strh	r3, [r4, #12]
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	431d      	orrs	r5, r3
 8007b98:	81a5      	strh	r5, [r4, #12]
 8007b9a:	e7cf      	b.n	8007b3c <__smakebuf_r+0x18>

08007b9c <_fstat_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	4d07      	ldr	r5, [pc, #28]	; (8007bbc <_fstat_r+0x20>)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	4608      	mov	r0, r1
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	602b      	str	r3, [r5, #0]
 8007baa:	f7f9 ff62 	bl	8001a72 <_fstat>
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	d102      	bne.n	8007bb8 <_fstat_r+0x1c>
 8007bb2:	682b      	ldr	r3, [r5, #0]
 8007bb4:	b103      	cbz	r3, 8007bb8 <_fstat_r+0x1c>
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	bd38      	pop	{r3, r4, r5, pc}
 8007bba:	bf00      	nop
 8007bbc:	200004a0 	.word	0x200004a0

08007bc0 <_isatty_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4d06      	ldr	r5, [pc, #24]	; (8007bdc <_isatty_r+0x1c>)
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	4608      	mov	r0, r1
 8007bca:	602b      	str	r3, [r5, #0]
 8007bcc:	f7f9 ff61 	bl	8001a92 <_isatty>
 8007bd0:	1c43      	adds	r3, r0, #1
 8007bd2:	d102      	bne.n	8007bda <_isatty_r+0x1a>
 8007bd4:	682b      	ldr	r3, [r5, #0]
 8007bd6:	b103      	cbz	r3, 8007bda <_isatty_r+0x1a>
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	bd38      	pop	{r3, r4, r5, pc}
 8007bdc:	200004a0 	.word	0x200004a0

08007be0 <log10f>:
 8007be0:	b508      	push	{r3, lr}
 8007be2:	ed2d 8b02 	vpush	{d8}
 8007be6:	eeb0 8a40 	vmov.f32	s16, s0
 8007bea:	f000 f891 	bl	8007d10 <__ieee754_log10f>
 8007bee:	eeb4 8a48 	vcmp.f32	s16, s16
 8007bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf6:	d60f      	bvs.n	8007c18 <log10f+0x38>
 8007bf8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c00:	d80a      	bhi.n	8007c18 <log10f+0x38>
 8007c02:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0a:	d108      	bne.n	8007c1e <log10f+0x3e>
 8007c0c:	f7fd ff40 	bl	8005a90 <__errno>
 8007c10:	2322      	movs	r3, #34	; 0x22
 8007c12:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007c34 <log10f+0x54>
 8007c16:	6003      	str	r3, [r0, #0]
 8007c18:	ecbd 8b02 	vpop	{d8}
 8007c1c:	bd08      	pop	{r3, pc}
 8007c1e:	f7fd ff37 	bl	8005a90 <__errno>
 8007c22:	ecbd 8b02 	vpop	{d8}
 8007c26:	2321      	movs	r3, #33	; 0x21
 8007c28:	6003      	str	r3, [r0, #0]
 8007c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007c2e:	4802      	ldr	r0, [pc, #8]	; (8007c38 <log10f+0x58>)
 8007c30:	f000 b868 	b.w	8007d04 <nanf>
 8007c34:	ff800000 	.word	0xff800000
 8007c38:	08008a3a 	.word	0x08008a3a

08007c3c <powf>:
 8007c3c:	b508      	push	{r3, lr}
 8007c3e:	ed2d 8b04 	vpush	{d8-d9}
 8007c42:	eeb0 8a60 	vmov.f32	s16, s1
 8007c46:	eeb0 9a40 	vmov.f32	s18, s0
 8007c4a:	f000 f8b9 	bl	8007dc0 <__ieee754_powf>
 8007c4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c56:	eef0 8a40 	vmov.f32	s17, s0
 8007c5a:	d63e      	bvs.n	8007cda <powf+0x9e>
 8007c5c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c64:	d112      	bne.n	8007c8c <powf+0x50>
 8007c66:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6e:	d039      	beq.n	8007ce4 <powf+0xa8>
 8007c70:	eeb0 0a48 	vmov.f32	s0, s16
 8007c74:	f000 f839 	bl	8007cea <finitef>
 8007c78:	b378      	cbz	r0, 8007cda <powf+0x9e>
 8007c7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c82:	d52a      	bpl.n	8007cda <powf+0x9e>
 8007c84:	f7fd ff04 	bl	8005a90 <__errno>
 8007c88:	2322      	movs	r3, #34	; 0x22
 8007c8a:	e014      	b.n	8007cb6 <powf+0x7a>
 8007c8c:	f000 f82d 	bl	8007cea <finitef>
 8007c90:	b998      	cbnz	r0, 8007cba <powf+0x7e>
 8007c92:	eeb0 0a49 	vmov.f32	s0, s18
 8007c96:	f000 f828 	bl	8007cea <finitef>
 8007c9a:	b170      	cbz	r0, 8007cba <powf+0x7e>
 8007c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8007ca0:	f000 f823 	bl	8007cea <finitef>
 8007ca4:	b148      	cbz	r0, 8007cba <powf+0x7e>
 8007ca6:	eef4 8a68 	vcmp.f32	s17, s17
 8007caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cae:	d7e9      	bvc.n	8007c84 <powf+0x48>
 8007cb0:	f7fd feee 	bl	8005a90 <__errno>
 8007cb4:	2321      	movs	r3, #33	; 0x21
 8007cb6:	6003      	str	r3, [r0, #0]
 8007cb8:	e00f      	b.n	8007cda <powf+0x9e>
 8007cba:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc2:	d10a      	bne.n	8007cda <powf+0x9e>
 8007cc4:	eeb0 0a49 	vmov.f32	s0, s18
 8007cc8:	f000 f80f 	bl	8007cea <finitef>
 8007ccc:	b128      	cbz	r0, 8007cda <powf+0x9e>
 8007cce:	eeb0 0a48 	vmov.f32	s0, s16
 8007cd2:	f000 f80a 	bl	8007cea <finitef>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d1d4      	bne.n	8007c84 <powf+0x48>
 8007cda:	eeb0 0a68 	vmov.f32	s0, s17
 8007cde:	ecbd 8b04 	vpop	{d8-d9}
 8007ce2:	bd08      	pop	{r3, pc}
 8007ce4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8007ce8:	e7f7      	b.n	8007cda <powf+0x9e>

08007cea <finitef>:
 8007cea:	b082      	sub	sp, #8
 8007cec:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007cf0:	9801      	ldr	r0, [sp, #4]
 8007cf2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007cf6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007cfa:	bfac      	ite	ge
 8007cfc:	2000      	movge	r0, #0
 8007cfe:	2001      	movlt	r0, #1
 8007d00:	b002      	add	sp, #8
 8007d02:	4770      	bx	lr

08007d04 <nanf>:
 8007d04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007d0c <nanf+0x8>
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	7fc00000 	.word	0x7fc00000

08007d10 <__ieee754_log10f>:
 8007d10:	b508      	push	{r3, lr}
 8007d12:	ee10 2a10 	vmov	r2, s0
 8007d16:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007d1a:	ed2d 8b02 	vpush	{d8}
 8007d1e:	d108      	bne.n	8007d32 <__ieee754_log10f+0x22>
 8007d20:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007da8 <__ieee754_log10f+0x98>
 8007d24:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007dac <__ieee754_log10f+0x9c>
 8007d28:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007d2c:	ecbd 8b02 	vpop	{d8}
 8007d30:	bd08      	pop	{r3, pc}
 8007d32:	2a00      	cmp	r2, #0
 8007d34:	da02      	bge.n	8007d3c <__ieee754_log10f+0x2c>
 8007d36:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007d3a:	e7f3      	b.n	8007d24 <__ieee754_log10f+0x14>
 8007d3c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007d40:	db02      	blt.n	8007d48 <__ieee754_log10f+0x38>
 8007d42:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d46:	e7f1      	b.n	8007d2c <__ieee754_log10f+0x1c>
 8007d48:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007d4c:	bfbf      	itttt	lt
 8007d4e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8007db0 <__ieee754_log10f+0xa0>
 8007d52:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007d56:	f06f 0118 	mvnlt.w	r1, #24
 8007d5a:	ee17 2a90 	vmovlt	r2, s15
 8007d5e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007d62:	bfa8      	it	ge
 8007d64:	2100      	movge	r1, #0
 8007d66:	3b7f      	subs	r3, #127	; 0x7f
 8007d68:	440b      	add	r3, r1
 8007d6a:	0fd9      	lsrs	r1, r3, #31
 8007d6c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007d70:	ee07 3a90 	vmov	s15, r3
 8007d74:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007d78:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8007d7c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007d80:	ee00 3a10 	vmov	s0, r3
 8007d84:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007d88:	f000 fb78 	bl	800847c <__ieee754_logf>
 8007d8c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007db4 <__ieee754_log10f+0xa4>
 8007d90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d94:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007db8 <__ieee754_log10f+0xa8>
 8007d98:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007d9c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007dbc <__ieee754_log10f+0xac>
 8007da0:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007da4:	e7c2      	b.n	8007d2c <__ieee754_log10f+0x1c>
 8007da6:	bf00      	nop
 8007da8:	cc000000 	.word	0xcc000000
 8007dac:	00000000 	.word	0x00000000
 8007db0:	4c000000 	.word	0x4c000000
 8007db4:	3ede5bd9 	.word	0x3ede5bd9
 8007db8:	355427db 	.word	0x355427db
 8007dbc:	3e9a2080 	.word	0x3e9a2080

08007dc0 <__ieee754_powf>:
 8007dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc4:	ee10 4a90 	vmov	r4, s1
 8007dc8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8007dcc:	ed2d 8b02 	vpush	{d8}
 8007dd0:	ee10 7a10 	vmov	r7, s0
 8007dd4:	eeb0 8a40 	vmov.f32	s16, s0
 8007dd8:	eef0 8a60 	vmov.f32	s17, s1
 8007ddc:	d10c      	bne.n	8007df8 <__ieee754_powf+0x38>
 8007dde:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8007de2:	007f      	lsls	r7, r7, #1
 8007de4:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8007de8:	f240 8292 	bls.w	8008310 <__ieee754_powf+0x550>
 8007dec:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007df0:	ecbd 8b02 	vpop	{d8}
 8007df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df8:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8007dfc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007e00:	dcf4      	bgt.n	8007dec <__ieee754_powf+0x2c>
 8007e02:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8007e06:	dd08      	ble.n	8007e1a <__ieee754_powf+0x5a>
 8007e08:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007e0c:	d1ee      	bne.n	8007dec <__ieee754_powf+0x2c>
 8007e0e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8007e12:	0064      	lsls	r4, r4, #1
 8007e14:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007e18:	e7e6      	b.n	8007de8 <__ieee754_powf+0x28>
 8007e1a:	2f00      	cmp	r7, #0
 8007e1c:	da20      	bge.n	8007e60 <__ieee754_powf+0xa0>
 8007e1e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8007e22:	da2d      	bge.n	8007e80 <__ieee754_powf+0xc0>
 8007e24:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007e28:	f2c0 827b 	blt.w	8008322 <__ieee754_powf+0x562>
 8007e2c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8007e30:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007e34:	fa48 f603 	asr.w	r6, r8, r3
 8007e38:	fa06 f303 	lsl.w	r3, r6, r3
 8007e3c:	4543      	cmp	r3, r8
 8007e3e:	f040 8270 	bne.w	8008322 <__ieee754_powf+0x562>
 8007e42:	f006 0601 	and.w	r6, r6, #1
 8007e46:	f1c6 0602 	rsb	r6, r6, #2
 8007e4a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007e4e:	d11f      	bne.n	8007e90 <__ieee754_powf+0xd0>
 8007e50:	2c00      	cmp	r4, #0
 8007e52:	f280 8263 	bge.w	800831c <__ieee754_powf+0x55c>
 8007e56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007e5a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007e5e:	e7c7      	b.n	8007df0 <__ieee754_powf+0x30>
 8007e60:	2600      	movs	r6, #0
 8007e62:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8007e66:	d1f0      	bne.n	8007e4a <__ieee754_powf+0x8a>
 8007e68:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8007e6c:	f000 8250 	beq.w	8008310 <__ieee754_powf+0x550>
 8007e70:	dd08      	ble.n	8007e84 <__ieee754_powf+0xc4>
 8007e72:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8008178 <__ieee754_powf+0x3b8>
 8007e76:	2c00      	cmp	r4, #0
 8007e78:	bfa8      	it	ge
 8007e7a:	eeb0 0a68 	vmovge.f32	s0, s17
 8007e7e:	e7b7      	b.n	8007df0 <__ieee754_powf+0x30>
 8007e80:	2602      	movs	r6, #2
 8007e82:	e7ee      	b.n	8007e62 <__ieee754_powf+0xa2>
 8007e84:	2c00      	cmp	r4, #0
 8007e86:	f280 8246 	bge.w	8008316 <__ieee754_powf+0x556>
 8007e8a:	eeb1 0a68 	vneg.f32	s0, s17
 8007e8e:	e7af      	b.n	8007df0 <__ieee754_powf+0x30>
 8007e90:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8007e94:	d102      	bne.n	8007e9c <__ieee754_powf+0xdc>
 8007e96:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007e9a:	e7a9      	b.n	8007df0 <__ieee754_powf+0x30>
 8007e9c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007ea0:	eeb0 0a48 	vmov.f32	s0, s16
 8007ea4:	d107      	bne.n	8007eb6 <__ieee754_powf+0xf6>
 8007ea6:	2f00      	cmp	r7, #0
 8007ea8:	db05      	blt.n	8007eb6 <__ieee754_powf+0xf6>
 8007eaa:	ecbd 8b02 	vpop	{d8}
 8007eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb2:	f000 badf 	b.w	8008474 <__ieee754_sqrtf>
 8007eb6:	f000 fa4d 	bl	8008354 <fabsf>
 8007eba:	b125      	cbz	r5, 8007ec6 <__ieee754_powf+0x106>
 8007ebc:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8007ec0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007ec4:	d115      	bne.n	8007ef2 <__ieee754_powf+0x132>
 8007ec6:	2c00      	cmp	r4, #0
 8007ec8:	bfbc      	itt	lt
 8007eca:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007ece:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007ed2:	2f00      	cmp	r7, #0
 8007ed4:	da8c      	bge.n	8007df0 <__ieee754_powf+0x30>
 8007ed6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8007eda:	4335      	orrs	r5, r6
 8007edc:	d104      	bne.n	8007ee8 <__ieee754_powf+0x128>
 8007ede:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007ee2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007ee6:	e783      	b.n	8007df0 <__ieee754_powf+0x30>
 8007ee8:	2e01      	cmp	r6, #1
 8007eea:	d181      	bne.n	8007df0 <__ieee754_powf+0x30>
 8007eec:	eeb1 0a40 	vneg.f32	s0, s0
 8007ef0:	e77e      	b.n	8007df0 <__ieee754_powf+0x30>
 8007ef2:	0ff8      	lsrs	r0, r7, #31
 8007ef4:	3801      	subs	r0, #1
 8007ef6:	ea56 0300 	orrs.w	r3, r6, r0
 8007efa:	d104      	bne.n	8007f06 <__ieee754_powf+0x146>
 8007efc:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007f00:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007f04:	e774      	b.n	8007df0 <__ieee754_powf+0x30>
 8007f06:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8007f0a:	dd73      	ble.n	8007ff4 <__ieee754_powf+0x234>
 8007f0c:	4b9b      	ldr	r3, [pc, #620]	; (800817c <__ieee754_powf+0x3bc>)
 8007f0e:	429d      	cmp	r5, r3
 8007f10:	dc08      	bgt.n	8007f24 <__ieee754_powf+0x164>
 8007f12:	2c00      	cmp	r4, #0
 8007f14:	da0b      	bge.n	8007f2e <__ieee754_powf+0x16e>
 8007f16:	2000      	movs	r0, #0
 8007f18:	ecbd 8b02 	vpop	{d8}
 8007f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	f000 baa2 	b.w	8008468 <__math_oflowf>
 8007f24:	4b96      	ldr	r3, [pc, #600]	; (8008180 <__ieee754_powf+0x3c0>)
 8007f26:	429d      	cmp	r5, r3
 8007f28:	dd08      	ble.n	8007f3c <__ieee754_powf+0x17c>
 8007f2a:	2c00      	cmp	r4, #0
 8007f2c:	dcf3      	bgt.n	8007f16 <__ieee754_powf+0x156>
 8007f2e:	2000      	movs	r0, #0
 8007f30:	ecbd 8b02 	vpop	{d8}
 8007f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f38:	f000 ba90 	b.w	800845c <__math_uflowf>
 8007f3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007f40:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007f44:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8008184 <__ieee754_powf+0x3c4>
 8007f48:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007f4c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007f50:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007f54:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007f58:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f60:	eddf 7a89 	vldr	s15, [pc, #548]	; 8008188 <__ieee754_powf+0x3c8>
 8007f64:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8007f68:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800818c <__ieee754_powf+0x3cc>
 8007f6c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007f70:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8008190 <__ieee754_powf+0x3d0>
 8007f74:	eef0 6a67 	vmov.f32	s13, s15
 8007f78:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007f7c:	ee16 3a90 	vmov	r3, s13
 8007f80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007f84:	f023 030f 	bic.w	r3, r3, #15
 8007f88:	ee06 3a90 	vmov	s13, r3
 8007f8c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8007f90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f94:	3e01      	subs	r6, #1
 8007f96:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8007f9a:	4306      	orrs	r6, r0
 8007f9c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007fa0:	f024 040f 	bic.w	r4, r4, #15
 8007fa4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007fa8:	bf08      	it	eq
 8007faa:	eeb0 8a47 	vmoveq.f32	s16, s14
 8007fae:	ee07 4a10 	vmov	s14, r4
 8007fb2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007fb6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007fc2:	ee07 4a10 	vmov	s14, r4
 8007fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007fca:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007fce:	ee17 1a10 	vmov	r1, s14
 8007fd2:	2900      	cmp	r1, #0
 8007fd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007fd8:	f340 817c 	ble.w	80082d4 <__ieee754_powf+0x514>
 8007fdc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007fe0:	f340 80f8 	ble.w	80081d4 <__ieee754_powf+0x414>
 8007fe4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fec:	bf4c      	ite	mi
 8007fee:	2001      	movmi	r0, #1
 8007ff0:	2000      	movpl	r0, #0
 8007ff2:	e791      	b.n	8007f18 <__ieee754_powf+0x158>
 8007ff4:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8007ff8:	bf01      	itttt	eq
 8007ffa:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8008194 <__ieee754_powf+0x3d4>
 8007ffe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008002:	f06f 0317 	mvneq.w	r3, #23
 8008006:	ee17 5a90 	vmoveq	r5, s15
 800800a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800800e:	bf18      	it	ne
 8008010:	2300      	movne	r3, #0
 8008012:	3a7f      	subs	r2, #127	; 0x7f
 8008014:	441a      	add	r2, r3
 8008016:	4b60      	ldr	r3, [pc, #384]	; (8008198 <__ieee754_powf+0x3d8>)
 8008018:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800801c:	429d      	cmp	r5, r3
 800801e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8008022:	dd06      	ble.n	8008032 <__ieee754_powf+0x272>
 8008024:	4b5d      	ldr	r3, [pc, #372]	; (800819c <__ieee754_powf+0x3dc>)
 8008026:	429d      	cmp	r5, r3
 8008028:	f340 80a4 	ble.w	8008174 <__ieee754_powf+0x3b4>
 800802c:	3201      	adds	r2, #1
 800802e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8008032:	2500      	movs	r5, #0
 8008034:	4b5a      	ldr	r3, [pc, #360]	; (80081a0 <__ieee754_powf+0x3e0>)
 8008036:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800803a:	ee07 1a10 	vmov	s14, r1
 800803e:	edd3 5a00 	vldr	s11, [r3]
 8008042:	4b58      	ldr	r3, [pc, #352]	; (80081a4 <__ieee754_powf+0x3e4>)
 8008044:	ee75 7a87 	vadd.f32	s15, s11, s14
 8008048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800804c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8008050:	1049      	asrs	r1, r1, #1
 8008052:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8008056:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800805a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800805e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8008062:	ee07 1a90 	vmov	s15, r1
 8008066:	ee26 5a24 	vmul.f32	s10, s12, s9
 800806a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800806e:	ee15 7a10 	vmov	r7, s10
 8008072:	401f      	ands	r7, r3
 8008074:	ee06 7a90 	vmov	s13, r7
 8008078:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800807c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8008080:	ee65 7a05 	vmul.f32	s15, s10, s10
 8008084:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008088:	eddf 5a47 	vldr	s11, [pc, #284]	; 80081a8 <__ieee754_powf+0x3e8>
 800808c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80081ac <__ieee754_powf+0x3ec>
 8008090:	eee7 5a87 	vfma.f32	s11, s15, s14
 8008094:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80081b0 <__ieee754_powf+0x3f0>
 8008098:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800809c:	eddf 5a39 	vldr	s11, [pc, #228]	; 8008184 <__ieee754_powf+0x3c4>
 80080a0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80080a4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80081b4 <__ieee754_powf+0x3f4>
 80080a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80080ac:	eddf 5a42 	vldr	s11, [pc, #264]	; 80081b8 <__ieee754_powf+0x3f8>
 80080b0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80080b4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80080b8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80080bc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80080c0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80080c4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80080c8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80080cc:	eef0 5a67 	vmov.f32	s11, s15
 80080d0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80080d4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80080d8:	ee15 1a90 	vmov	r1, s11
 80080dc:	4019      	ands	r1, r3
 80080de:	ee05 1a90 	vmov	s11, r1
 80080e2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80080e6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80080ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 80080f2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80080f6:	eeb0 6a67 	vmov.f32	s12, s15
 80080fa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80080fe:	ee16 1a10 	vmov	r1, s12
 8008102:	4019      	ands	r1, r3
 8008104:	ee07 1a10 	vmov	s14, r1
 8008108:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800810c:	ee06 1a10 	vmov	s12, r1
 8008110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008114:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80081bc <__ieee754_powf+0x3fc>
 8008118:	4929      	ldr	r1, [pc, #164]	; (80081c0 <__ieee754_powf+0x400>)
 800811a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 80081c4 <__ieee754_powf+0x404>
 800811e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008122:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80081c8 <__ieee754_powf+0x408>
 8008126:	eee6 7a07 	vfma.f32	s15, s12, s14
 800812a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800812e:	ed91 7a00 	vldr	s14, [r1]
 8008132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008136:	ee07 2a10 	vmov	s14, r2
 800813a:	eef0 6a67 	vmov.f32	s13, s15
 800813e:	4a23      	ldr	r2, [pc, #140]	; (80081cc <__ieee754_powf+0x40c>)
 8008140:	eee6 6a25 	vfma.f32	s13, s12, s11
 8008144:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8008148:	ed92 5a00 	vldr	s10, [r2]
 800814c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008150:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008154:	ee76 6a87 	vadd.f32	s13, s13, s14
 8008158:	ee16 2a90 	vmov	r2, s13
 800815c:	4013      	ands	r3, r2
 800815e:	ee06 3a90 	vmov	s13, r3
 8008162:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008166:	ee37 7a45 	vsub.f32	s14, s14, s10
 800816a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800816e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008172:	e70f      	b.n	8007f94 <__ieee754_powf+0x1d4>
 8008174:	2501      	movs	r5, #1
 8008176:	e75d      	b.n	8008034 <__ieee754_powf+0x274>
 8008178:	00000000 	.word	0x00000000
 800817c:	3f7ffff3 	.word	0x3f7ffff3
 8008180:	3f800007 	.word	0x3f800007
 8008184:	3eaaaaab 	.word	0x3eaaaaab
 8008188:	3fb8aa3b 	.word	0x3fb8aa3b
 800818c:	36eca570 	.word	0x36eca570
 8008190:	3fb8aa00 	.word	0x3fb8aa00
 8008194:	4b800000 	.word	0x4b800000
 8008198:	001cc471 	.word	0x001cc471
 800819c:	005db3d6 	.word	0x005db3d6
 80081a0:	08008a3c 	.word	0x08008a3c
 80081a4:	fffff000 	.word	0xfffff000
 80081a8:	3e6c3255 	.word	0x3e6c3255
 80081ac:	3e53f142 	.word	0x3e53f142
 80081b0:	3e8ba305 	.word	0x3e8ba305
 80081b4:	3edb6db7 	.word	0x3edb6db7
 80081b8:	3f19999a 	.word	0x3f19999a
 80081bc:	3f76384f 	.word	0x3f76384f
 80081c0:	08008a4c 	.word	0x08008a4c
 80081c4:	3f763800 	.word	0x3f763800
 80081c8:	369dc3a0 	.word	0x369dc3a0
 80081cc:	08008a44 	.word	0x08008a44
 80081d0:	3338aa3c 	.word	0x3338aa3c
 80081d4:	f040 8093 	bne.w	80082fe <__ieee754_powf+0x53e>
 80081d8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80081d0 <__ieee754_powf+0x410>
 80081dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80081e0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80081e4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80081e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ec:	f73f aefa 	bgt.w	8007fe4 <__ieee754_powf+0x224>
 80081f0:	15db      	asrs	r3, r3, #23
 80081f2:	3b7e      	subs	r3, #126	; 0x7e
 80081f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80081f8:	4118      	asrs	r0, r3
 80081fa:	4408      	add	r0, r1
 80081fc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008200:	4a49      	ldr	r2, [pc, #292]	; (8008328 <__ieee754_powf+0x568>)
 8008202:	3b7f      	subs	r3, #127	; 0x7f
 8008204:	411a      	asrs	r2, r3
 8008206:	4002      	ands	r2, r0
 8008208:	ee07 2a10 	vmov	s14, r2
 800820c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8008210:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008214:	f1c3 0317 	rsb	r3, r3, #23
 8008218:	4118      	asrs	r0, r3
 800821a:	2900      	cmp	r1, #0
 800821c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008220:	bfb8      	it	lt
 8008222:	4240      	neglt	r0, r0
 8008224:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008228:	eddf 6a40 	vldr	s13, [pc, #256]	; 800832c <__ieee754_powf+0x56c>
 800822c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008330 <__ieee754_powf+0x570>
 8008230:	ee17 3a10 	vmov	r3, s14
 8008234:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008238:	f023 030f 	bic.w	r3, r3, #15
 800823c:	ee07 3a10 	vmov	s14, r3
 8008240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008244:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008248:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800824c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008334 <__ieee754_powf+0x574>
 8008250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008254:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8008258:	eef0 6a67 	vmov.f32	s13, s15
 800825c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008260:	eef0 5a66 	vmov.f32	s11, s13
 8008264:	eee7 5a46 	vfms.f32	s11, s14, s12
 8008268:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800826c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008270:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8008338 <__ieee754_powf+0x578>
 8008274:	eddf 5a31 	vldr	s11, [pc, #196]	; 800833c <__ieee754_powf+0x57c>
 8008278:	eea7 6a25 	vfma.f32	s12, s14, s11
 800827c:	eddf 5a30 	vldr	s11, [pc, #192]	; 8008340 <__ieee754_powf+0x580>
 8008280:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008284:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8008344 <__ieee754_powf+0x584>
 8008288:	eea5 6a87 	vfma.f32	s12, s11, s14
 800828c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008348 <__ieee754_powf+0x588>
 8008290:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008294:	eeb0 6a66 	vmov.f32	s12, s13
 8008298:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800829c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80082a0:	ee66 5a86 	vmul.f32	s11, s13, s12
 80082a4:	ee36 6a47 	vsub.f32	s12, s12, s14
 80082a8:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80082ac:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80082b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80082bc:	ee10 3a10 	vmov	r3, s0
 80082c0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80082c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082c8:	da1f      	bge.n	800830a <__ieee754_powf+0x54a>
 80082ca:	f000 f84b 	bl	8008364 <scalbnf>
 80082ce:	ee20 0a08 	vmul.f32	s0, s0, s16
 80082d2:	e58d      	b.n	8007df0 <__ieee754_powf+0x30>
 80082d4:	4a1d      	ldr	r2, [pc, #116]	; (800834c <__ieee754_powf+0x58c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	dd07      	ble.n	80082ea <__ieee754_powf+0x52a>
 80082da:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80082de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e2:	bf4c      	ite	mi
 80082e4:	2001      	movmi	r0, #1
 80082e6:	2000      	movpl	r0, #0
 80082e8:	e622      	b.n	8007f30 <__ieee754_powf+0x170>
 80082ea:	d108      	bne.n	80082fe <__ieee754_powf+0x53e>
 80082ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80082f0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80082f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082f8:	f6ff af7a 	blt.w	80081f0 <__ieee754_powf+0x430>
 80082fc:	e7ed      	b.n	80082da <__ieee754_powf+0x51a>
 80082fe:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008302:	f73f af75 	bgt.w	80081f0 <__ieee754_powf+0x430>
 8008306:	2000      	movs	r0, #0
 8008308:	e78c      	b.n	8008224 <__ieee754_powf+0x464>
 800830a:	ee00 3a10 	vmov	s0, r3
 800830e:	e7de      	b.n	80082ce <__ieee754_powf+0x50e>
 8008310:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008314:	e56c      	b.n	8007df0 <__ieee754_powf+0x30>
 8008316:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008350 <__ieee754_powf+0x590>
 800831a:	e569      	b.n	8007df0 <__ieee754_powf+0x30>
 800831c:	eeb0 0a48 	vmov.f32	s0, s16
 8008320:	e566      	b.n	8007df0 <__ieee754_powf+0x30>
 8008322:	2600      	movs	r6, #0
 8008324:	e591      	b.n	8007e4a <__ieee754_powf+0x8a>
 8008326:	bf00      	nop
 8008328:	ff800000 	.word	0xff800000
 800832c:	3f317218 	.word	0x3f317218
 8008330:	3f317200 	.word	0x3f317200
 8008334:	35bfbe8c 	.word	0x35bfbe8c
 8008338:	b5ddea0e 	.word	0xb5ddea0e
 800833c:	3331bb4c 	.word	0x3331bb4c
 8008340:	388ab355 	.word	0x388ab355
 8008344:	bb360b61 	.word	0xbb360b61
 8008348:	3e2aaaab 	.word	0x3e2aaaab
 800834c:	43160000 	.word	0x43160000
 8008350:	00000000 	.word	0x00000000

08008354 <fabsf>:
 8008354:	ee10 3a10 	vmov	r3, s0
 8008358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800835c:	ee00 3a10 	vmov	s0, r3
 8008360:	4770      	bx	lr
	...

08008364 <scalbnf>:
 8008364:	ee10 3a10 	vmov	r3, s0
 8008368:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800836c:	d02b      	beq.n	80083c6 <scalbnf+0x62>
 800836e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008372:	d302      	bcc.n	800837a <scalbnf+0x16>
 8008374:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008378:	4770      	bx	lr
 800837a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800837e:	d123      	bne.n	80083c8 <scalbnf+0x64>
 8008380:	4b24      	ldr	r3, [pc, #144]	; (8008414 <scalbnf+0xb0>)
 8008382:	eddf 7a25 	vldr	s15, [pc, #148]	; 8008418 <scalbnf+0xb4>
 8008386:	4298      	cmp	r0, r3
 8008388:	ee20 0a27 	vmul.f32	s0, s0, s15
 800838c:	db17      	blt.n	80083be <scalbnf+0x5a>
 800838e:	ee10 3a10 	vmov	r3, s0
 8008392:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008396:	3a19      	subs	r2, #25
 8008398:	f24c 3150 	movw	r1, #50000	; 0xc350
 800839c:	4288      	cmp	r0, r1
 800839e:	dd15      	ble.n	80083cc <scalbnf+0x68>
 80083a0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800841c <scalbnf+0xb8>
 80083a4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008420 <scalbnf+0xbc>
 80083a8:	ee10 3a10 	vmov	r3, s0
 80083ac:	eeb0 7a67 	vmov.f32	s14, s15
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bfb8      	it	lt
 80083b4:	eef0 7a66 	vmovlt.f32	s15, s13
 80083b8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80083bc:	4770      	bx	lr
 80083be:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008424 <scalbnf+0xc0>
 80083c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80083c6:	4770      	bx	lr
 80083c8:	0dd2      	lsrs	r2, r2, #23
 80083ca:	e7e5      	b.n	8008398 <scalbnf+0x34>
 80083cc:	4410      	add	r0, r2
 80083ce:	28fe      	cmp	r0, #254	; 0xfe
 80083d0:	dce6      	bgt.n	80083a0 <scalbnf+0x3c>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	dd06      	ble.n	80083e4 <scalbnf+0x80>
 80083d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80083da:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80083de:	ee00 3a10 	vmov	s0, r3
 80083e2:	4770      	bx	lr
 80083e4:	f110 0f16 	cmn.w	r0, #22
 80083e8:	da09      	bge.n	80083fe <scalbnf+0x9a>
 80083ea:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008424 <scalbnf+0xc0>
 80083ee:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8008428 <scalbnf+0xc4>
 80083f2:	ee10 3a10 	vmov	r3, s0
 80083f6:	eeb0 7a67 	vmov.f32	s14, s15
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	e7d9      	b.n	80083b2 <scalbnf+0x4e>
 80083fe:	3019      	adds	r0, #25
 8008400:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008404:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008408:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800842c <scalbnf+0xc8>
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	e7d7      	b.n	80083c2 <scalbnf+0x5e>
 8008412:	bf00      	nop
 8008414:	ffff3cb0 	.word	0xffff3cb0
 8008418:	4c000000 	.word	0x4c000000
 800841c:	7149f2ca 	.word	0x7149f2ca
 8008420:	f149f2ca 	.word	0xf149f2ca
 8008424:	0da24260 	.word	0x0da24260
 8008428:	8da24260 	.word	0x8da24260
 800842c:	33000000 	.word	0x33000000

08008430 <with_errnof>:
 8008430:	b513      	push	{r0, r1, r4, lr}
 8008432:	4604      	mov	r4, r0
 8008434:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008438:	f7fd fb2a 	bl	8005a90 <__errno>
 800843c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008440:	6004      	str	r4, [r0, #0]
 8008442:	b002      	add	sp, #8
 8008444:	bd10      	pop	{r4, pc}

08008446 <xflowf>:
 8008446:	b130      	cbz	r0, 8008456 <xflowf+0x10>
 8008448:	eef1 7a40 	vneg.f32	s15, s0
 800844c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008450:	2022      	movs	r0, #34	; 0x22
 8008452:	f7ff bfed 	b.w	8008430 <with_errnof>
 8008456:	eef0 7a40 	vmov.f32	s15, s0
 800845a:	e7f7      	b.n	800844c <xflowf+0x6>

0800845c <__math_uflowf>:
 800845c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008464 <__math_uflowf+0x8>
 8008460:	f7ff bff1 	b.w	8008446 <xflowf>
 8008464:	10000000 	.word	0x10000000

08008468 <__math_oflowf>:
 8008468:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008470 <__math_oflowf+0x8>
 800846c:	f7ff bfeb 	b.w	8008446 <xflowf>
 8008470:	70000000 	.word	0x70000000

08008474 <__ieee754_sqrtf>:
 8008474:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008478:	4770      	bx	lr
	...

0800847c <__ieee754_logf>:
 800847c:	ee10 3a10 	vmov	r3, s0
 8008480:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008484:	d106      	bne.n	8008494 <__ieee754_logf+0x18>
 8008486:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8008620 <__ieee754_logf+0x1a4>
 800848a:	eddf 7a66 	vldr	s15, [pc, #408]	; 8008624 <__ieee754_logf+0x1a8>
 800848e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008492:	4770      	bx	lr
 8008494:	2b00      	cmp	r3, #0
 8008496:	da02      	bge.n	800849e <__ieee754_logf+0x22>
 8008498:	ee30 7a40 	vsub.f32	s14, s0, s0
 800849c:	e7f5      	b.n	800848a <__ieee754_logf+0xe>
 800849e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80084a2:	db02      	blt.n	80084aa <__ieee754_logf+0x2e>
 80084a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80084a8:	4770      	bx	lr
 80084aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084ae:	bfb8      	it	lt
 80084b0:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8008628 <__ieee754_logf+0x1ac>
 80084b4:	485d      	ldr	r0, [pc, #372]	; (800862c <__ieee754_logf+0x1b0>)
 80084b6:	bfbe      	ittt	lt
 80084b8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80084bc:	f06f 0118 	mvnlt.w	r1, #24
 80084c0:	ee17 3a90 	vmovlt	r3, s15
 80084c4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80084c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80084cc:	4418      	add	r0, r3
 80084ce:	bfa8      	it	ge
 80084d0:	2100      	movge	r1, #0
 80084d2:	3a7f      	subs	r2, #127	; 0x7f
 80084d4:	440a      	add	r2, r1
 80084d6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80084da:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80084de:	4319      	orrs	r1, r3
 80084e0:	ee00 1a10 	vmov	s0, r1
 80084e4:	4952      	ldr	r1, [pc, #328]	; (8008630 <__ieee754_logf+0x1b4>)
 80084e6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80084ea:	f103 000f 	add.w	r0, r3, #15
 80084ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80084f2:	4001      	ands	r1, r0
 80084f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80084f8:	bb89      	cbnz	r1, 800855e <__ieee754_logf+0xe2>
 80084fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80084fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008502:	d10f      	bne.n	8008524 <__ieee754_logf+0xa8>
 8008504:	2a00      	cmp	r2, #0
 8008506:	f000 8087 	beq.w	8008618 <__ieee754_logf+0x19c>
 800850a:	ee07 2a90 	vmov	s15, r2
 800850e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8008634 <__ieee754_logf+0x1b8>
 8008512:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008638 <__ieee754_logf+0x1bc>
 8008516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800851a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800851e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8008522:	4770      	bx	lr
 8008524:	eddf 6a45 	vldr	s13, [pc, #276]	; 800863c <__ieee754_logf+0x1c0>
 8008528:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800852c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8008530:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008538:	b912      	cbnz	r2, 8008540 <__ieee754_logf+0xc4>
 800853a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800853e:	4770      	bx	lr
 8008540:	ee07 2a90 	vmov	s15, r2
 8008544:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008634 <__ieee754_logf+0x1b8>
 8008548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800854c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008550:	ee37 0a40 	vsub.f32	s0, s14, s0
 8008554:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008638 <__ieee754_logf+0x1bc>
 8008558:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800855c:	4770      	bx	lr
 800855e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008562:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008566:	eddf 5a36 	vldr	s11, [pc, #216]	; 8008640 <__ieee754_logf+0x1c4>
 800856a:	eddf 4a36 	vldr	s9, [pc, #216]	; 8008644 <__ieee754_logf+0x1c8>
 800856e:	4936      	ldr	r1, [pc, #216]	; (8008648 <__ieee754_logf+0x1cc>)
 8008570:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8008574:	4419      	add	r1, r3
 8008576:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800857a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800857e:	430b      	orrs	r3, r1
 8008580:	2b00      	cmp	r3, #0
 8008582:	ee07 2a90 	vmov	s15, r2
 8008586:	ee26 5a06 	vmul.f32	s10, s12, s12
 800858a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800858e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8008592:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800864c <__ieee754_logf+0x1d0>
 8008596:	eee7 7a25 	vfma.f32	s15, s14, s11
 800859a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008650 <__ieee754_logf+0x1d4>
 800859e:	eee7 5a87 	vfma.f32	s11, s15, s14
 80085a2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8008654 <__ieee754_logf+0x1d8>
 80085a6:	eee7 7a24 	vfma.f32	s15, s14, s9
 80085aa:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8008658 <__ieee754_logf+0x1dc>
 80085ae:	eee7 4a87 	vfma.f32	s9, s15, s14
 80085b2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800865c <__ieee754_logf+0x1e0>
 80085b6:	eee4 7a87 	vfma.f32	s15, s9, s14
 80085ba:	ee67 7a85 	vmul.f32	s15, s15, s10
 80085be:	eee5 7a87 	vfma.f32	s15, s11, s14
 80085c2:	dd1a      	ble.n	80085fa <__ieee754_logf+0x17e>
 80085c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80085c8:	ee20 7a07 	vmul.f32	s14, s0, s14
 80085cc:	ee27 7a00 	vmul.f32	s14, s14, s0
 80085d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80085d8:	b912      	cbnz	r2, 80085e0 <__ieee754_logf+0x164>
 80085da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80085de:	e7ac      	b.n	800853a <__ieee754_logf+0xbe>
 80085e0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8008634 <__ieee754_logf+0x1b8>
 80085e4:	eee6 7a86 	vfma.f32	s15, s13, s12
 80085e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80085ec:	ee37 0a40 	vsub.f32	s0, s14, s0
 80085f0:	eddf 7a11 	vldr	s15, [pc, #68]	; 8008638 <__ieee754_logf+0x1bc>
 80085f4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80085f8:	4770      	bx	lr
 80085fa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80085fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008602:	b912      	cbnz	r2, 800860a <__ieee754_logf+0x18e>
 8008604:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008608:	4770      	bx	lr
 800860a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8008634 <__ieee754_logf+0x1b8>
 800860e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8008612:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008616:	e7eb      	b.n	80085f0 <__ieee754_logf+0x174>
 8008618:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8008624 <__ieee754_logf+0x1a8>
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	cc000000 	.word	0xcc000000
 8008624:	00000000 	.word	0x00000000
 8008628:	4c000000 	.word	0x4c000000
 800862c:	004afb20 	.word	0x004afb20
 8008630:	007ffff0 	.word	0x007ffff0
 8008634:	3717f7d1 	.word	0x3717f7d1
 8008638:	3f317180 	.word	0x3f317180
 800863c:	3eaaaaab 	.word	0x3eaaaaab
 8008640:	3e1cd04f 	.word	0x3e1cd04f
 8008644:	3e178897 	.word	0x3e178897
 8008648:	ffcf5c30 	.word	0xffcf5c30
 800864c:	3e638e29 	.word	0x3e638e29
 8008650:	3ecccccd 	.word	0x3ecccccd
 8008654:	3e3a3325 	.word	0x3e3a3325
 8008658:	3e924925 	.word	0x3e924925
 800865c:	3f2aaaab 	.word	0x3f2aaaab

08008660 <_init>:
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008662:	bf00      	nop
 8008664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008666:	bc08      	pop	{r3}
 8008668:	469e      	mov	lr, r3
 800866a:	4770      	bx	lr

0800866c <_fini>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	bf00      	nop
 8008670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008672:	bc08      	pop	{r3}
 8008674:	469e      	mov	lr, r3
 8008676:	4770      	bx	lr
